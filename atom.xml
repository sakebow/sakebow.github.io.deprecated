<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakebow的小博客</title>
  
  <subtitle>一条苦苦挣扎的废柴大学狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sakebow.gitee.io/"/>
  <updated>2020-09-27T13:05:40.572Z</updated>
  <id>https://sakebow.gitee.io/</id>
  
  <author>
    <name>Sakebow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义module的导入</title>
    <link href="https://sakebow.gitee.io/2020/09/27/JavaScript/Vue/%E8%87%AA%E5%AE%9A%E4%B9%89module%E7%9A%84%E5%AF%BC%E5%85%A5/"/>
    <id>https://sakebow.gitee.io/2020/09/27/JavaScript/Vue/%E8%87%AA%E5%AE%9A%E4%B9%89module%E7%9A%84%E5%AF%BC%E5%85%A5/</id>
    <published>2020-09-27T12:40:00.000Z</published>
    <updated>2020-09-27T13:05:40.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>对于前端小白来说，ES5、ES6两套完全不一样的标准放在一起是很头疼的事。导入的时候同时使用两套不同的标准将会在<code>ESLint</code>存在的时候报错。</strong></p><a id="more"></a><h2 id="ES5的写法"><a href="#ES5的写法" class="headerlink" title="ES5的写法"></a>ES5的写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义neko.js并作为模块导出</span></span><br><span class="line"><span class="keyword">var</span> Neko = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Neko</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Neko.prototype.grow = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Neko</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  neko: Neko</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Neko模块</span></span><br><span class="line"><span class="keyword">import</span> Neko <span class="keyword">from</span> <span class="string">'./neko'</span></span><br></pre></td></tr></table></figure><p>可以看到，在定义这个<code>Neko</code>类的时候非常冗赘，而且多种多样的闭包让人眼花撩乱、不知所措。</p><h2 id="ES6的写法"><a href="#ES6的写法" class="headerlink" title="ES6的写法"></a>ES6的写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义neko.js并作为模块导出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Neko</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  grow () &#123;</span><br><span class="line">    <span class="keyword">this</span>.age += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Neko</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Neko.js模块</span></span><br><span class="line"><span class="keyword">const</span> Neko = <span class="built_in">require</span>(<span class="string">'./neko.js'</span>)</span><br></pre></td></tr></table></figure><p>在导入和导出的时候都出现了明显的不同。但是在不同之处又有些相同，这就在初学的时候容易弄混。</p><p>如果你使用了<code>ESLint</code>，你的语言将非常严格，于是在编辑的时候你只允许使用<code>ES5</code>、<code>ES6</code>的其中一种。</p><p>当你混用的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Neko</span><br></pre></td></tr></table></figure><p>这个时候你的程序就会报错。你的程序在其他位置一点问题都没有，大量复杂的继承、闭包只会让你更加心烦意乱。所以，我们还是尽可能统一风格、统一标准。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;对于前端小白来说，ES5、ES6两套完全不一样的标准放在一起是很头疼的事。导入的时候同时使用两套不同的标准将会在&lt;code&gt;ESLint&lt;/code&gt;存在的时候报错。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://sakebow.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Vue" scheme="https://sakebow.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>电网现状和未来</title>
    <link href="https://sakebow.gitee.io/2020/09/26/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E7%94%B5%E7%BD%91%E7%8E%B0%E7%8A%B6%E5%92%8C%E6%9C%AA%E6%9D%A5/"/>
    <id>https://sakebow.gitee.io/2020/09/26/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E7%94%B5%E7%BD%91%E7%8E%B0%E7%8A%B6%E5%92%8C%E6%9C%AA%E6%9D%A5/</id>
    <published>2020-09-26T00:43:00.000Z</published>
    <updated>2020-10-05T12:28:49.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>由于用电问题困扰了中国这个人口大国很久，于是也开始筹备智慧电网了。</strong></p><a id="more"></a><h2 id="什么是电网？"><a href="#什么是电网？" class="headerlink" title="什么是电网？"></a>什么是电网？</h2><p>现如今，我们的日常生活、游戏娱乐、工作生产等等非常依赖电力，甚至无法想象没有电会给人们带来怎样的空虚与恐慌。而在中国这样一个人口大国，14亿人的用电问题将是一个很严峻的挑战。取电已经到了一定的瓶颈，所以如何<strong>减少浪费</strong>将是另一个很重要的课题。</p><p><img src="https://sakebow.gitee.io/images/emoji/nopower.jpg" alt="没电了"></p><p><strong>电网</strong>正是处理这样一个问题的解决方案。电网将所有的用户<strong>织成了一张大网</strong>，每个人都在这张网上享有一定的电力。用这个电力，你可以维持你这个节点的正常运作。这正是传统电网的所有功能（<del><em>其实就一个功能</em></del>）。但是，随着需求越来越复杂、实际情况越来越多样，传统电网逐渐暴露出了越来越多的缺点。每当出现意外停电之后，我们除了一脸蒙圈地看着黑黑的屋子发呆，就只能对着电力热线乱发脾气，然后就只能空等着不知道什么时候才能回来的电力。如果你现在正在用电脑写文档，没有保存的你只能在停电之后思考人生。</p><p><img src="https://sakebow.gitee.io/images/emoji/down.jpg" alt="难受" width=350 /></p><p>所以，为了迎合变化多端的电力需求，就推出了智能电网。用户可以像购买云服务器一样按需升降配，也能够随时启动随时关闭。其中除了完成传统电网的所有功能外，还要加上对用户电力的动态管理、分析用户用电习惯并智能调节、快速定位故障位置并告知检修员和用户等等。</p><p><strong>举个简单的例子：</strong></p><p>你和几只猫娘住在一个<strong>有些年代</strong>的小区了，<strong>传统电网</strong>将每一家每一户都关联了起来。这里电路、网路都能满足需求。但是，这几年夏天明显热了好几个度，整个小区空调用电<strong>急剧升高</strong>。不是夏天的时候还凑合，结果一到夏天是不是就因为<strong>电路过载就大范围停电了</strong>。你、你的猫娘们和你的邻居们都热得没有办法。</p><p><img src = "https://sakebow.gitee.io/images/emoji/annoy.jpg" width=350 alt="生气" /></p><p>有一天，你攒够钱了，去了一个高档小区，架设了<strong>智能电网</strong>。虽然有些偏，但是非常宜居。你们经常开着四人座电驱动小汽车出门、开浴霸洗澡、电吹风、电饭煲、电压力锅……<strong>因为人多</strong>，所以你们的电压也明显比原来屋子里的<strong>电压大</strong>，而且电压非常稳定。即使是空调大开的夏天，猫娘和你们的房间也都能稳定制冷，你们每晚睡得都很安稳。</p><p><img src="https://sakebow.gitee.io/images/emoji/sigoi.jpg" alt="厉害了" width=350 /></p><p>由于你运气非常不错，营收额多了一倍，于是你带着猫娘出去大玩特玩了一周。在这一周内，你们家<strong>所有的用电都停了</strong>，于是你们被分配的<strong>电压也降低了</strong>，多余的电压就<strong>分配给其他的住户了</strong>。可能是你的邻居，也可能是城市另一端的某个陌生人。管他呢，总之你们家的电压因为长时间不用而被减少了。</p><p><img src="https://sakebow.gitee.io/images/emoji/np.jpg" alt="牛批的很"></p><p>这就是<strong>传统电网</strong>和<strong>智能电网</strong>之间的区别。</p><h2 id="电网的生态"><a href="#电网的生态" class="headerlink" title="电网的生态"></a>电网的生态</h2><p>别忘了，电网可是相当底层的技术，所以在这个项目之上理应有<strong>许多小项目</strong>来构成整个生态。就像你<strong>不能光有猫娘</strong>，这样不足以让她生活；还的有对应的猫粮、梳毛器、小鱼干、毛绒玩具、猫爬架等等，才是一个美好的生活环境。</p><p>所以，现在就衍生出了多个子项目：客户报障系统（<em>TCT</em>）、地理信息系统（<em>GIS</em>）、营销系统（<em>CMS</em>）、计量系统（<em>AMI</em>）、生产管理系统（<em>PMS</em>）、设计规划（<em>DCS</em>）等等，每个子项目都代表了一个服务，每个服务提供不同的功能。</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1976883394,2771927944&amp;fm=173&amp;app=25&amp;f=JPEG?w=640&amp;h=425&amp;s=510366B852C072E7DE94C9480300F0E3" alt="智能电网"></p><p>这个图来自<strong>我爱阳光明媚</strong>的<a href="https://baijiahao.baidu.com/s?id=1613397434596286148&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">什么是智能电网？智能电网有哪些特征？</a>，其中智能电网的每一个小模块都代表一个小服务，对应了一个小方向。由上而下的多级管理制度更方便了用电的调度和调节，具体的管理细节就是<strong>工程管理</strong>的知识了。每个调节的地方需要实时监测保障安全和正常使用，这就是仪器仪表的<strong>知识</strong>；调度时考虑每个节点的安全和线路的消耗和规划，这又是电气的知识了；发电能源再从核能发电、火力发电逐渐过渡到风力、水力、地热等等清洁能源，这也是化工的知识；因为是生态，所以在原理上有非常多的内容是相互交叉的，所以在子项目之间如何解耦却又高聚合又是一大问题。这又开始了<strong>软件工程</strong>的知识……</p><p>就这么简简单单地一列举，是不是觉得这个电网项目简直就是一项体量超级大的项目？</p><h2 id="全球的电网现状"><a href="#全球的电网现状" class="headerlink" title="全球的电网现状"></a>全球的电网现状</h2><p>现在中国的<strong>大部分</strong>城市依然还是使用传统电网，智能电网<strong>起步非常晚</strong>，政策少、标准少。但是面对<strong>14亿人的超大量用电</strong>问题，智能电网的升降配等操作都有很大的困难等待我们的挑战。另外，之前的传统电网都是单纯的电路连接，并不具备智能。如果全部修改成智能，需要大量的传感器、收发器、探测器等等，改造难度不亚于全部拆掉重新建。</p><p>国外起步较早，但因为各国发展现状和发展理念不一样，各有侧重。</p><p>欧洲电力行业更倾向于清洁能源和环保，毕竟是全球首先发达的几个地区之一，正在慢慢去工业化并更侧重环保；日本由于国土面积小、资源有限，能源可再生、节能降耗则是日本电网的基调；英国国家电网将整个国家分成11个区，每个区设置3到7个变电站和一个经理，每个变电站都有一名工程师和一队操作队。由于系统较中国成熟，所以已经实现了无人值班，并且工程师定期维修检查的制度。在美国，虽然全国被分为完全独立的几个州，电网不能够完全全球联网统一调度，但是美国依然完成了输电线路监测和和输电统通信网，还有配电系统、智能电表和用户侧系统，其中用户侧还包含家庭显示器、可编程恒温器、动态电价计量器等等。</p><p>当然，正因为电网是一整个生态，所以这些国家在建设的时候花费了不小的代价。首先是每家每户的传统电表改造成智能电表，并且政府、煤气电力市场等多方面提供了巨额科研经费以供智慧电网的架设和铺开。</p><h2 id="我国电网所面临的挑战"><a href="#我国电网所面临的挑战" class="headerlink" title="我国电网所面临的挑战"></a>我国电网所面临的挑战</h2><p>虽然电网建设了一整个包括营销、计量等的完整生态，但建设智能电网的最终目的还是回到了能源。以前的传统电网使用了煤炭、核能等不可再生而且污染严重的能源，而现如今的电网已经大量投入使用清洁能源，比如西南的太阳能、西北的风能等等。</p><p>但是正如刚刚所说，太阳能、风能等等分布并不是非常紧凑，反而非常分散；同时绝大部分的用电却又在我国东南部，造成了供电和用电的地理位置上的割裂。所以对于大容量储能还是有所不足，能源出现和能源使用的地方随机性太大。</p><p>不过也不用太担心，在电网中我们可以建立虚拟电厂，也就是VPP，全称<em>Virtual Power Plant</em>。虚拟电厂能够将一个片区的电力集中在一起，然后使用智能调控系统进行统一的管理。简单地概括，就是国家有电，你也要电，所以虚拟电厂就充当中介的作用，收集电、发配电。</p><p><img src="https://sakebow.gitee.io/images/电网/VPP.png" alt="VPP架构图"></p><p>理论上，不管片区多大都是可以集中的，但是考虑到成本问题，一般不会这么无谋。至于智能调控系统，就是刚刚提到的整个生态的系统了。传统电网的面向群体是一个小团体，可能是一个小区，也可能是一个别墅群，也可能是一栋筒子楼，剩下进入家家户户的还是得自行预估、设计、测算、牵线等等，麻烦但是无奈。而智能电网面向的群体则是个体用户，用得多得的多，用的少得的少。</p><p>听起来非常不错？但是挑战依然还有很多。如果是面向群体，那么一整个群体就能够共享、调节，最终达到一个稳定的用电标准。既然已经决定面向个体，那么就没有调节的余地了，这也就意味着电网将要面对无数完全不同的复杂需求进行严苛的调整。一户人家只有他一个大龄单身<del>死肥</del>宅，所以用电除了大量的空调就是全天候的电脑用电；你们家有很多只猫娘，从微波炉、电饭煲，到浴霸、热水器，再有空调、地暖，以及电脑和电视甚至电动小汽车等等应有尽有的电器用电，所以需要更多、更稳定、更复杂的管理；还有一家只有一只小小的猫娘，用电水平较低，所以分配较为轻松，但是也不能因为较为轻松所以完全放弃了这一家的正常用电；最后一家是一个到处寻找商机的商人，常年不在家，所以还需要给这位商人一个随时关停家庭用电的远程开关……</p><h2 id="我国电网未来的展望"><a href="#我国电网未来的展望" class="headerlink" title="我国电网未来的展望"></a>我国电网未来的展望</h2><p>在智能电网中，最大的方便之处估计就是自愈系统了。传统电力中，你只能等电网公司慢慢报故障、检查工人慢慢找故障、修理工人慢慢慢慢修故障；而在智能电网中，通过类似<code>SpringCloud</code>分布式集群中的熔断机制，能够暂时缓解小范围的断路故障，也能通过对各种各样的探测器传回总部的各种数值的大数据分析得出故障最可能发生的地点，然后让检修工人第一时间赶往现场，并通过<code>GIS</code>系统实时报告故障地址和检修工人的地址与进度。</p><p>是不是听起来就很方便？当然，到这里还不算结束。</p><p>中国高层已经安排了计划，要求建设运营好“两网”，分别是“<strong>坚强智能电网</strong>”和“<strong>泛在电力物联网</strong>”。</p><p>听起来就是两个新鲜的高端词汇？然而“坚强智能电网”即将完成了，就是：</p><blockquote><p><strong>以特高压为主干网架</strong>，核心使用<strong>传感技术</strong>，利用传感器对<strong>温度在线监测装置</strong>、<strong>断路器在先监测装置</strong>、<strong>避雷器在先监测装置</strong>、<strong>容性设备在线监测装置</strong>等关键设备进行实时监控，通过网络系统整合所有传感数据，通过<strong>数据分析</strong>和<strong>数据挖掘</strong>，协助电力系统的<strong>优化管理</strong>。</p><p>——摘自百度百科【<a href="https://baike.baidu.com/item/坚强智能电网" target="_blank" rel="noopener">坚强电网</a>】</p></blockquote><p>什么？你让我说人话？就是说从电厂出发的电是最强的，然后在运输线沿线各个地方放些传感器，然后让专门的人看看这些传感器的数据又没有问题、要不要修；同时，普通用户也能够看到一些他们自己非常关心的数据，譬如账户余额、家庭用电量什么的，来满足日常生活和突发事故排查以及报障。</p><p>这就是“坚强智能电网”，首先是“<strong>坚强</strong>”，然后是“<strong>智能</strong>”。优先保障电力的稳定，然后在这个的基础上保持一定的智能。</p><p>那么“泛在电力物联网”又是什么？先从字面上理解，“泛在”一词，顾名思义，意为“<strong>广泛存在的</strong>”，就像是我们现在人手一部手机一样，见怪不怪了。“电力物联网”应当放在一起，因为是<strong>由电力作为媒介传递信息的万物互联而构成的网</strong>。只要是用电的，无论是工厂、办公室还是小商店，都能够实时监控；每个人都像一个行走的结构体，各个字段信息像血肉一样丰富了信息时代的你。</p><p>接下来我们看看官方怎么解释：</p><blockquote><p>国网公司做出两个阶段的战略安排：</p><p>到2021年初步建成泛在电力物联网，基本实现业务协同和数据贯通，初步实现统一物联管理，各级智慧能源综合服务平台具备基本功能，支撑电网业务与新兴业务发展。<br>到2024年建成泛在电力物联网，全面实现业务协同、数据贯通和统一物联管理，公司级智慧能源综合服务平台具备强大功能，全面形成共建共治共享的能源互联网生态圈。</p><p>——摘自百度百科【<a href="https://baike.baidu.com/item/泛在电力物联网" target="_blank" rel="noopener">泛在电力物联网</a>】</p></blockquote><p>百度百科的这一条可以说是基本上阐述了泛在电力物联网的目的，挖掘核心价值，就是“万物互联”、“能源服务”和“生态建设”。</p><p>万物互联是一个很庞大的图景。有多庞大？就像是单凭一个人画出清明上河图那么庞大。不是完不成，而是需要面对很多挑战。图景里有些什么呢？大到港口运了几千万吨货物，小到今天生产了多少罐猫粮；重要到今天印了多少钞票，普通到你今天看了多少<del>R18</del>图片……是不是不由得默默咽了一口唾沫？</p><blockquote><p>2018年，国往信通工作会议上就提出了“打造全业务泛在电力物联网，建设指挥企业，引领具有卓越竞争力的世界一流能源互联网企业建设”的工作目标，并提出了建设“国网-电力物联网”，简称<code>SG-eIoT</code>，即<code>electric Internet of Things</code>。</p><p>——摘自搜狐新闻【<a href="https://sohu.com/a/299805908_99947185" target="_blank" rel="noopener">什么是“泛在电力物联网”？要建立一个什么样的泛在电力物联网？</a>】</p></blockquote><p>大力发展智能电网的目的，主要就是为了能够打通终端、网络、平台、运维和安全五大体系，构建一个非常完整的生态，同时打通输电、变电、配电、用电、卖电五大场景，统一管理、统一协调，并实现各类终端设备的热插拔。到了那个时候，不管你是工厂添置设备，还是数据中心追加服务器集群，还是街边添加自助售货机，都是插上电立马给你一条龙服务。</p><p>当然，有大项目就得用大技术。预计这次会用到“大云物移智”，即大数据、云计算、物联网、移动互联网和人工智能。不过，感觉像是留了一手一样的，国家电网一点口号都没有喊，甚至都没有大肆宣传任何一点小成就，突然“坚强智能电网”就要建好了，突然就声明2024年需要建好智能电网，突然就声明2030年能够接入<code>SG-IoT</code>网络的设备达到20亿台。可以看到国家电网已经有相当的实力了。</p><p>未来肯定是美好的，我也相信学术界和商业圈都已经做好准备了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;由于用电问题困扰了中国这个人口大国很久，于是也开始筹备智慧电网了。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="电网" scheme="https://sakebow.gitee.io/categories/%E7%94%B5%E7%BD%91/"/>
    
    
      <category term="论文研究" scheme="https://sakebow.gitee.io/tags/%E8%AE%BA%E6%96%87%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>智能微电网</title>
    <link href="https://sakebow.gitee.io/2020/09/26/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E6%99%BA%E8%83%BD%E5%BE%AE%E7%94%B5%E7%BD%91/"/>
    <id>https://sakebow.gitee.io/2020/09/26/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E6%99%BA%E8%83%BD%E5%BE%AE%E7%94%B5%E7%BD%91/</id>
    <published>2020-09-26T00:43:00.000Z</published>
    <updated>2020-10-10T07:48:08.548Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>微电网，听起来就像是微服务一样，总觉得和<code>SpringCloud</code>、模块化、可插拔的灵活架构有关。</strong></p><a id="more"></a><h2 id="微电网"><a href="#微电网" class="headerlink" title="微电网"></a>微电网</h2><p><strong>微电网</strong>和<strong>电网</strong>有一定的区别。</p><blockquote><p>电力系统中各种电压的变电所及输配电线路组成的整体，称为<strong>电力网</strong>。它包含<strong>变电</strong>、<strong>输电</strong>、<strong>配电</strong>三个单元。电力网的任务是输送与分配电能，改变电压。</p><p>——百度百科【<a href="https://baike.baidu.com/item/电网/1250763" target="_blank" rel="noopener">电网</a>】</p></blockquote><p>也就是说，电网只是单纯的一张<strong>网</strong>，电厂、工厂、公司、家庭等等就像是网中的一个<strong>节点</strong>，节点之间依靠各种电线、变电器、配电器等等<strong>相互连接</strong>。这就是日常生活最普遍的基本电力网络，<strong>单纯供电用网络</strong>。但也正是这个电力网络，是中国现今<strong>特高压坚强电网</strong>的基石，也是“基建狂魔”背后的重要支撑。</p><p>那么<strong>微电网</strong>又是什么呢？</p><blockquote><p>微电网（Micro-Grid）也译为微网，是指由<strong>分布式电源</strong>、<strong>储能装置</strong>、<strong>能量转换装置</strong>、<strong>负荷</strong>、<strong>监控</strong>和<strong>保护装置</strong>等组成的<strong>小型发配电系统</strong>。</p><p>——百度百科【<a href="https://baike.baidu.com/item/微电网/568036" target="_blank" rel="noopener">微电网</a>】</p></blockquote><p>看起来这个说明相较于电网更高端？但是我们来提取关键字：“<strong>小型发配电系统</strong>”，也就是说微电网只是单纯的体量小一些，<strong>本质还是电网</strong>。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>如果你以前是Java工程师，那么你应该对<strong>微服务</strong>有所了解。</p><p>由于一台机器的负载能力和处理能力是非常有限的，所以将一整个项目拆分成多个模块，每个模块使用一台机器发布服务，这样整个项目的处理能力和负载能力就明显提高了。而<strong>微服务</strong>的核心，就是<strong>分布式</strong>。</p><p>打个比方，你一直照顾你们家好多只猫娘的一日三餐。但是你的钱再怎么也不够花一年，所以除了一日三餐你还得工作。虽然非常累的时候有猫娘能治愈你的内心，但这也不是办法。</p><p>于是你决定让一些听话懂事的猫娘帮你做饭。比如，大姐帮你剁肉、二姐帮你择菜、最有活力的几个出去购物等等。每只猫娘都在整个做饭过程中都帮了一小部分忙，这样你每天也轻松多了。</p><p>这就是微服务，分解、解耦、各司其职，<strong>分布式</strong>就是最核心的部分。</p><h2 id="微电网和微服务"><a href="#微电网和微服务" class="headerlink" title="微电网和微服务"></a>微电网和微服务</h2><p>同样的，<strong>微电网</strong>也适用于这样的解释。</p><p>微电网由各种分布式的装置，将各个<strong>小规模</strong>的储能装置联合起来形成<strong>大容量</strong>的储能厂；同时保护装置、负荷装置、能量转换装置以及监控保护装置都能够使用<strong>较小型</strong>的设备，减小了开支；同时分布式的架构也能够轻松实现模块的新增和删除，即分布式设备的<strong>即插即用</strong>；不仅如此，分布式的电源能够使得<strong>多种完全不同的发电装置</strong>有了合并的可能，比如风能、太阳能、潮汐能等新兴的新能源发电技术；再加上，地形复杂的西部地区，发电装置难以互联、用电之处远在东南，分布式更适合这种<strong>复杂的地理环境</strong>，更不用说像南海诸岛这样甚至无法架设地面缆线的<strong>极端地形</strong>……可以说是具有相当多的便利了。</p><p>当然，有方便之处当然也就有麻烦之处。</p><blockquote><p>在高并发分布式的场景下，故障经常是突然间就<strong>雪崩式爆发</strong>。所以必须建立完善的监控体系，尽可能发现故障的征兆。</p><p>——知乎<strong>老刘</strong>对<a href="https://www.zhihu.com/question/65502802" target="_blank" rel="noopener"><strong>什么是微服务架构</strong></a>的回答（一楼）</p></blockquote><p>由于<strong>微服务</strong>是由各个模块相互之间交流构成的，所以往往出现错误之后虽然能够补救，却难定位。错误在开发过程中很难预测，往往在开发中就只是用一个统一错误处理草率解决；不仅如此，一旦微服务架构中某个模块出错甚至可能导致整个系统雪崩。所以定位错误有些困难，处理和解决错误也难。<strong>微电网也不例外</strong>。分布式的微电网在故障检测的时候往往要消耗更大的代价。大量的传输线、变压器、配电器，使得监测代价提升了不止一倍；更何况，雪崩之后不知道会发生什么事故，甚至会有工作人员伤亡的可能。</p><p>万事万物都是矛盾的，微电网也是。但是，考虑到将来带来的方便，这些缺点无论如何都是要硬着头皮克服了。</p><h2 id="现存的微电网标准"><a href="#现存的微电网标准" class="headerlink" title="现存的微电网标准"></a>现存的微电网标准</h2><h3 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h3><p>对于美国地广人稀的特点，部分远郊地区供电成本过大，分布式电网确实比较适合；而华盛顿、曼哈顿等大城市却又是用电量超越想象，分布式电网也拥有较大的负载和能量储存系统，也是不错的选择。</p><blockquote><p>而美国CERTS定义的微电网要设计成当主电网发生故障时微电网与主电网无缝解列或成孤岛运行，一旦故障去除后便可与主电网重新连接。这种微电网的优点是它在与之相连的配电系统中被视为一个自控型实体，保证重要用户电力供应的不间断，提高供电的可靠性，减少馈线损耗，对当地电压起支持和校正作用。</p><p>——百度百科【<a href="https://baike.baidu.com/item/微电网/568036" target="_blank" rel="noopener">微电网</a>】</p></blockquote><p>可以看到美国对于微电网的要求是具有高灵活度的“热插拔”，也就是分布式模块中的某一个模块坏掉了之后能够立马像火箭一样脱离整体，保证其他地区用电的同时将故障区域隔离开，方便之后的检修。这也是体现了美国使用科技解放人力的主旨。</p><h3 id="欧盟"><a href="#欧盟" class="headerlink" title="欧盟"></a>欧盟</h3><p>而欧洲因为起步较早，已经有了相应的气候，整个电网生态的诸多理论已有苗头。另外，相应的，欧盟国家的多个地区为了更好的发展，也一直在互相帮助，高度工业化的欧洲国家也就在互相帮助中有了完全不同的技术与规范。</p><blockquote><p>欧洲提出要充分利用分布式能源、智能技术、先进电力电子技术等实现集中供电与分布式发电的高效紧密结合，并积极鼓励社会各界广泛参与电力市场，共同推进电网发展。微电网以其智能性、能量利用多元化等特点也成为欧洲未来电网的重要组成。欧洲已初步形成了微电网的运行、控制、保护、安全及通信等理论，并在实验室微电网平台上对这些理论进行了验证。其后续任务将集中于研究更加先进的控制策略、制定相应的标准、建立示范工程等。即，为分布式电源与可再生能源的大规模接入以及传统电网向智能电网的初步过渡做积极准备。</p><p>——百度百科【<a href="https://baike.baidu.com/item/微电网/568036" target="_blank" rel="noopener">微电网</a>】</p></blockquote><p>可以看出，欧洲对于电网的主旨便是像以前的苏联一样，各司其职、物尽其用。另外，已经高度工业化、甚至开始去工业化的欧洲地区，对于电网的另一个考虑就是可再生的清洁能源。</p><h3 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h3><p>了解世界地图的人应该都知道，日本这个弹丸之地资源非常有限，需求却始终随着时代的发展不停上涨。所以日本的主题更偏向能源多样化。</p><blockquote><p>微电网是指在一定区域内利用可控的分布式电源，根据用户需求提供电能的小型系统。</p><p>东京大学给出的定义：微电网是一种由分布式电源组成的独立系统，一般通过联络线与大系统相连，由于供电与需求的不平衡关系，微电网可选择与主网之间互供或者独立运行。</p><p>三菱公司给出的定义：微电网是一种包含电源和热能设备以及负荷的小型可控系统，对外表现为一整体单元并可以接入主网运行；并且将以传统电源供电的独立电力系统也归入为微电网研究范畴，大大扩展了美国CERTS对微电网的定义范围。</p><p>——百度百科【<a href="https://baike.baidu.com/item/微电网/568036" target="_blank" rel="noopener">微电网</a>】</p><p>日本微电网的架构允许燃气轮机等旋转发电设备直接接入到微电网同步运行，目前，日本的微电网研究集中在负荷跟踪能力、电能质量监控、电力供需平衡、经济调度以及孤岛稳定运行等方面。</p><p>——中国储能网【<a href="http://www.escn.com.cn/news/show-187504.html" target="_blank" rel="noopener">日本微电网项目介绍</a>】</p><p>在Hachinohe的微电网展示项目中，目标主要集中在研究间歇的可再生能源发电对微电网控制的影响，分布式电源包括：PV、小型风力机和生物质能发电。</p><p>——中国储能网【<a href="http://www.escn.com.cn/news/show-187504.html" target="_blank" rel="noopener">日本微电网项目介绍</a>】</p></blockquote><p>可以看到，因为资源非常有限，能源来源非常多样，分布式储能系统正好应对了多种能源来源；同时，多样的能源转化、灵活的配电系统，能够让日本针对各种各样的场景进行灵活的升降配。但是，日本却<strong>没有</strong>将设备的<strong>即插即用</strong>考虑进电网之中，具体原因无可考证。但是分布式电源的多样化却做的非常认真，也算是在具有日本特色的发展时代中有所偏重。</p><h2 id="我国的微电网现状"><a href="#我国的微电网现状" class="headerlink" title="我国的微电网现状"></a>我国的微电网现状</h2><p>一些发达国家已经先走一步了，现在已经有了略高于我们的成就。但是，毕竟我们有着大量的测试用户（<em>14亿人</em>）、大量的复杂地形（<em>从高原到盆地一应俱全</em>）和大量的刁钻使用方式（<em>从日常使用到工业控制，甚至从军事用电到黑市挖矿</em>），我们若是一一攻克，说不定还有再重大技术上超越发达国家的可能，就比如现如今的音媒体和电子支付已经是远远超过任何一个国家了。当然这也只是我单纯的猜想和内心的希望。</p><p>说点实际的吧。</p><blockquote><p>从2017年开始，国家标准和能源局的文件里已经开始正式把这个定义明确，上升到国家标准层面或者是上升到国家政策层面，在标准里面规定微电网是指由分布式发电、用电负荷、监控、保护和自动化装置等组成的，是一个能够基本实现内部电力电量平衡的小型供电系统，微电网分为并网型微电网和独立型微电网。在2017年能源局发的文件里面，对这个定义也做了进一步的明确，基本上也是比较类似的表述。</p><p>——搜狐网：<strong>国电阳光</strong>【<a href="https://www.sohu.com/a/236529823_100005941" target="_blank" rel="noopener">微电网技术当前现状及未来发展趋势</a>】</p></blockquote><p>可以看到，2017年国家开始重视微电网，并制定了国家层面的标准与规范。事实上，中国在最近5年间已经几近完成了“坚强电网”，所以对于普通民众来说普通电网和微电网并没有什么特别大的差别。但是在石油无法自给自足、甚至还被其他国家左右命运的时代中，可再生的新能源迫在眉睫；同时为了弥补新能源供能尚且不足以超过石油的缺点，多个发电厂联合功能、统一管理也是为了整个电网的安全和稳定不得不作出的考虑。</p><p>当然，高层还做出了更远的考虑。</p><blockquote><p>两大电网公司在今年初都相继提出要向综合能源供应上转变，怎么将电力、燃气、水务、热力等多种资源捆绑成一种资源，实现彼此耦合，解决有关能源的有效利用和调峰的问题，这是微网要解决的问题，当然这也是我们电网公司发展的一个重要的机遇。</p><p>——搜狐网：<strong>国电阳光</strong>【<a href="https://www.sohu.com/a/236529823_100005941" target="_blank" rel="noopener">微电网技术当前现状及未来发展趋势</a>】</p></blockquote><p>可以想象，未来肯定是将会统一管理的。若是发展到了足够优秀的地步，也是能够一切按照各种仪器设备和各类管理系统进行统一的管理，“一条龙服务”的方便未来似乎近在眼前了，不再因为石油危机担忧的未来也不远了，甚至就连一带一路沿线的所有经营点、合作国都将用上这样方便的微电网，逐步走向合作共赢、实现人类命运共同体。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;微电网，听起来就像是微服务一样，总觉得和&lt;code&gt;SpringCloud&lt;/code&gt;、模块化、可插拔的灵活架构有关。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="电网" scheme="https://sakebow.gitee.io/categories/%E7%94%B5%E7%BD%91/"/>
    
    
      <category term="论文研究" scheme="https://sakebow.gitee.io/tags/%E8%AE%BA%E6%96%87%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>数据中台是什么</title>
    <link href="https://sakebow.gitee.io/2020/09/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>https://sakebow.gitee.io/2020/09/26/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2020-09-26T00:43:00.000Z</published>
    <updated>2020-10-10T13:51:07.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>现在，“数据中台”这个概念越来越火，但是数据中台到底是什么，服务对象是谁，目标又是什么？</strong></p><a id="more"></a><h2 id="数据中台的概念"><a href="#数据中台的概念" class="headerlink" title="数据中台的概念"></a>数据中台的概念</h2><blockquote><p>数据中台被誉为大数据的下一站，由阿里兴起，核心思想是数据共享，并在 2018 年因为“腾讯数据中台论”再度成为了人们谈论的焦点。</p><p>——CSDN：<strong>VIP_CQCRE</strong>：【<a href="https://blog.csdn.net/cqcre/article/details/96935800" target="_blank" rel="noopener">到底什么是数据中台？</a>】</p><p>数据中台是对既有/新建信息化系统业务与数据的沉淀，是实现数据赋能新业务、新应用的中间、支撑性平台。</p><p>——百度百科【<a href="https://baike.baidu.com/item/数据中台/53067001" target="_blank" rel="noopener">数据中台</a>】</p></blockquote><p>确实，数据中台只是近些年火起来的名词。而且“数据中台”这个词语，听起来就像是和“<strong>数据</strong>”和“<strong>中</strong>”有很大的关系，似乎就是<strong>中间件</strong>+<strong>大数据</strong>。虽然目前还没有一个定义来确定这个词语到底是指代什么，但是很明显的是，这个词语就是为了<strong>数据</strong>和<strong>中间处理</strong>而存在的。</p><p>既然这个技术涉及数据，那么这个技术将不可能外包给其他的什么公司或者个人。虽然非常无奈，但是物理隔绝确实能保证秘密不会被传播。所以，比起<code>SpringCloud</code>、<code>Odoo</code>、<code>GoodERP</code>等这些个框架，还是不能够随意售卖、转让或者开源。</p><p>那么数据中台到底是什么？</p><blockquote><p><strong>数据中台是一套可持续“让企业的数据用起来”的机制，一种战略选择和组织形式，是依据企业特有的业务模式和组织架构，通过有形的产品和实施方法论支撑，构建一套持续不断把数据变成资产并服务于业务的机制。</strong></p><p>——知乎：<strong>Alan</strong>：【<a href="https://zhuanlan.zhihu.com/p/99591075" target="_blank" rel="noopener">数据中台（一）什么是数据中台</a>】</p><p><strong>数据中台是在政企数字化转型过程中，对各业务单元业务与数据的沉淀，构建包括数据技术、数据治理、数据运营等数据建设、管理、使用体系，实现数据赋能。数据中台，是新型信息化应用框架体系中的核心。</strong></p><p>——百度百科【<a href="https://baike.baidu.com/item/数据中台/53067001" target="_blank" rel="noopener">数据中台</a>】</p><p>中台是一种经营理念；中台是一种组织形式；中台是“平台思维”的自然演进</p><p>——节选自<a href="https://bilibili.com/BV1F741177R9" target="_blank" rel="noopener">第十届全球软件开发大会：菜鸟数据中台的演讲</a></p></blockquote><p>看起来还是有点深奥。而且越来越多的专业词汇让你感觉到更摸不着头脑了！</p><p>让我们来看看知乎：<strong>Alan</strong>：【<a href="https://zhuanlan.zhihu.com/p/99591075" target="_blank" rel="noopener">数据中台（一）什么是数据中台</a>】中附上的图片：</p><p><img src="https://pic4.zhimg.com/80/v2-62e4ca86b5cc1ca51e99bd115d460e6f_720w.jpg" alt="数据中台的架构图"></p><p>到这里，基本上就对数据中台有一个概念了：</p><p><strong>数据中台实际上是企业在对用户行为进行分析时，为了将用户数据最大化利用的平台。</strong></p><p>那么，什么是最大化利用？</p><p>举个例子，在很早之前，甚至电商还没有起步的时候，你的小蛋糕店（<del><em>La Soleil</em></del>）都是<strong>通过你自己的大脑记住常客的偏好</strong>来选取顾客最喜欢的口味。</p><p>但是，你的猫娘女仆们实在太可爱了，为你吸了大量的粉，生意很快做起来了，不光是为了蛋糕，还有为了猫娘慕名前来的顾客，甚至还有预定的顾客，你越来越忙不过来了。所以，你用你超强的代码能力，做了个<strong>推荐系统</strong>出来。用户注册之后，系统便会记录每一次下单的偏好特点，并<strong>制作适当的模型进行预测</strong>。用户再次下单时，就能看到自己的偏好摆在首页上，非常方便。</p><p>这时，你的妹妹（<del><em>这即视感太强烈了啊喂</em></del>）当起了你的蛋糕店的公关，开始推广、联动，甚至积极出周边，很快做出了蛋糕店以上的很多服务。你的小蛋糕店规模现在已经不得了了，甚至歪果仁都慕名而来，推荐系统的日活甚至超过了10万。于是，<strong>你决定将小作坊升级为大企业</strong>。这个转变并不容易，所以你想到了数据中台。你希望数据中台为你完成这些任务：</p><ul><li>你一个人再也没有那么多精力制作那么多的蛋糕了，所以你雇用了很多特级厨师，不仅要做蛋糕，还要做出法式、意式、英式、中式、日式等等特色；别忘了雇佣采购员和外送员，你们家的猫娘忙着照顾客人，才没有时间出去跑腿呢。数据中台就帮助你完成企业中各角色的上下班打卡、每日食品产出、请假、评级等等的人员管理。<strong>这是企业员工管理</strong>；</li><li>你的蛋糕店的各种原材料库存得严格把关了。糖每天都有多少、奶油每天还有多少、各种水果罐头每天还有多少……低于某一个阈值的时候发短信、发邮箱进行预警。这是企业库存管理；</li><li>你的蛋糕店的各种用户数据都应当记录，并且针对客户的各种订单进行偏好预测；同时，还要能够接收客户对于各种地方的吐槽，并且积极回复、处理、反馈。<strong>这是企业客户管理</strong>；</li><li>为了高效制作蛋糕，机器肯定不能少。搅拌机、烘烤机等等全部都要有一个管理，比如哪个设备正在运作、经过了多长时间的连续运转、下次损坏是多久之后等等；不仅如此，部分简单劳动可以使用机器集群完成，一旦集群中某一个坏掉了便需要紧急绕开损毁机器并选择其他运行方案。<strong>这是企业设备管理</strong>；</li><li>在完成基本的用餐之后，你的妹妹还需要处理各种联动企划、手办设计和各大平台的推广，于是需要记录各种各样的合作安排与合作绩效，并从中选出最有前景的几家进行长期合作。<strong>这是企业合作管理</strong>；</li><li>……</li></ul><p>听起来这完全就像是一个很普通的<code>ERP</code>系统？不不不，<strong>远没有这么简单</strong>。细心的你应该能注意到这些事情：</p><ul><li>在<strong>人员管理</strong>中，你可以使用<strong>大数据</strong>对现在的员工进行分析，他们是有什么样的特殊属性才能够成为企业中最优秀的几个员工，下次招聘的时候就按照这个标准进行招聘，从而让自己的员工逐年精进；</li><li>在<strong>库存管理</strong>中，你可以使用<strong>大数据</strong>分析前些日子中的售卖数据，然后发现每年的特定时间段有着特定的销售规律，库存也会按照这个规律逐渐耗尽，有时速度非常快，有时速度非常慢。针对不一样的处境，系统会选择不同的时机提出警告，让采购尽快购回；</li><li>在<strong>客户管理</strong>中，你可以使用<strong>大数据</strong>分析客户行为数据，将一个个用户逐渐<strong>标签化</strong>，使用权重最大的一个或者很多个标签对用户的偏好进行分析和定义，以便能够更好地推销新旧产品；</li><li>在<strong>设备管理</strong>中，你可以使用<strong>大数据</strong>分析机器在什么样的工作环境下工作能够坚持多久，并预测在什么样的环境下这个设备将会被损毁，从而尽快维护翻新更换；同时在机器集群损毁其中一台的时候，你的整个系统能够寻找不影响其他机器运转的其他线路，进行<strong>智能调度</strong>；</li><li>在<strong>合作管理</strong>中，你可以使用<strong>大数据</strong>分析在什么样的平台做推广能够得到最大回报，也可以分析手办穿着什么服装、摆出什么动作能够得到买家最大的呼声，并使用<strong>数据可视化</strong>做出日活、周活等折线图、柱状图、饼状图等进一步辅助分析；</li><li>……</li></ul><p>听起来这个普通得不能再普通的<code>ERP</code>系统瞬间就变成了<strong>一整个生态</strong>，包括了企业员工、企业设备、企业自己、合作企业、蛋糕客户、手办客户等等在内所有的数据整合在一起，通过数据挖掘、数据分析、标签化、智能调度、可视化、监控告警等等技术，完成企业方方面面的管理和经营；作为总经理的你面对每一个问题时都能够从数据中台中找出对应的源数据和经过分析后的数据来进行决策。<strong>这听起来就像是世界500强的作风啊</strong>！</p><h2 id="数据中台的目的"><a href="#数据中台的目的" class="headerlink" title="数据中台的目的"></a>数据中台的目的</h2><p>看了以上很长一段对于数据中台运行生态和运行机制，我们接下来再讨论数据中台的能力和目的。</p><p>数据中台应当具备三个能力：</p><blockquote><p>1、在中台能力及资源充足的情况下（包括业务知识、技术能力、人才积累），提供数据产品、数据服务。</p><p>2、在中台业务能力及人力资源不充分、但体系相对成熟的情况下（包括数据体系、技术体系），提供平台级别的能力，包括数据平台能力、技术平台能力、建模平台能力等，甚至是数据本身。</p><p>3、在中台人力资源和对业务领域知识理解不充分，平台级别能力也无法满足要求的情况下，作为算力基础平台提供服务。</p><p>——知乎：<strong>帆软</strong>：【<a href="https://zhuanlan.zhihu.com/p/121047371" target="_blank" rel="noopener">一文详解数据中台，别再跟数据平台搞混了！</a>】</p></blockquote><p>说白了，这三个目的旨在应对三个不同的场景：</p><ul><li>在企业<strong>已经做到足够大</strong>的情况下，能够为自己的企业、其他的企业提供服务。比如，现在的高德地图提供地图接口、阿里巴巴提供快递查询接口和阿里云服务；</li><li>在企业<strong>沿用已有的制度和技术</strong>的情况下，能够给别人提供服务。比如，现在的<code>GoodERP</code>对<code>Odoo</code>进行二次封装之后卖其他的中小型企业，并根据需求进行二次开发和部署；</li><li>在企业<strong>完全没有形成气候</strong>的情况下，给其他企业做最简单的事情。比如，现在的各大高校实验室中，技术力较为低下、硬件水平明显不足、工作时间明显较少，但还是在接很多的横向项目，通过外包和承包等等手段介入并为他们根据原型进行代码实现、根据需求进行数据清洗等等。</li></ul><p>简直就像游戏的难度分级一样：从简单到困难，再就是噩梦难度；从不需要太苦思冥想的简单重复劳动，到需要动点脑子针对特殊的业务进行特殊的编码实现，最后到时时刻刻都需要认真思考，针对每一个细节进行最大的优化。如果真的要做到这一步，我们将会更详细地要求：</p><blockquote><p><strong>决策支持类</strong>：主题报表（月度/季度/年度/专题）的大屏数据可视化展示</p><p><strong>数据分析类</strong>：<code>BI</code>、商业智能、<code>OLAP</code>分析、数据挖掘、数据驱动的机器学习</p><p><strong>数据检索类</strong>：全文检索、日志分析、数据血缘分析、数据地图</p><p><strong>数据共享开放类</strong>：实时数据订阅、离线数据接触、数据<code>API</code>接出</p><p>——知乎：<strong>帆软</strong>：【<a href="https://zhuanlan.zhihu.com/p/121047371" target="_blank" rel="noopener">一文详解数据中台，别再跟数据平台搞混了！</a>】</p></blockquote><p>这些就都是只有具有超强算力的大型公司才能够完成的任务了。</p><p>不难发现，数据中台甚至都包含一定的<strong>业务能力</strong>，如果我们放入鸡蛋、面粉和糖（<em>代指<strong>源数据</strong></em>），出来的可就是蛋糕了；而普通的大数据平台只不过是<strong>分析数据的工具</strong>而已，如果单纯的放入鸡蛋、面粉和糖，可能就只有一团白色的浆糊，剩下的烘焙、成型、涂奶油还得我们另外寻找其他办法；再深挖一些，大数据平台中使用的Hadoop集群，就更是完全没有任何其他功能的数学分析工具而已，放入鸡蛋、面粉和糖，它甚至只能在你混在一起之后巧妙地重新分为三类。当他恨不得拍着胸脯像你炫耀的时候，你恨不得狠狠锤它两拳。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;现在，“数据中台”这个概念越来越火，但是数据中台到底是什么，服务对象是谁，目标又是什么？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据" scheme="https://sakebow.gitee.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="数据中台" scheme="https://sakebow.gitee.io/tags/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>读论文的方法论</title>
    <link href="https://sakebow.gitee.io/2020/09/25/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    <id>https://sakebow.gitee.io/2020/09/25/%E7%94%B5%E7%BD%91%E7%A0%94%E7%A9%B6/%E8%AF%BB%E8%AE%BA%E6%96%87%E7%9A%84%E6%96%B9%E6%B3%95%E8%AE%BA/</id>
    <published>2020-09-25T06:44:00.000Z</published>
    <updated>2020-09-26T10:57:12.235Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>研究生生活开始了，学术上可不能有所怠慢，尤其是作为学硕的我。</strong></p><a id="more"></a><p><strong>一般的，我们会把一篇论文阅读很多次。</strong></p><h2 id="第一遍"><a href="#第一遍" class="headerlink" title="第一遍"></a>第一遍</h2><p>首先，我们会关注论文的<strong>摘要</strong>、<strong>引文</strong>。因为这会让我们对开题的各种说明有些了解。</p><p>同时，正因为我们正处于寻找课题的阶段，所以我们现在需要做的就是理解研究思路、掌握分析方法。当然也别忘了语言的雕琢，<strong>审稿人最喜欢那些听起来非常拗口的东西了</strong>。</p><h2 id="第二遍"><a href="#第二遍" class="headerlink" title="第二遍"></a>第二遍</h2><p>第二遍大概会<strong>在我们稍有基础之后</strong>，这时我们会对一定的数据格式有一定的敏感性。也正是这个时候，我们会仔细了解论文的<strong>图表信息</strong>，包括图表中所包含的<strong>数字</strong>、<strong>文字说明</strong>和<strong>得出结论</strong>。在这时，需要从作者所提供的数据，在作者所站在的角度上通过什么样的标准才能够的出论文中所阐述的结论。如果你觉得恰当，是为什么？如果你觉得欠妥，又是为什么？</p><p><em>在这里插播一句话：你能检索的论文都不会有所误解，只会有所欠缺，因为能够在这上面发表的论文起码在因果关系上是没有问题的，数据造假问题不再考虑范围内。</em></p><p>当然，这时正因为你有了一些基础，所以你可以<strong>略读摘要和引言</strong>，<strong>直接找图表进行深入讨论</strong>，其他的细枝末节干脆屏蔽掉也是可以的。</p><h2 id="第三遍"><a href="#第三遍" class="headerlink" title="第三遍"></a>第三遍</h2><p>第三遍自然也是第二遍的升级。这个时候我们已经具备了阅读实际问题的能力了，<strong>即使面对几十个数据文档的轮番轰炸也能够应对自如</strong>。那么，这个时候就应该联系<strong>摘要</strong>、<strong>引文</strong>和<strong>图表</strong>，看图表是不是对应着这些摘要和引文。如果不是，那么图表又在说明什么问题？如果是对应的，那么图表又为什么样的结论提供了强有力的证据？作者对这样的证据是如何讨论的？</p><p>这个时候就需要对应你了解的引言和摘要，开始对图表进行分析了。就想象你是一名小学语文老师一样，板着一副臭脸，拍着桌子喊着：“你的主题呢？！”那种高高在上的姿态估计很多人都会欲罢不能。这就是坚持到找到乐趣的时候了，相信你也离成功不远了。</p><h2 id="第四遍"><a href="#第四遍" class="headerlink" title="第四遍"></a>第四遍</h2><p>这个时候相信你已经入门了。最起码，你能够自己模仿了。这个时候，就开始读一些高级论文吧，因为一篇文章的高级可不是因为一个句子而高级，而是一整篇全程高能才叫高级。从字里行间学习他们行文的规范和规律，再从一字一句中扣出思想和论证方法。</p><p>这个阶段更考验的是我们的综合能力了，除了文档的格式规范、图表分析，更是字里行间透露出你对学科的严谨、认真。</p><h2 id="第五遍"><a href="#第五遍" class="headerlink" title="第五遍"></a>第五遍</h2><p>能够读第五遍的文章应该只有英文论文了。因为这是我们中文母语的学生所不熟悉的领域，于是对于我们来说相当于又回到了第一遍。但是，学习正是这样一种“<strong>螺旋上升</strong>”的变化过程，不是么？</p><h2 id="后面的文章行文规律"><a href="#后面的文章行文规律" class="headerlink" title="后面的文章行文规律"></a>后面的文章行文规律</h2><p>上面我们介绍了读五遍论文的时候每一遍都应当做些什么，所以在写论文的读后感的时候，我们会将文章分成<strong>至少四个部分</strong>，每个部分将会侧重不同的地方，每个地方针对每个不同的阶段都会有不同的侧重点。相信针对每个不同阶段的人都会有不同的收获吧。</p><p>祝各位都变得巨牛批！</p><p><img src="https://sakebow.gitee.io/images/emoji/牛批.jpg" width="400" /></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;研究生生活开始了，学术上可不能有所怠慢，尤其是作为学硕的我。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="电网" scheme="https://sakebow.gitee.io/categories/%E7%94%B5%E7%BD%91/"/>
    
    
      <category term="论文研究" scheme="https://sakebow.gitee.io/tags/%E8%AE%BA%E6%96%87%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>决策树算法</title>
    <link href="https://sakebow.gitee.io/2020/09/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <id>https://sakebow.gitee.io/2020/09/23/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95/</id>
    <published>2020-09-23T12:23:00.000Z</published>
    <updated>2020-09-29T08:38:18.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>决策树，听起来就像是有许多分支的树，也听起来像是能够帮助我们作出某种决策的方法。</strong></p><a id="more"></a><h2 id="决策树的定义"><a href="#决策树的定义" class="headerlink" title="决策树的定义"></a>决策树的定义</h2><p>既然是树，那么首先就有<strong>根</strong>，其次有<strong>树枝</strong>，然后有<strong>果实</strong>。</p><p><strong>根</strong>，就是一个对象实体；<strong>树枝</strong>则是一个对象的多种属性；<strong>果实</strong>则是<strong>基于这个对象实体、对照该对象实体的某种属性，就能够得出某种结果</strong>。</p><p>听起来非常难懂？那还是老套路，你家的猫娘又出来了。</p><p>当然，<strong>单看你家里的一只猫娘是没有什么参考性的</strong>。所以，你还是收集了20万只猫娘的很多种属性，然后对照总结。</p><p>这只猫娘的眼白有些发红，所以有可能生病了，带进诊所给医生看看；那只猫娘在检查的时候一直“啊吧啊吧”地流口水，有可能是紧张了，也有可能是口腔有些疾病，带进观察室呆一会；又有一只猫娘晚上打呼噜很大声，那么她就是单纯的打呼噜很大声，给她一只毛线球去快乐地玩耍吧……</p><p>看完这个例子，不难发现，<strong>根</strong>就是猫娘这一物种，<strong>树枝</strong>就是眼睛发红、流口水、打呼噜等等特征，<strong>果实</strong>则是由这些特征的猫娘会有什么样的症状。但是光有根、树枝和果实的树并不能够非常完美地构成猫娘这一物种，而正是这20万组猫娘的数据构成了这颗决策树的树干，丰富了猫娘这一物种，让这一物种更为饱满、更<strong>有依可寻</strong>。</p><h2 id="决策树的思想"><a href="#决策树的思想" class="headerlink" title="决策树的思想"></a>决策树的思想</h2><p>“<strong>是什么</strong>”说明白了，接下来要说“<strong>为什么</strong>”了。</p><p>决策树和分治算法、动态规划这些<strong>分而治之</strong>的思想不太一样，虽然都有剪枝，但是决策树在剪枝的基础上增加了概率。这和<strong>分而治之</strong>思想中<strong>一票否决</strong>的硬杠杆不一样，更像是遇到多个问题的时候逐个投票，然后根据人数占比的统计和可接受度的比较，最终得出了结果。</p><p>打个比方，如果使用<strong>分而治之</strong>的思想来对待你的猫娘，那么就会是这个样子：</p><p>你的猫娘在你收拾的时候瞎捣乱，</p><ul><li>你狠狠地责备了她。</li></ul><p>如果是<code>GalGame</code>的话选了这个选项估计直接就走入<code>Bad End</code>了。</p><p>而如果是决策树，就会这样：</p><p>你的猫娘在你收拾的时候瞎捣乱，</p><ul><li><p>首先碰翻了垃圾桶，由于是空桶所以就只是把桶扶起来，摸摸她的头，笑着说：“小捣蛋鬼！”</p></li><li><p>之后把桌子上的东西都打在地上了，由于掉下去的都是抽纸、不锈钢盘子、遥控器等等，没什么散落一地的东西，也没泼什么东西在地上，就把东西重新放好。她再把东西推下去，你就把拳头扬起来做出一副要打下去的样子。起初她张牙舞爪的准备迎击，看你一直没打下去放松了戒备。然后你趁机弹了一下她的脑门，她就捂着额头跑掉了。你也就有了机会继续收拾。</p></li><li><p>接着爬到你背上胡抓乱挠，由于收拾得差不多了，你把她从背上抓下来，索陪她性大玩特玩。</p></li></ul><p>有<code>Happy End</code>的感觉了！</p><p>仔细看这个例子，你会发现每次遇到事件的时候，你都会好好地根据当前一些特征现象进行选择，比如<strong>不责备和责备</strong>、<strong>陪她玩和继续收拾</strong>。</p><p>和每遇到一个条件就剪枝的<strong>分而治之</strong>算法不同，决策树最大的特点就是会根据许多不同的特征无序地按照一定的概率筛选。就像给猫娘看病一样，并不是一开始就从脑袋开始检查，也并不是最终一定要把检查脚底放在最后。</p><p>这样的话，在与猫娘相处时发生的很多事情来看，决策树往往更灵活、更温柔。当然，这也需要你对很多事情有更多的观察、参照和经历，就过程而言并不容易。</p><h2 id="决策树的目的"><a href="#决策树的目的" class="headerlink" title="决策树的目的"></a>决策树的目的</h2><p>你家的猫娘为你举了这么多例子，是不是能总结出决策树的目的了？相信聪明的你一定可以的。所以这里就给出我的理解：</p><p>决策树的目的实际上就是分类。当然也能够用于回归，只不过往往因为某些特征对应的特定结果实在太明显了，我们通过对比特征马上就能分类。</p><p>但是分类还不够，如果只是单纯的分类，用<strong>人海战术</strong>也能够实现。所以决策树在分好类的基础上进行了新的预测。也就是说，<strong>决策树能够从大量的对象实体中总结出一个特定该对象的一些特性，从而在代入新的实体的时候能够预测该实体的属性</strong>。就像你收集了大量的猫娘数据总结出了猫娘在遇到什么病情的时候会有什么样的症状的普遍规律之后，运用到你自己家的猫娘上，给她无微不至的关爱。（<em>跑题了啊こら！</em>）</p><h2 id="决策树的实现"><a href="#决策树的实现" class="headerlink" title="决策树的实现"></a>决策树的实现</h2><p>好了，接下来就是回答“<strong>怎么样</strong>”的问题的时候了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;决策树，听起来就像是有许多分支的树，也听起来像是能够帮助我们作出某种决策的方法。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>瑟瑟发抖的新生活</title>
    <link href="https://sakebow.gitee.io/2020/09/23/diary/%E7%91%9F%E7%91%9F%E5%8F%91%E6%8A%96%E7%9A%84%E6%96%B0%E7%94%9F%E6%B4%BB/"/>
    <id>https://sakebow.gitee.io/2020/09/23/diary/%E7%91%9F%E7%91%9F%E5%8F%91%E6%8A%96%E7%9A%84%E6%96%B0%E7%94%9F%E6%B4%BB/</id>
    <published>2020-09-23T06:23:00.000Z</published>
    <updated>2020-09-25T06:37:49.929Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">如果你坚持要看，请联系我。</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      记录了很多研究生期间印象非常深刻的一些事。因为涉及很多不太能随便说的事情，所以不对外开放。
    
    </summary>
    
    
      <category term="日记" scheme="https://sakebow.gitee.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="新生入学" scheme="https://sakebow.gitee.io/tags/%E6%96%B0%E7%94%9F%E5%85%A5%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Electron-vue环境搭建</title>
    <link href="https://sakebow.gitee.io/2020/09/22/JavaScript/Vue/Electron-vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://sakebow.gitee.io/2020/09/22/JavaScript/Vue/Electron-vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-09-22T10:12:00.000Z</published>
    <updated>2020-09-23T06:22:20.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>一开始<code>Vue</code>生态还尚未完善的时候，<code>Electron</code>和其他框架很难整合。现在<code>Vue</code>生态逐步完善了，整合<code>Electron</code>也方便很多了。注：本篇将默认大家都会使用<code>nodeJS</code>。</strong></p><a id="more"></a><h2 id="以前的方法"><a href="#以前的方法" class="headerlink" title="以前的方法"></a>以前的方法</h2><p>之前<code>Electron</code>只兼容了<code>Vue2.x</code>，所以只能使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init simulatedgreg/electron-vue $&#123;your-project-name&#125;</span><br></pre></td></tr></table></figure><p>虽然比较方便，但是很不幸，安装依赖的时候<strong>不管是否翻墙都无法下载</strong>。所以，只能单独使用<code>Electron</code>或者<code>Vue</code>，体验很差。</p><h2 id="新的方法"><a href="#新的方法" class="headerlink" title="新的方法"></a>新的方法</h2><p>现在<code>Electron</code>兼容了<code>Vue3.x</code>（实际上还是<code>vue2.x</code>，只是使用<code>vue-cli3</code>构建应用更方便），所以就有了全新的简便方法。</p><p>首先，我们先创建一个<code>vue3</code>项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure><p>在执行之后，<code>vue</code>就会让你选择应该如何做。</p><p><img src="https://sakebow.gitee.io/images/javascript/vue-cli.png" alt="很多很多的选项"></p><p>如果你使用的是<code>Windows</code>，那么很抱歉，你无法享受直接使用键盘选择命令行中的各种模块；如果你使用的是<code>Ubuntu</code>，但是并不熟悉这些模块分别是干什么，那就默认安装吧。这个仅用于学习的小项目不会很复杂的；如果你非常熟悉这些模块分别有什么作用，那么还需要我说么？开玩笑的啦，一般我们选择<code>Vuex</code>、<code>Router</code>、<code>Bable</code>就够了。如果你需要更严格的标准，请下载<code>ESLint</code>；如果你希望更简洁的编辑方式，那么请坚持使用<code>ES6+</code>。</p><p>另外还强调一点，由于<code>Electron</code>在开发的时候并没有强调<code>Vue</code>的版本问题，所以连官方文档都没有强调这一点。于是很坑爹的就是，现在<code>Electron</code>仅支持<code>Vue2.x</code>。</p><p><strong>这里当然还是推荐自定义</strong>。一方面，你能明白哪些东西是在干什么。就算没用过，多少查一查嘛；另外，因为<code>Electron</code>目前虽然能够作出跨平台窗口，却有着致命的弱点：<strong>目前为止没有完美的框架模板</strong>。所以<code>Electron</code>就只能完成一个普通的窗口，剩下的还是得<strong>自己造轮子</strong>。是不是一听到“造轮子”就开始头大了？生态还没有完全建立起来，还需要许许多多的开发者共同努力的呀；还有，对于想要集成<code>ElementUI</code>的开发者来说，<code>history mode</code>简直就是噩梦一般的存在。明明一点错误都没有，<strong>但就是编译不通过</strong>。非常痛苦。</p><p>言归正传，在新建之后，如果我们直接向项目中加入<code>electron-builder</code>，将会出现很多的问题。目前还没有什么好的办法能够支持这样的问题，即使是大佬遍地的<code>StackOverflow</code>也没有什么很亲民的解法。所以，这里推荐先安装<code>ElementUI</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add element</span><br></pre></td></tr></table></figure><p>实际上全名是：<code>vue-cli-plugin-element</code>，可以写全，也可以就写后一半，都没有问题。</p><p>不过别忘了，<code>3.0</code>可不只更新了库，还有用户界面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>运行之后就能够看到一个网页：</p><p><img src="https://sakebow.gitee.io/images/javascript/vue-ui.png" alt="web界面"></p><p>导入本地项目之后就可以使用非常方便的界面安装库：</p><p><img src="https://sakebow.gitee.io/images/javascript/vue-import.png" alt="导包界面"></p><p>是不是非常的厉害？但是比起<code>Ubuntu</code>的命令行，<code>ui</code>还是不太确定当前进度在哪。而在安装<code>Electron</code>的时候，大量的包需要下载，没钱买百兆光纤的我实在需要直到现在下载了多少。所以我更喜欢命令行。但是<code>ui</code>其实对于<code>Windows</code>用户还是非常亲切的。可是<code>Windows</code>后台进程实在太多了，相对于简单高效的<code>Ubuntu</code>还是差了很远。这就看各位如何取舍了。</p><p>接着，我们来测试一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>嗷，弹出了一个网页，这就是<code>Vue</code>的部分，能够成功完成一个普通的网页：</p><p><img src="https://sakebow.gitee.io/images/javascript/vue-web.png" alt="Vue网页"></p><p>看起来挺不错的，甚至还有来自<code>ElementUI</code>贴心的测试按钮<code>el-button</code>。那么剩下的就是<code>ELectron</code>了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue add electron-builder</span><br></pre></td></tr></table></figure><p>再来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><p>嗷，弹出了个窗口，这就是<code>Electron</code>的部分，能够成功完成一个跨平台的窗口。</p><p><img src="https://sakebow.gitee.io/images/javascript/vue-window.png" alt="Electron窗口"></p><p><strong>大功告成。</strong></p><p>现在看完了这篇教程会不会感觉轻松一点了？接下来的毕竟和<code>ElementUI</code>+<code>Vue</code>开发页面完全一样了嘛。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;一开始&lt;code&gt;Vue&lt;/code&gt;生态还尚未完善的时候，&lt;code&gt;Electron&lt;/code&gt;和其他框架很难整合。现在&lt;code&gt;Vue&lt;/code&gt;生态逐步完善了，整合&lt;code&gt;Electron&lt;/code&gt;也方便很多了。注：本篇将默认大家都会使用&lt;code&gt;nodeJS&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://sakebow.gitee.io/categories/JavaScript/"/>
    
    
      <category term="Vue" scheme="https://sakebow.gitee.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Swagger集成小贴士</title>
    <link href="https://sakebow.gitee.io/2020/09/19/Java/SpringBoot/Swagger%E9%9B%86%E6%88%90%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
    <id>https://sakebow.gitee.io/2020/09/19/Java/SpringBoot/Swagger%E9%9B%86%E6%88%90%E5%B0%8F%E8%B4%B4%E5%A3%AB/</id>
    <published>2020-09-19T15:35:00.000Z</published>
    <updated>2020-09-20T15:46:43.109Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>Swagger是为了能够方便对接而产生的框架。在本篇中将会默认大家都有一定的<code>Java Web</code>开发基础和<code>SpringBoot</code>框架使用经验，并在这些基础和经验之上说明一些需要注意的点。</strong></p><a id="more"></a><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>首先我们需要导入<code>Swagger</code>的依赖，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，高度集成的<code>SpringBoot</code>框架还为我们准备了程序入口，我们只需要在<code>{项目根目录}/src/main/java/{自定义包名}</code>下新建<code>java</code>文件。如果你使用的是<code>IDEA</code>，直接新建<code>config.SwaggerConfig</code>文件；如果你使用的是<code>SpringToolSuite</code>（即<code>STS</code>），那么就需要在${自定义包名}下新建包<code>config</code>，再在包下新建<code>java</code>文件，命名为<code>SwaggerConfig</code>。如果你使用的是<code>eclipse</code>，请首先集成<code>STS</code>，然后重复在<code>STS</code>上的操作。</p><p>在<code>SwaggerConfig.java</code>文件中，我们只需要在类上声明注解即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你除了添加两个注解以外什么都不需要做。如果你不是很明白为什么，建议首先将<code>SpringBoot</code>框架启动原理再看一看，预习也好，复习也罢。</p><p>启动项目，在浏览器中输入<code>http://localhost:8080/swagger-ui.html</code>，你就能够看到主页面：</p><p><img src="https://sakebow.gitee.io/images/spring-boot-web/集成SwaggerUI并运行.png" alt="Swagger界面"></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>当然，并不是所有人都是这么顺利的，有些人会报<code>404 Error</code>。</p><p>如果你集成了其他安全框架，例如<code>Spring Security</code>、<code>Shiro</code>等等具备拦截请求功能的框架，你将无法访问。这个就需要进一步的配置了，也就不是本篇单纯讨论<code>SwaggerUI</code>的文章能够说清楚的问题了。</p><p>如果你没有集成其他安全框架，那么应该就是版本的问题了。直到编辑博客的今天（<em>2020-09-19</em>）为止，<code>SwaggerUI3.0.0</code>无法使用。我们只需要将版本重新改为<code>2.9.2</code>，然后右键-&gt;<code>Maven</code>-&gt;<code>Reimport</code>就好了。</p><h2 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h2><p><code>Swagger</code>提供的注解非常全面，不仅仅能够标记所有的后端接口，还能够标记所有的实体类。所以在前后端交互的时候，前端能够在每一个细节上都能做的非常好，且在每一个细节上都能够完善。</p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Swagger是为了能够方便对接而产生的框架。在本篇中将会默认大家都有一定的&lt;code&gt;Java Web&lt;/code&gt;开发基础和&lt;code&gt;SpringBoot&lt;/code&gt;框架使用经验，并在这些基础和经验之上说明一些需要注意的点。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://sakebow.gitee.io/categories/java/"/>
    
    
      <category term="SpringBoot" scheme="https://sakebow.gitee.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>随机森林算法</title>
    <link href="https://sakebow.gitee.io/2020/09/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%AE%97%E6%B3%95/"/>
    <id>https://sakebow.gitee.io/2020/09/19/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%AE%97%E6%B3%95/</id>
    <published>2020-09-19T08:23:00.000Z</published>
    <updated>2020-10-05T14:10:12.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>随机森林算法，就像名字一样，是很多树构成的算法。可是随机又是什么？</strong></p><a id="more"></a><h2 id="随机森林的定义"><a href="#随机森林的定义" class="headerlink" title="随机森林的定义"></a>随机森林的定义</h2><blockquote><p>在机器学习中，随机森林是一个包含<strong>多个决策树</strong>的<strong>分类器</strong>， 并且其输出的类别是由个别树输出的类别的<strong>众数</strong>而定。</p><p>——摘自百度百科【<a href="https://baike.baidu.com/item/随机森林/1974765" target="_blank" rel="noopener">随机森林</a>】</p></blockquote><p>光是这句话就已经非常明确了。随机森林是一种<strong>用于分类</strong>的算法，其中包含了<strong>多个决策树</strong>。如果你暂时还不清楚什么是决策树，请<a href="/2020/09/23/人工智能/算法模型/决策树算法/">点击这里查看我以前的文章</a>。</p><p>如果再细致些呢？</p><h2 id="随机森林的思想"><a href="#随机森林的思想" class="headerlink" title="随机森林的思想"></a>随机森林的思想</h2><h2 id="随机森林的实现"><a href="#随机森林的实现" class="headerlink" title="随机森林的实现"></a>随机森林的实现</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;随机森林算法，就像名字一样，是很多树构成的算法。可是随机又是什么？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TSNE</title>
    <link href="https://sakebow.gitee.io/2020/09/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/TSNE/"/>
    <id>https://sakebow.gitee.io/2020/09/17/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/TSNE/</id>
    <published>2020-09-17T01:14:00.000Z</published>
    <updated>2020-10-05T12:59:06.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>“每个字母都认识，但是连在一起就莫名其妙起来了！”难免会有这样想的。毕竟只有首字母的话完全不知道他想说啥啊！</strong></p><a id="more"></a><h2 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h2><p>我们先来看看<a href="https://scikit-learn.org/stable/auto_examples/manifold/plot_t_sne_perplexity.html#sphx-glr-auto-examples-manifold-plot-t-sne-perplexity-py" target="_blank" rel="noopener">一个例子</a></p><p>单纯的贴出所有的代码就没意思了。所以这里我将会用注释的方式来解释这个程序到底在干什么：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Author: Narine Kokhlikyan &lt;narine@slice.com&gt;</span></span><br><span class="line"><span class="comment"># License: BSD</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(__doc__) -- 不知道什么用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导包：numpy，matplotlib，sklearn，time</span></span><br><span class="line"><span class="comment"># 如果你是ubuntu19及以上系统，请使用pip3安装依赖包，因为只内置了pip3</span></span><br><span class="line"><span class="comment"># 如果你是windows或者ubuntu19以下系统，你也可以使用pip下载依赖</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib.ticker <span class="keyword">import</span> NullFormatter</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> manifold, datasets</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定样本数量和支线数量</span></span><br><span class="line">n_samples = <span class="number">300</span></span><br><span class="line">n_components = <span class="number">2</span></span><br><span class="line"><span class="comment"># 绘制图片，图片中包含3行5列图表，每张图表宽15，长8</span></span><br><span class="line">(fig, subplots) = plt.subplots(<span class="number">3</span>, <span class="number">5</span>, figsize=(<span class="number">15</span>, <span class="number">8</span>))</span><br><span class="line"><span class="comment"># 设置不同的困惑度</span></span><br><span class="line">perplexities = [<span class="number">5</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用sklearn库的make_circles方法生成同心圆</span></span><br><span class="line"><span class="comment"># 其中规定一共n_samples个点，两个圆圈的距离比例为0.5，异常点占比5%</span></span><br><span class="line"><span class="comment"># 函数将返回两个值：X - 生成的点集; y - 点集中每个样本的分类</span></span><br><span class="line">X, y = datasets.make_circles(n_samples=n_samples, factor=<span class="number">.5</span>, noise=<span class="number">.05</span>)</span><br><span class="line"><span class="comment"># 如果y是0，记为红色</span></span><br><span class="line">red = y == <span class="number">0</span></span><br><span class="line"><span class="comment"># 如果y是1，记为绿色</span></span><br><span class="line">green = y == <span class="number">1</span></span><br><span class="line"><span class="comment"># 创建第一个子图</span></span><br><span class="line">ax = subplots[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 将生成的模型分为两类：</span></span><br><span class="line"><span class="comment"># 1 - 记录为红色并绘制，x为第一类</span></span><br><span class="line">ax.scatter(X[red, <span class="number">0</span>], X[red, <span class="number">1</span>], c=<span class="string">"r"</span>)</span><br><span class="line"><span class="comment"># 2 - 记录为绿色</span></span><br><span class="line">ax.scatter(X[green, <span class="number">0</span>], X[green, <span class="number">1</span>], c=<span class="string">"g"</span>)</span><br><span class="line"><span class="comment"># 格式化刻度，这里选择了无格式</span></span><br><span class="line">ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line">plt.axis(<span class="string">'tight'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, perplexity <span class="keyword">in</span> enumerate(perplexities):</span><br><span class="line">    ax = subplots[<span class="number">0</span>][i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    t0 = time()</span><br><span class="line">    tsne = manifold.TSNE(n_components=n_components, init=<span class="string">'random'</span>,</span><br><span class="line">                         random_state=<span class="number">0</span>, perplexity=perplexity)</span><br><span class="line">    Y = tsne.fit_transform(X)</span><br><span class="line">    t1 = time()</span><br><span class="line">    print(<span class="string">"circles, perplexity=%d in %.2g sec"</span> % (perplexity, t1 - t0))</span><br><span class="line">    ax.set_title(<span class="string">"Perplexity=%d"</span> % perplexity)</span><br><span class="line">    ax.scatter(Y[red, <span class="number">0</span>], Y[red, <span class="number">1</span>], c=<span class="string">"r"</span>)</span><br><span class="line">    ax.scatter(Y[green, <span class="number">0</span>], Y[green, <span class="number">1</span>], c=<span class="string">"g"</span>)</span><br><span class="line">    ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.axis(<span class="string">'tight'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Another example using s-curve</span></span><br><span class="line">X, color = datasets.make_s_curve(n_samples, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">ax = subplots[<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">ax.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">2</span>], c=color)</span><br><span class="line">ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, perplexity <span class="keyword">in</span> enumerate(perplexities):</span><br><span class="line">    ax = subplots[<span class="number">1</span>][i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    t0 = time()</span><br><span class="line">    tsne = manifold.TSNE(n_components=n_components, init=<span class="string">'random'</span>,</span><br><span class="line">                         random_state=<span class="number">0</span>, perplexity=perplexity)</span><br><span class="line">    Y = tsne.fit_transform(X)</span><br><span class="line">    t1 = time()</span><br><span class="line">    print(<span class="string">"S-curve, perplexity=%d in %.2g sec"</span> % (perplexity, t1 - t0))</span><br><span class="line"></span><br><span class="line">    ax.set_title(<span class="string">"Perplexity=%d"</span> % perplexity)</span><br><span class="line">    ax.scatter(Y[:, <span class="number">0</span>], Y[:, <span class="number">1</span>], c=color)</span><br><span class="line">    ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.axis(<span class="string">'tight'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another example using a 2D uniform grid</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">1</span>, int(np.sqrt(n_samples)))</span><br><span class="line">xx, yy = np.meshgrid(x, x)</span><br><span class="line">X = np.hstack([</span><br><span class="line">    xx.ravel().reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">    yy.ravel().reshape(<span class="number">-1</span>, <span class="number">1</span>),</span><br><span class="line">])</span><br><span class="line">color = xx.ravel()</span><br><span class="line">ax = subplots[<span class="number">2</span>][<span class="number">0</span>]</span><br><span class="line">ax.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=color)</span><br><span class="line">ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, perplexity <span class="keyword">in</span> enumerate(perplexities):</span><br><span class="line">    ax = subplots[<span class="number">2</span>][i + <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    t0 = time()</span><br><span class="line">    tsne = manifold.TSNE(n_components=n_components, init=<span class="string">'random'</span>,</span><br><span class="line">                         random_state=<span class="number">0</span>, perplexity=perplexity)</span><br><span class="line">    Y = tsne.fit_transform(X)</span><br><span class="line">    t1 = time()</span><br><span class="line">    print(<span class="string">"uniform grid, perplexity=%d in %.2g sec"</span> % (perplexity, t1 - t0))</span><br><span class="line"></span><br><span class="line">    ax.set_title(<span class="string">"Perplexity=%d"</span> % perplexity)</span><br><span class="line">    ax.scatter(Y[:, <span class="number">0</span>], Y[:, <span class="number">1</span>], c=color)</span><br><span class="line">    ax.xaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.yaxis.set_major_formatter(NullFormatter())</span><br><span class="line">    ax.axis(<span class="string">'tight'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>在这里面涉及了一些非常新颖的词汇：</p><h2 id="迷惑度"><a href="#迷惑度" class="headerlink" title="迷惑度"></a>迷惑度</h2><p>迷惑度，又称<code>perplexity</code>，是<code>NLP</code>算法中评价算法拟合度好坏的标准。虽然针对不同的问题，<code>perplexity</code>是越大越好还是越小越好并没有一个非常统一的答案。不过，在大多数情况下，迷惑度基本上是越小越好。</p><p>那么什么是迷惑度？我们来打个比方：</p><p>你家里的猫娘带着朋友来家里玩了。可是猫娘之间的交流就可以不说人话了，不管是肢体语言、腺体激素分泌还是尾巴的动作，都是她们交流的方式。这个时候你就非常的迷惑：“<strong>我是谁？我在哪？她们在说啥？</strong>”。突然，另一只猫娘冲着你“喵”了一声。突如其来的事情让你在风中零乱，<strong>迷惑度直接飙升到100%</strong>。</p><p>突然你家的猫娘看着你在不知所云的神情，用人话说明了她想吃饼干（<em>虽然看起来很没礼貌，但很可爱就原谅她了</em>）。<strong>你恍然大悟，迷惑度降到最低</strong>，然后像个侍奉主子的奴才一样端上了饼干。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;“每个字母都认识，但是连在一起就莫名其妙起来了！”难免会有这样想的。毕竟只有首字母的话完全不知道他想说啥啊！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>JWT简介</title>
    <link href="https://sakebow.gitee.io/2020/09/15/Java/SpringBoot/JWT%E7%AE%80%E4%BB%8B/"/>
    <id>https://sakebow.gitee.io/2020/09/15/Java/SpringBoot/JWT%E7%AE%80%E4%BB%8B/</id>
    <published>2020-09-15T15:33:00.000Z</published>
    <updated>2020-09-20T12:03:12.727Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>JWT</code>，全称<code>Json Web Token</code>，我们平常所说的<code>token</code>实际上就是说<code>JWT</code>技术中的<code>T</code>。</strong></p><a id="more"></a><h2 id="Session和Token的对比"><a href="#Session和Token的对比" class="headerlink" title="Session和Token的对比"></a><code>Session</code>和<code>Token</code>的对比</h2><p>如果你对<code>jsp</code>和<code>Servlet</code>非常熟悉，你应该对<code>Session</code>非常熟悉。每当用户登录的时候都会使用<code>Cookie</code>和<code>Session</code>联动起来，服务端使用<code>session.setAttribute()</code>方法完整地保存用户的信息，并使用<code>session.getAttribute()</code>方法完整地获取用户的信息。听起来非常方便？</p><p>可是呢，如果你读过我之前写的<a href="/2020/02/24/Java/面试常考/Session工作原理/"><code>Session</code>工作原理</a>，你会发现：<code>Session</code>对于服务器的压力还是相当大的。如果项目突然迎来了海量数据和大量并发，服务器宕机的概率大大增加，对于已经落地的项目甚至会产生不可逆转的错误。</p><p>于是，用户在线时就每时每刻维护一个<code>Session</code>的方法逐渐被摒弃；进而选择了用户每次请求的时候发送用户信息，顺便检查权限。一举两得，岂不美哉？<code>JWT</code>就应运而生了。在分布式场景中，仅在请求时服务器产生少许压力的<code>token</code>也就比始终给服务器施加压力并无法释放的<code>Session</code>更为实用。</p><h2 id="Token的结构"><a href="#Token的结构" class="headerlink" title="Token的结构"></a><code>Token</code>的结构</h2><p><code>Token</code>本质上是一串字符串，其中包含三个部分，三个部分分别是<strong>头部</strong>、<strong>负载</strong>和<strong>签名</strong>，每个部分由英文句号<code>.</code>来分开。</p><p>为什么这么做？因为这个字符串可以直接作为用户的标识，一旦被其他人截获，便能够直接作为请求使用。所以，我们往往会将这三个部分使用<code>Base64</code>算法进行编码，请求发送到服务器之后再将信息使用<code>Base64</code>算法进行解码。</p><h3 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h3><p><strong>头部</strong>主要是包含两段信息：<strong>数据类型</strong>和<strong>签名算法</strong>。</p><p><strong>数据类型</strong>一般是选择<code>JWT</code>作为数据类型，不同于一般的<code>Json</code>又不同于普通的字符串；</p><p><strong>签名算法</strong>一般是选择<code>HS256</code>，这也是官方推荐的算法。</p><h3 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h3><p>第二个部分则是<strong>负载</strong>，也作<strong>有效负载</strong>。其中包含了一些有必要的数据声明。比如，我们可以将用户<code>id</code>和用户权限码等等非常重要的信息。</p><p>但是呢，如果你发送的信息真的被截获了，还是会被很简单的解码获得了信息，所以只能在这部分只能尽可能不要放一些敏感信息，否则会被盗号。</p><p>同样的，这部分也会使用<code>Base64</code>算法编码。</p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><p><strong>签名</strong>就像是交付的时候有个安全员通过唯一指定的识别器来确认操作的用户确实是你，而不是其他的什么人。</p><p>所以签名这部分就是头部和负载的结合，再使用一个<strong>随机盐</strong>再次编码。每当用户发送请求的时候，服务器都会首先使用第一部分和第二部分使用<strong>只有服务器知道</strong>的随机盐加密，再和第三部分比对。加密后的信息和第三部分是相同的，那么就是正确的，本次识别器确认了用户信息，否则就是非法登录。</p><p>这个算法从逻辑上能够在一定程度上保证请求信息不会被其他用户非法使用。但是呢，这个算法还是不能够保证别有用心的人修改你的个人隐私。这就很无奈了。</p><h2 id="一个小例子"><a href="#一个小例子" class="headerlink" title="一个小例子"></a>一个小例子</h2><p>这个小例子虽然用到了<code>SpringBoot</code>，但是只使用了框架内的测试功能，单纯地使用命令行输出所有的结果。</p><p>由于我们并没有用到<code>SpringBoot</code>自带的测试类，所以就只是单纯地在<code>{项目根目录}/src/main/test/{自定义包名}</code>下新建<code>JWTTest.java</code>，并直接使用<code>JWT</code>工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJWT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// set expire time</span></span><br><span class="line">  Calendar calendar = Calendar.getInstance();</span><br><span class="line">  calendar.add(Calendar.SECOND, <span class="number">90</span>);</span><br><span class="line">  <span class="comment">// create jwt</span></span><br><span class="line">  HashMap&lt;String, Object&gt; headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  headers.put(<span class="string">"type"</span>, <span class="string">"JSON"</span>);</span><br><span class="line">  String token = JWT.create()</span><br><span class="line">                    .withHeader(headers)</span><br><span class="line">                    .withClaim(<span class="string">"user"</span>, <span class="string">"sakebow"</span>)</span><br><span class="line">                    .withClaim(<span class="string">"id"</span>, <span class="string">"20202104126"</span>)</span><br><span class="line">                    .withExpiresAt(calendar.getTime())</span><br><span class="line">                    .sign(Algorithm.HMAC256(<span class="string">"~@#sakebow?!~"</span>));</span><br><span class="line">  System.out.println(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码运行之后就会生成一长串代码：</p><p><code>eyJ0eXAiOiJKV1QiLCJ0eXBlIjoiSlNPTiIsImFsZyI6IkhTMjU2In0.eyJpZCI6IjIwMjAyMTA0MTI2IiwiZXhwIjoxNjAwNjAwNjM1LCJ1c2VyIjoic2FrZWJvdyJ9.xigradwatkwZYO1QZJ98_sa6qH9L-_8uYyi5_HUSRjE</code></p><p>看起来毫无章法？不过没有关系，我们还能解码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDecodeJWT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String token =  <span class="string">"eyJ0eXAiOiJKV1QiLCJ0eXBlIjoiSlNPTiIsImFsZyI6IkhTMjU2In0.eyJpZCI6IjIwMjAyMTA0MTI2IiwiZXhwIjoxNjAwNjAwNjM1LCJ1c2VyIjoic2FrZWJvdyJ9.xigradwatkwZYO1QZJ98_sa6qH9L-_8uYyi5_HUSRjE"</span>;</span><br><span class="line">  JWTVerifier jwtVerifier = JWT</span><br><span class="line">          .require(Algorithm.HMAC256(<span class="string">"~@#sakebow?!~"</span>))</span><br><span class="line">          .build();</span><br><span class="line">  DecodedJWT decodedJWT = jwtVerifier.verify(token);</span><br><span class="line">  System.out.println(decodedJWT.getHeader() + <span class="string">", "</span> + decodedJWT.getPayload());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JWTVerifier</code>除了解码以外，还会核对前面两个部分合在一起加密是否与最后一段相等。同时，<code>JWT</code>还会经常变化，这也正为<code>JWT</code>提供了一定的安全性。</p><h2 id="随机盐"><a href="#随机盐" class="headerlink" title="随机盐"></a>随机盐</h2><p>不知道你们注意到没有，在<code>JWT</code>加密中有一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sign(Algorithm.HMAC256(<span class="string">"~@#sakebow?!~"</span>));</span><br></pre></td></tr></table></figure><p>实际上这个<code>~@#sakebow?!~</code>就是我们自己规定的<strong>随机盐</strong>，也就是根据这个片段对我们发送的数据进行加密。因为这个片段基本上只有开发着自己知道，所以安全性还是可以保证的。但是，安全性可不仅限于用户自己使用。</p><p>如果说其他别有用心的用户拿到了这个数据，伪造了其他人的信息，发送了非法请求，到了服务器结果就会被当成已经授权的人，然后回应请求。这将会让整个程序会变得非常危险。所以，这段随机盐<strong>决不可以保存在客户端</strong>。</p><p>是不是有点能理解了呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;JWT&lt;/code&gt;，全称&lt;code&gt;Json Web Token&lt;/code&gt;，我们平常所说的&lt;code&gt;token&lt;/code&gt;实际上就是说&lt;code&gt;JWT&lt;/code&gt;技术中的&lt;code&gt;T&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://sakebow.gitee.io/categories/java/"/>
    
    
      <category term="SpringBoot" scheme="https://sakebow.gitee.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法</title>
    <link href="https://sakebow.gitee.io/2020/09/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    <id>https://sakebow.gitee.io/2020/09/15/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/</id>
    <published>2020-09-15T09:01:00.000Z</published>
    <updated>2020-10-03T11:07:02.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>机器学习中有非常多的算法，遗传算法就是其中之一。正因为有所特点，所以才被人们广为使用。</strong></p><a id="more"></a><h2 id="遗传算法的定义"><a href="#遗传算法的定义" class="headerlink" title="遗传算法的定义"></a>遗传算法的定义</h2><p>为什么偏偏把这个算法叫做“<strong>遗传</strong>”算法？那是因为这个算法是一种<strong>进化算法</strong>，基本原理是效仿生物界中“<strong>物竞天择，适者生存</strong>”的演化法则。具体来说就是这个样子：</p><ul><li>在算法开始之前，所有的数据就作为一个<strong>生态圈</strong>出现在了我们的面前。</li><li>生态圈中的任何一个个体都遵循一样的规律：<strong>有血</strong>、<strong>有肉</strong>、<strong>要呼吸</strong>；也就是说这个数据集中需要按照一定的结构表示成基本相似的数据类型。</li><li>等到所有的生物都就位了之后（<em>数据集准备好了之后</em>），生态圈残酷的斗争和竞争就开始了。类比到数据集的筛选就是针对每个数据使用同一个适应度来评估数据的优劣。同样的，在这里优胜劣汰</li><li>适应度并不是千篇一律的，而是针对每一个不同的问题有完全不同的解决方案。</li></ul><p>算法思想又是如何呢？</p><ul><li><strong>选择</strong>：选择是为了能够选出优秀的个体，并使用这些个体产生后代</li><li><strong>交叉</strong>：如果是生物学，这里应该就是称为<strong>交配</strong>了。当然，这里是人为地选择一些个体进行信息交换，而不是任由这些数字胡乱交换</li><li><strong>变异</strong>：如果是生物学，这里应该就是对应<strong>基因突变</strong>了。当然，这里是人为地选择一些个体，按照一定的概率强行修改数据集中的某一个数据。</li></ul><h2 id="遗传算法的特点"><a href="#遗传算法的特点" class="headerlink" title="遗传算法的特点"></a>遗传算法的特点</h2><p>遗传算法之所以成为遗传算法，肯定是和生物学的“遗传”这个概念有很多是重合的。</p><ul><li>正因为遗传发生在单个个体上，所以算法能够独立地为每一个样本进行计算和筛选，并行性非常优秀；</li><li>因为遗传是所有生物通用的，所以算法也能够涵盖绝大多数的问题；</li><li>因为遗传能够通过自然选择使得一个物种在多个物种之间脱颖而出，所以具有非常优秀的全局优化性能；</li><li>因为有时我们可以通过人工配种的方式使得某一个基因比较突出，所以遗传算法也有着非常高的可操作性；</li></ul><p>当然，有优点就肯定有缺点。</p><ul><li>因为基因变异的概率极低，所以收敛速度也相当慢；</li><li>因为基因变异是完全随机的，能够产生适应环境的个体，也能够产生不适应环境的个体。所以在收敛结果上也不是一直很完美；</li></ul><p>但是，也正因为这些可靠的优点和突出的缺点，在一些领域上也是备受瞩目的，如：函数优化、<code>TSP</code>优化、生产调度、智能控制、模式识别等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;机器学习中有非常多的算法，遗传算法就是其中之一。正因为有所特点，所以才被人们广为使用。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>python进阶训练：聊天室</title>
    <link href="https://sakebow.gitee.io/2020/08/20/python/python%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%EF%BC%9A%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <id>https://sakebow.gitee.io/2020/08/20/python/python%E8%BF%9B%E9%98%B6%E8%AE%AD%E7%BB%83%EF%BC%9A%E8%81%8A%E5%A4%A9%E5%AE%A4/</id>
    <published>2020-08-19T16:01:00.000Z</published>
    <updated>2020-09-01T14:54:46.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>既然我们完成了基本的链表功能，相信也对<code>Python</code>语言有了一定的了解。那么我们现在开始进阶：<code>Python</code>聊天室（命令行版）。</strong></p><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>使用<code>UDP</code>代码库，使得两个进程之间得以通信。接收的时候直接输出到终端；发送的时候直接发送到指定端口，并使用死循环监听信息。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义全局变量udp</span></span><br><span class="line">udp = socket(AF_INET, SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span><span class="params">(send_data, target_ip)</span>:</span></span><br><span class="line">  udp.sendto(send_data.encode(encoding = <span class="string">'utf-8'</span>), target_ip)</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_data</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="comment"># 拿到传输数据和源地址</span></span><br><span class="line">  socket_data, addr = udp.recvfrom(<span class="number">1024</span>)</span><br><span class="line">  <span class="comment"># 当前时间</span></span><br><span class="line">  current_time = time.strftime(<span class="string">'%Y-%m-%d %X'</span>, time.localtime(time.time()))</span><br><span class="line">  print(<span class="string">'================================================='</span>)</span><br><span class="line">  <span class="comment"># 输出到终端</span></span><br><span class="line">  print(<span class="string">f'now: <span class="subst">&#123;current_time&#125;</span>, IP: <span class="subst">&#123;addr[<span class="number">0</span>]&#125;</span>:<span class="subst">&#123;addr[<span class="number">1</span>]&#125;</span>\ncontent: <span class="subst">&#123;socket_data.decode(encoding = <span class="string">"utf-8"</span>)&#125;</span>'</span>)</span><br><span class="line">  print(<span class="string">'================================================='</span>)</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>最后，我们在主函数中使用死循环监听这两个函数就好了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  <span class="comment"># 客户端1用8998端口</span></span><br><span class="line">  addr_bind = (<span class="string">''</span>, <span class="number">8998</span>)</span><br><span class="line">  udp.bind(addr_bind)</span><br><span class="line">  <span class="comment"># 客户端2用8999端口 / 本机IP192.168.1.111</span></span><br><span class="line">  target_ip = (<span class="string">'192.168.1.111'</span>, <span class="number">8999</span>)</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    send_text = input(<span class="string">'say something: '</span>)</span><br><span class="line">    <span class="keyword">if</span> send_text == <span class="string">'bye'</span>:</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 客户端1 - 先发送再接收</span></span><br><span class="line">    <span class="comment"># 客户端2 - 先接收再发送</span></span><br><span class="line">    send_data(send_text, target_ip)</span><br><span class="line">    recv_data()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>到这里，简单的聊天室就完成了。</p><h2 id="结束？"><a href="#结束？" class="headerlink" title="结束？"></a>结束？</h2><p>你以为这样就能交作业了吗？<strong>还早着呢</strong>。这样只能实现两个端的交流，而且还只能限定从客户端1开始，从客户端2结束。作为多对多的<code>UDP</code>觉得自己非常吃亏，而且没有<code>GUI</code>的项目就不是一个好项目。</p><p>所以，在这里划一条线，我们将认真开始。</p><hr><h2 id="进阶1-添加服务器"><a href="#进阶1-添加服务器" class="headerlink" title="进阶1 - 添加服务器"></a>进阶1 - 添加服务器</h2><p><strong>前排提示</strong>：所有的文件都将放到<a href="https://github.com/sakebow/python-chat" target="_blank" rel="noopener"><code>GitHub</code></a>上，不会在这里花很多篇幅展示。所以希望学习的同学们可以两边结合起来看。</p><h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a><strong>综述</strong></h3><p>就拿我们最常用的<strong>QQ</strong>和<strong>微信</strong>来说，都是由腾讯提供服务器，我们交流的时候首先提交到服务器上，然后再由服务器回显到各个客户端中。</p><p>所以，我们的首要目标就是<strong>建立服务器</strong>并让客户端和服务器能够<strong>正常连接</strong>。</p><p>首先我们需要明确服务器的功能。每次有数据提交到服务器的时候，服务器其实没有<strong>长期保留</strong>这个数据的必要，只不过是拿到了数据，并<strong>转发</strong>给所有的客户端而已。所以，实际上服务器只是需要做到<strong>接收</strong>和<strong>发送</strong>两个功能就足够了。</p><p>于是，这个项目的架构就差不多定下来了：</p><p>/ 根目录</p><p>┣ <code>config.py</code> 项目配置文件</p><p>┣ <code>ssocket.py</code> 基础socket实现类</p><p>┣ <code>server.py</code> 服务器实例类和功能实现</p><p>┣ <code>wrapper.py</code> 数据帧封装类</p><p>┗ <code>test.py</code> 输出测试类</p><p>看起来没什么毛病。就算有毛病估计你现在也是一脸蒙。接下来我将详细展开每个文件是干什么。</p><p>那么我们就开始准备了。既然是服务器的实现，那么就需要完善基本的网络通信，即<code>socket</code>库的具体业务实现。</p><h3 id="步骤一：确定基本配置项和底层实现方法"><a href="#步骤一：确定基本配置项和底层实现方法" class="headerlink" title="步骤一：确定基本配置项和底层实现方法"></a><strong>步骤一：确定基本配置项和底层实现方法</strong></h3><p><code>Python</code>的<code>socket</code>库和<code>C</code>语言的<code>socket</code>库有着异曲同工之妙，如果是使用<code>Ubuntu</code>系统编程的话应该能够很明显地感觉到这两者几乎很多都是相同的，只不过是再封装而已。发送就是<code>send()</code>，接收就是<code>recv()</code>。即：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">soc = socket()</span><br><span class="line"><span class="comment"># 发送 / 开辟大小为1024B的缓冲区，并对发送的Python对象使用*utf-8*编码为二进制数据</span></span><br><span class="line">soc.send(<span class="number">1024</span>).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="comment"># 接收 / 开辟大小为1024B的缓冲区，并对接收的二进制数据使用*utf-8*解码为Python对象</span></span><br><span class="line">soc.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8)</span></span><br></pre></td></tr></table></figure><p>看起来没什么问题。但是如果就这么写进项目中，每次收发都这么写绝对很累赘，大量重复的<code>utf-8</code>和<code>1024</code>，如果有一天需要修改的话将会是一场恶梦。</p><p><strong>所以新建<code>config.py</code>记录配置。</strong></p><p>这里需要说明的是，如果是这么定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是作为配置项很不*方便*的写法，仅供参考，请勿模仿</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SOCKET_CONFIG</span><span class="params">(object)</span>:</span></span><br><span class="line">  SOCKET_MAX_CACHE = <span class="number">1232896</span> <span class="comment"># 2的20次方</span></span><br><span class="line">  SOCKET_CHARSET_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样的话你的<code>SOCKET_MAX_CACHE</code>和<code>SOCKET_CHARSET_ENCODING</code>都被<code>Python</code>记为私有变量，不可访问。需要画很多时间构建<code>getter</code>和<code>setter</code>。虽然可以使用<code>@property</code>简化，但是需要我们手动编辑，而且我在<code>Ubuntu2004</code>中使用<code>VScode</code>直接编译不通过，他有自己的想法。所以我放弃了<code>@property</code>并选择了使用<strong>枚举类型</strong>简化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SOCKET_CONFIG</span><span class="params">(Enum)</span>:</span> <span class="comment"># 继承Enum枚举类，属性直接用</span></span><br><span class="line">  SOCKET_MAX_CACHE = <span class="number">1232896</span></span><br><span class="line">  SOCKET_CHARSET_ENCODING = <span class="string">'utf-8'</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这样的话我们在任何地方就可以直接使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> * <span class="comment"># 这么引入的前提是当前文件和config.py是同级</span></span><br><span class="line">a = SOCKET_CONFIG.SOCKET_MAX_CAHCE.value </span><br><span class="line"><span class="comment"># 枚举类直接用&#123;名称.value&#125;，直接使用名称得不到值</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/sakebow/python-chat/blob/master/config.py" target="_blank" rel="noopener">点击这里查看config.py文件具体内容</a></p><p>当然，你也可以选择使用<code>yaml</code>、<code>properties</code>、<code>csv</code>、<code>json</code>和<code>xml</code>文件记录配置，这就看你愿意怎么使用了。如果想省事，直接用<code>py</code>吧；如果是想探索知识、需要构建大型项目或者说已经有一整套配置文件读取的代码库，建议使用单独的配置文件。</p><h3 id="步骤2：封装底层方法"><a href="#步骤2：封装底层方法" class="headerlink" title="步骤2：封装底层方法"></a><strong>步骤2：封装底层方法</strong></h3><p>使用<code>socket</code>创建专门针对某一个特定点的服务的时候，我们更倾向于使用端对端的<code>TCP/IP</code>协议，简单的说就是<strong>针对特定IP的特定端口号发送数据</strong>。根据这个定义我们就知道，需要我们确定<code>IP</code>和<code>端口号</code>，也就是在收发数据之前绑定<code>IP</code>和<code>端口号</code>。但是每一次都绑定肯定会显得累赘。</p><p><strong>所以我们创建<code>ssocket.py</code>封装<code>socket</code>用以绑定基本信息</strong></p><p>其中创建了继承自<code>socket.socket</code>的<code>ServerSocket</code>类，使用<code>AF_INET</code>协议（<code>TCP/IP</code>协议簇中的<code>IPv4</code>协议）和<code>SOCK_STREAM</code>（<code>TCP</code>流，即使用可靠的、端对端的连接进行通信；与之对应的是<code>SOCK_DGRAM</code>，是<code>UDP</code>流，不可靠的、多对多的连接进行通信）。</p><p>接着，我们使用<code>socket.bind()</code>方法传入<code>IP</code>信息和<code>端口号</code>。是以<strong>元组</strong>的形式传入的，即：<code>socket.bind((&#39;127.0.0.1&#39;, 8080))</code>。</p><p>最后，打开监听：<code>socket.listen(128)</code>。</p><p><a href="">点击这里查看ssocket.py文件具体内容</a></p><p>有了这个准备好的<code>ServerSocket</code>，我们就能开始准备<code>Server</code>实体类了。</p><p>在这里插入一个小技巧：</p><p><em><code>Server</code>类其实没有必要继承<code>ServerSocket</code>类，因为可以在<code>Server</code>类中使用<code>ServerSocket</code>对象；当然也可以继承，因为两者在本质上就是对<code>socket</code>进行操作，<code>Server</code>完全可以继承<code>ServerSocket</code>的操作，并在类内对<code>ServerSocket</code>进行拓展。</em></p><p>由于一个小项目，所以就不弄那么复杂了。直接使用实例化对象。</p><p><strong>所以接下来新建<code>server.py</code>，编辑<code>Server</code>类</strong></p><h3 id="步骤三：如何启动服务器"><a href="#步骤三：如何启动服务器" class="headerlink" title="步骤三：如何启动服务器"></a><strong>步骤三：如何启动服务器</strong></h3><p>定义了类之后，我们就需要开始定义具体的服务了。用过<code>Tomcat</code>的应该都知道，我们在配环境的时候会使用<code>startup</code>语句，所以我们这里也定义一个启动服务的<code>start</code>方法。</p><p>具体我们需要做什么呢？因为我们的监听已经开启了，所以我们需要做的就是等待客户端的连接，即使用<code>socket.accept()</code>方法获得两个返回值，一个是从客户端发送过来的数据帧，另一个则是数据源，也就是<strong>IP地址</strong>和<strong>端口号</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">soc, addr = socket.accept()</span><br><span class="line"><span class="comment"># soc是包含了此次传输的内容二进制编码等很多种数据的套接字</span></span><br><span class="line"><span class="comment"># addr则是数据源，是个元组，addr[0]是IP，addr[1]是端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到套接字我们可以顺势接收发送的数据，也能返回对套接字的响应</span></span><br><span class="line">print(soc.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)) <span class="comment"># 打印是为了查看是否正常</span></span><br><span class="line">soc.send(<span class="string">"hello world!"</span>.encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><p>当然，还是一样的问题：每次都这么做要重复太多的<code>utf-8</code>和<code>1024</code>，所以封装起来。</p><p><strong>所以我们新建<code>wrapper.py</code>封装客户端套接字</strong></p><p>由于我们之前已经将缓冲区大小、默认编码封装在了<code>config.py</code>里面，所以直接拿来使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recv_data</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> socket.recv(SOCKET_CONFIG.SOCKET_MAX_CACHE.value).decode(SOCKET_CONFIG.SOCKET_CHARSET_ENCODING.value)</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_data</span><span class="params">(self, message)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> socket.send(message.encode(SOCKET_CONFIG.SOCKET_CHARSET_ENCODING.value))</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>为了保证使用之后还能够关闭<code>socket</code>以释放资源，最后再加上一个关闭的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.close()</span><br></pre></td></tr></table></figure><p><a href="https://github.com/sakebow/python-chat/blob/master/wrapper.py" target="_blank" rel="noopener">点击这里查看wrapper.py文件内容</a></p><p>有了<code>wrapper</code>封装之后，我们就直接在<code>Server</code>类中使用<code>wrapper.py</code>定义的实例化对象，这里我定义的是<code>SocketWrapper</code>类，所以<code>Server</code>类在使用<code>accept</code>方法获得套接字后这么使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soc, addr = socket.accept()</span><br><span class="line">client_soc = SocketWrapper(soc)</span><br></pre></td></tr></table></figure><p>针对单个客户端的单次接入，我们直接使用我们封装好的<code>client_soc</code>就好了。因为是服务器，所以是先<strong>接收</strong>来自客户端的信息，再发送回显给客户端。最后，使用<code>wrapper,py</code>中封装好的<code>close</code>方法关闭连接释放资源。</p><p>具体来说就是这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 严重警告：此处的完整代码仅展示用，有缺陷，请勿模仿</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="comment"># 获得数据和数据源</span></span><br><span class="line">  soc, addr = self.server_socket.accept()</span><br><span class="line">  <span class="comment"># 绑定封装好的IP和端口，并开启监听</span></span><br><span class="line">  client_soc = SocketWrapper(soc)</span><br><span class="line">  <span class="comment"># 输出查看数据是否正确</span></span><br><span class="line">  print(client_soc.recv_data())</span><br><span class="line">  <span class="comment"># 回显客户端</span></span><br><span class="line">  client_soc.send_data(<span class="string">'connection established!'</span>)</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>看起来没有问题，但是这样子一个客户端发完一条信息之后，整个服务进程都结束了，再也不能接收客户端传来的消息，除非重启服务器。每条信息都要重启服务器的话也实在是太反人类了。所以我们需要服务器一直在线，那么就加上一个死循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 严重警告：此处的完整代码仅展示用，有缺陷，请勿模仿</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="comment"># 获得数据和数据源</span></span><br><span class="line">  soc, addr = self.server_socket.accept()</span><br><span class="line">  <span class="comment"># 绑定封装好的IP和端口，并开启监听</span></span><br><span class="line">  client_soc = SocketWrapper(soc)</span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 输出查看数据是否正确</span></span><br><span class="line">    print(client_soc.recv_data())</span><br><span class="line">    <span class="comment"># 回显客户端</span></span><br><span class="line">    client_soc.send_data(<span class="string">'connection established!'</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>好了，客户端能够一直发信息了。</p><p>但是，这依然不够。这可是聊天室，客户端连接到服务器之后直接使用主进程的死循环收发信息，这样必然导致其他的<strong>任何客户端都不能和服务器交互</strong>，相当于莫名其妙的全员禁言了。这可要不得。</p><p>如果是以前用过<code>SpringBoot</code>开发<code>Web</code>的话，应该非常熟悉<code>@Asyn</code>这个注解，也就是使用子进程实现来自<code>Controller</code>的请求、调用<code>Service</code>的方法、操作<code>Dao</code>的接口等等。为何不借鉴一下这种思想呢？</p><p>所有的客户端一旦接入服务器便立马开启新的子进程，让所有的交互在子进程中完成。这样的话，主进程就可以完完全全地监听信息的接入，就像是<strong>前台接待</strong>一样，全权负责将到店的客户送到指定的房间（<em>子进程</em>）中。这就完成了<code>Server</code>的最终版。</p><p><a href="https://github.com/sakebow/python-chat/blob/master/server.py" target="_blank" rel="noopener">点击这里查看server.py文件具体内容</a></p><p>最后，我们来测试一下结果如何。</p><p><strong>这里就新建<code>test.py</code>来模拟客户端发送<code>socket</code>到服务器</strong></p><p><a href="https://github.com/sakebow/python-chat/blob/master/test.py" target="_blank" rel="noopener">点击这里查看<code>test.py</code>文件内容</a></p><p>到这里，这个聊天室就能够支持多个客户端收发信息、服务器处理多个请求了。但是他依然存在一个问题：<strong>不能显示其他人发送的信息</strong>。</p><p>而给其他人发送信息则又必须使用<code>socket</code>给其他<code>IP</code>发送消息。可是服务器一次只能处理一个请求，这就导致<strong>每次处理的时候只能弄到一个<code>IP</code>地址</strong>。虽然你可以写在文件里，但是这就把一个小项目写复杂了，也因为增加了硬盘的<code>IO</code>而大大降低了速度。所以，为了能够将速度发挥到极致，我这里使用<strong>单线程多路复用</strong>的<code>redis</code>来保存<strong>注册的用户信息</strong>和<strong>登录的用户信息</strong>。你可能会想这不是一样的么？<strong>实际上不一样</strong>。因为登录信息是需要写在当前在线人数表中的，同时服务器也只能给当前在线的人发送信息，否则给不在线的用户发送信息时会因为连接未建立<strong>给每个人抛了个错</strong>，结果所有在线的人一脸蒙逼地给不在线的人背锅。这明显不合理。</p><p>当然，还有一个优点就是<code>redis</code>还能当非关系型数据库使用，可以用于聊天记录的保存。这就是后话了。</p><p>那么问题来了，既然需要<code>redis</code>就需要服务器跑起来。所以这里就使用<code>Docker</code>运行一个简单的<code>redis</code>服务器。</p><p>首先准备<code>docker-compose.yml</code>文件，用于<code>docker</code>镜像的构建：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis-30xx:</span> <span class="comment"># 因为端口号不好记，所以记录端口号前两位到三位</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'redis:latest'</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">'redis-30xx'</span> <span class="comment"># 方便以后避开这些端口号，名字也改改</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'3079:6379'</span> <span class="comment"># 使用30xx端口映射默认的6379</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/config:/conf</span> <span class="comment"># 配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/redis/data:/data</span> <span class="comment"># 数据文件</span></span><br></pre></td></tr></table></figure><p>然后在你的<code>Ubuntu</code>系统下使用超管权限运行<code>docker-compose up -d</code>，这样你的<code>redis</code>就启动起来了。</p><p>这里由于需要操作两个用户组，所以使用<code>redis</code>的集合和<code>python</code>的集合相对应，都是<code>sadd</code>方法用于添加用户，应用在登录和注册上；而<code>srem</code>用于移除用户，应用在用户注销上。</p><h2 id="进阶2-GUI"><a href="#进阶2-GUI" class="headerlink" title="进阶2 - GUI"></a>进阶2 - <code>GUI</code></h2><p>这里就直接使用<code>PyQT</code>作为<code>GUI</code>的搭建。虽然有<code>Qt Creator</code>用来简便绘制用户界面，但是底层却是<code>C++</code>。为了保证这个教程不掺杂一点与<code>Python</code>无关的东西，并为了能够让<code>Python</code>体现出网络编程中标准库的便捷性，这里直接使用一整套<code>Python</code>解决方案。</p><p>既然我们用的最熟悉的是QQ和微信，那么我们就干脆模仿微信的界面。当然，因为技术原因不能很好的模仿，所以就干脆就作出一点点小小的改变。不会很离谱，但也相当乱来。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;既然我们完成了基本的链表功能，相信也对&lt;code&gt;Python&lt;/code&gt;语言有了一定的了解。那么我们现在开始进阶：&lt;code&gt;Python&lt;/code&gt;聊天室（命令行版）。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程进阶综合测验" scheme="https://sakebow.gitee.io/categories/%E7%BC%96%E7%A8%8B%E8%BF%9B%E9%98%B6%E7%BB%BC%E5%90%88%E6%B5%8B%E9%AA%8C/"/>
    
    
      <category term="Python" scheme="https://sakebow.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基础综合：链表</title>
    <link href="https://sakebow.gitee.io/2020/08/17/python/python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <id>https://sakebow.gitee.io/2020/08/17/python/python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%EF%BC%9A%E9%93%BE%E8%A1%A8/</id>
    <published>2020-08-17T14:00:00.000Z</published>
    <updated>2020-08-27T07:22:44.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>因为研究生生涯开始了，所以需要暂时停掉<code>Java</code>的学习，开始使用<code>Python</code>的学习和实践了。于是花了一个小时从完全没学过到实现了最基础的单链表。这里就记录一下。</strong></p><a id="more"></a><h2 id="链表结构复习"><a href="#链表结构复习" class="headerlink" title="链表结构复习"></a>链表结构复习</h2><p>首先我们回顾链表由什么构成。在<code>C</code>语言中，对链表的定义就是：</p><blockquote><p>链表是一种动态数据结构。它主要是利用动态内存分配、使用结构体并配合之镇来实现的一种数据结构。</p><p>——摘自《C语言程序设计（第三版）》苏小红、王宇颖、孙志岗等编著</p></blockquote><p>也就是说，链表有以下几个特点：</p><ul><li><p>是类似数组的链式结构</p></li><li><p>内存分配并不像数组一样完全连续</p></li><li><p>每个节点使用结构体，每个节点也就有了更高的自由度和更大的存储量</p></li><li><p>下一个节点的位置保存在上一个节点中</p></li></ul><h2 id="Python对比预习"><a href="#Python对比预习" class="headerlink" title="Python对比预习"></a><code>Python</code>对比预习</h2><p>复习了链表之后，让我们再看看<code>Python</code>语言相对于<code>C</code>语言和<code>Java</code>有什么不同：</p><ul><li><p>不需要显式声明<code>private</code>、<code>protected</code>和<code>public</code></p></li><li><p>对象名直接对应对象的地址，这一点和<code>Java</code>非常相似</p></li><li><p>没有括号限制函数体，直接用缩进表示</p></li><li><p><code>None</code>对应<code>C</code>语言和<code>Java</code>的<code>null</code></p></li><li><p><code>self</code>代替了<code>C</code>语言和<code>Java</code>的<code>this</code>指针</p></li><li><p>魔法函数<code>__init__</code>直接定义了结构体的属性构成，而不需要显式定义结构体具体有哪些属性</p></li></ul><p>主要就是这些了。具体的细节我们遇到了再去查<a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener"><strong>菜鸟教程</strong></a>就好了。当然，如果能够直接查<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener"><code>Python</code></a>官方文档更好，毕竟都贴心地给出了中文版（但是点进去每个函数的解释还是<strong>英文</strong>，而且没有实例）。</p><h2 id="从节点的定义开始编码"><a href="#从节点的定义开始编码" class="headerlink" title="从节点的定义开始编码"></a>从节点的定义开始编码</h2><p>那么，为了先熟悉<code>Python</code>的语法，我们先来个小小的结构体试试水：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, next, index)</span>:</span></span><br><span class="line">    self.data = data</span><br><span class="line">    self.next = next</span><br><span class="line">    self.index = index</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试节点</span></span><br><span class="line">node = Node(<span class="number">0</span>, <span class="literal">None</span>, <span class="number">0</span>)</span><br><span class="line">print(node.data)</span><br></pre></td></tr></table></figure><p>当然，没有悬念，输出<code>0</code>。</p><p>第一行首先是确认字符编码。默认是<code>UTF-8</code>，根据需要可以更换成别的；其次是使用<code>__init__</code>函数定义一个具有三个属性的类作为结构体；最后的pass则是占位符，表示一个域的结束，相当于<code>}</code>。因为<code>Python</code>直接使用缩进表示是否结束，所以这个仅仅作为个人习惯出现在这里。</p><h2 id="从链表的功能开始完善"><a href="#从链表的功能开始完善" class="headerlink" title="从链表的功能开始完善"></a>从链表的功能开始完善</h2><p>既然我们完成了节点的构造，那么我们一口气把整个链表攻下来吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">  <span class="comment"># 初始化 / 不需要参数，自带空的头节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = <span class="literal">None</span></span><br><span class="line">    self.length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 尾插法插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_tail</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    <span class="comment"># 当尾节点为空时，使用头插法确定尾节点</span></span><br><span class="line">    <span class="keyword">if</span> self.tail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      self.insert_head(index, data)</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 在尾节点非空时往后接节点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node = Node(data, <span class="literal">None</span>, index)</span><br><span class="line">      self.tail.next = node</span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 头插法插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_head</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    node = Node(data, self.head, index)</span><br><span class="line">    self.head = node</span><br><span class="line">    self.length += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 当只有一个元素的时候，确定尾节点</span></span><br><span class="line">    <span class="keyword">if</span> self.length == <span class="number">1</span>:</span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 输出链表 / 从头开始顺序输出</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">    node = self.head</span><br><span class="line">    <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      print(<span class="string">f'<span class="subst">&#123;node.index&#125;</span>: <span class="subst">&#123;node.data&#125;</span>'</span>, end = <span class="string">' '</span>)</span><br><span class="line">      node = node.next</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    print()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">link = Link()</span><br><span class="line">link.insert_head(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">link.insert_tail(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">link.output()</span><br></pre></td></tr></table></figure><p>在这里的<code>self</code>关键字在<strong>函数体内</strong>就是<strong>作为<code>this</code>指针</strong>使用，而作为<strong>参数</strong>出现的时候就是声明该函数是一个<strong>成员函数</strong>。后面有一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'<span class="subst">&#123;node.index&#125;</span>: <span class="subst">&#123;node.data&#125;</span>'</span>, end = <span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p>这是<code>Python</code>3.6以后的新特性，使用<code>f</code>直接将字符串格式化，另外使用<code>end</code>规定输出结尾是空格而不是默认的换行结尾。</p><p>于是，这次的输出就是：<code>1:2 3:4</code>。</p><h2 id="全自动构造链表"><a href="#全自动构造链表" class="headerlink" title="全自动构造链表"></a>全自动构造链表</h2><p>但是这还差一个输入。不想一个字一个字输入的我直接定义了一个随机生成的函数，让链表自己随便生成什么东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件开头加上：</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">LETTERS = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">LETTERS_LEN = len(LETTERS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Link类中添加成员函数</span></span><br><span class="line"><span class="comment"># 随机生成链表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_link</span><span class="params">(self)</span>:</span></span><br><span class="line">  size = random.randint(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size):</span><br><span class="line">    self.insert_tail(i + <span class="number">1</span>, LETTERS[random.randint(<span class="number">0</span>, LETTERS_LEN - <span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全自动生成</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.random_link()</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>于是每次编译输出都有完全不一样的结果。</p><p>好了，到这里构造链表就没有什么大问题了。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>接下来就是很恼人的删除节点了。和<code>C++</code>一样，可以直接使用<code>del</code>命令显式删除对象。值得一提的是，这里显式删除之后只是将内存标记为“<strong>可使用</strong>”，该部分内存并没有被回收。之后<code>GC</code>会过来打扫的。</p><p>为了能够保持数组每次都是一致的，方便查看位置，这里添加了文件读取，能够在每次运行的时候从<code>linklist.csv</code>中读取一模一样的数据。</p><p>数据文件<code>linklist.csv</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">3</span><br><span class="line">1000</span><br><span class="line">7</span><br><span class="line">p</span><br><span class="line">q</span><br><span class="line">h</span><br><span class="line">@</span><br><span class="line">!</span><br><span class="line">,</span><br><span class="line">&gt;</span><br><span class="line">shift</span><br></pre></td></tr></table></figure><p>然后是读取文件并删掉<code>readline</code>方法读取时最后的字符<code>\n</code>误读的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取固定的链表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(self, filepath)</span>:</span></span><br><span class="line">  index = <span class="number">1</span></span><br><span class="line">  <span class="keyword">with</span> open(filepath, <span class="string">'r'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">      self.insert_tail(index, line.rstrip(<span class="string">'\n'</span>))</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>接着是删除某个位置的节点。这里虽然没有难点，但是很难在细节上保持平衡。需要考虑以下几种情况：</p><ul><li><p>链表<strong>没有节点</strong></p></li><li><p>链表<strong>有且仅有</strong>一个节点</p></li><li><p>中间<strong>任意位置</strong>删除</p></li><li><p>要删除的是<strong>第一个元素</strong></p></li><li><p>要删除的是<strong>最后一个元素</strong></p></li></ul><p>如果面面俱到，代码一定会纷繁复杂。所以我们需要根据这些非常神奇的地方巧妙避雷：</p><ul><li><p>如果链表没有节点，<strong>直接结束</strong></p></li><li><p>如果链表仅一个节点，删除时需要同时解除<code>head</code>指针、<code>tail</code>指针，<strong>避免指针指了个寂寞</strong>，然后一脸哀怨的给你报了个错</p></li><li><p>在删除的时候，使用临时指针<code>node</code>指向<code>head</code>指针或者<code>tail</code>指针，并删除<code>node</code>指针的时候，你会发现<code>head</code>和<code>tail</code>实际指向的地址依然存在原有的实例对象。所以实际步骤应当是<strong>先重置原先指向需要删除地址的指针，再删除临时指针</strong></p></li><li><p>删除的时候需要在最后修改链表长度，避免下次使用的时候<strong>索引超限</strong></p></li></ul><h2 id="删除节点实现"><a href="#删除节点实现" class="headerlink" title="删除节点实现"></a>删除节点实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用索引删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">  <span class="comment"># 没有节点</span></span><br><span class="line">  <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 删除头</span></span><br><span class="line">  <span class="keyword">elif</span> index == <span class="number">1</span>:</span><br><span class="line">    node = self.head</span><br><span class="line">    self.head = self.head.next</span><br><span class="line">    <span class="keyword">del</span> node</span><br><span class="line">    <span class="comment"># 检查是不是只有这个节点</span></span><br><span class="line">    <span class="comment"># 如果无视tail，head将会为None而tail保持原样</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      self.tail = self.head</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 中间任意位置删除</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    node = self.get_node(index - <span class="number">1</span>)</span><br><span class="line">    temp = node.next</span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">      node.next = <span class="literal">None</span></span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后我们来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试删除是否成功</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.read_file(<span class="string">'/home/sakebow/python/linklist/linklist.csv'</span>)</span><br><span class="line">  link.delete_node_by_index(link.length)</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里要强调的是<code>read_file</code>命令需要<strong>完整的绝对路径</strong>，否则无法读取文件。</p><p>当然，很完美地删掉了最后一个元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: 1 2: 2 3: 3 4: 10 5: 11 6: a 7: b 8: 3 9: 1000 10: 7 11: p 12: q 13: h 14: @ 15: ! 16: , 17: &gt;</span><br></pre></td></tr></table></figure><h2 id="删除节点进阶"><a href="#删除节点进阶" class="headerlink" title="删除节点进阶"></a>删除节点进阶</h2><p>接着我们再来完善匹配所有项的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配内容删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">  <span class="comment"># 强行改为有头节点的链表 / 内容随意，仅需保证next指向head</span></span><br><span class="line">  node = Node(<span class="string">'a'</span>, self.head, <span class="number">0</span>)</span><br><span class="line">  <span class="comment"># 保持标识，最后需要删除</span></span><br><span class="line">  <span class="comment"># 如果head移动了也不要紧，node将会控制下一跳的位置</span></span><br><span class="line">  stay_head = node</span><br><span class="line">  <span class="comment"># 游标，规定temp为必删项，node为上一项</span></span><br><span class="line">  temp = self.head</span><br><span class="line">  <span class="comment"># 遍历链表</span></span><br><span class="line">  <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 如果要删第一个</span></span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">is</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">      <span class="comment"># 先重置</span></span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="comment"># 检查tail</span></span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">        self.tail = self.head = node.next</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="comment"># 再删除</span></span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="comment"># 因为下次循环依然需要使用temp，所以重置为node下一跳</span></span><br><span class="line">      temp = node.next</span><br><span class="line">      <span class="comment"># 修改长度</span></span><br><span class="line">      self.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 中间任意项删除</span></span><br><span class="line">    <span class="comment"># 原理同上</span></span><br><span class="line">    <span class="keyword">elif</span> temp <span class="keyword">is</span> <span class="keyword">not</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">        self.tail = node</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      temp = node.next</span><br><span class="line">      self.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 如果不匹配，全部下一跳，且长度不变</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      temp = temp.next</span><br><span class="line">      node = node.next</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 最终删除辅助节点</span></span><br><span class="line">  <span class="keyword">del</span> stay_head</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>那我们来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.read_file(<span class="string">'/home/sakebow/python/linklist/linklist.csv'</span>)</span><br><span class="line">  <span class="comment"># 因为数据集里面3出现了两次，所以选择3</span></span><br><span class="line">  link.delete_node_by_data(<span class="string">'3'</span>)</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当然，最终结果把两个3全部删掉了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: 1 2: 2 4: 10 5: 11 6: a 7: b 9: 1000 10: 7 11: p 12: q 13: h 14: @ 15: ! 16: , 17: &gt; 18: shift</span><br></pre></td></tr></table></figure><p>也没有问题！</p><p>当然你也可以使用各种各样的数据测试。就算是60万行数据也能用$1’32’’$秒给出答案。（<em>实际测量可能和电脑运算能力有误差</em>）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后，为了代码简洁、项目结构清晰，我们将各个部分拆开。这里贴上各个部分的文件内容：</p><h3 id="Node-py"><a href="#Node-py" class="headerlink" title="Node.py"></a>Node.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, next, index)</span>:</span></span><br><span class="line">    self.data = data</span><br><span class="line">    self.next = next</span><br><span class="line">    self.index = index</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="Link-py"><a href="#Link-py" class="headerlink" title="Link.py"></a>Link.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Node <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># 链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">  <span class="comment"># 初始化 / 不需要参数，自带空的头节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = <span class="literal">None</span></span><br><span class="line">    self.tail = <span class="literal">None</span></span><br><span class="line">    self.length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 尾插法插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_tail</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.tail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      self.insert_head(index, data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node = Node(data, <span class="literal">None</span>, index)</span><br><span class="line">      self.tail.next = node</span><br><span class="line">      self.tail = node</span><br><span class="line">      self.length += <span class="number">1</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 头插法插入数据 </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_head</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    node = Node(data, self.head, index)</span><br><span class="line">    self.head = node</span><br><span class="line">    self.length += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 当只有一个元素的时候，确定尾节点</span></span><br><span class="line">    <span class="keyword">if</span> self.length == <span class="number">1</span>:</span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 输出链表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      print(<span class="string">'Nothing'</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node = self.head</span><br><span class="line">      <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;node.index&#125;</span>: <span class="subst">&#123;node.data&#125;</span>'</span>, end=<span class="string">' '</span>)</span><br><span class="line">        node = node.next</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      print()</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 随机生成链表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">random_link</span><span class="params">(self)</span>:</span></span><br><span class="line">    size = random.randint(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size):</span><br><span class="line">      self.insert_tail(i + <span class="number">1</span>, LETTERS[random.randint(<span class="number">0</span>, LETTERS_LEN - <span class="number">1</span>)])</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 读取固定的链表</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(self, filepath)</span>:</span></span><br><span class="line">    index = <span class="number">1</span></span><br><span class="line">    <span class="keyword">with</span> open(filepath, <span class="string">'r'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">      <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        self.insert_tail(index, line.rstrip(<span class="string">'\n'</span>))</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 通过索引获得指定节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get_node</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    node = self.head</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, index):</span><br><span class="line">      node = node.next</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 匹配内容删除节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">    <span class="comment"># 强行改为有头节点的链表</span></span><br><span class="line">    node = Node(<span class="string">'a'</span>, self.head, <span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 保持标识，最后需要删除</span></span><br><span class="line">    stayHead = node</span><br><span class="line">    <span class="comment"># 游标，规定temp为必删项，node为上一项</span></span><br><span class="line">    temp = self.head</span><br><span class="line">    <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">        node.next = self.head = temp.next</span><br><span class="line">        <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">          self.tail = self.head = node.next</span><br><span class="line">          <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">del</span> temp</span><br><span class="line">        temp = node.next</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">elif</span> temp <span class="keyword">is</span> <span class="keyword">not</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">        node.next = temp.next</span><br><span class="line">        <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">          self.tail = node</span><br><span class="line">          <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">del</span> temp</span><br><span class="line">        temp = node.next</span><br><span class="line">        self.length -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        temp = temp.next</span><br><span class="line">        node = node.next</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">del</span> stayHead</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 使用索引删除节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> index == <span class="number">1</span>:</span><br><span class="line">      node = self.head</span><br><span class="line">      self.head = self.head.next</span><br><span class="line">      <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">del</span> node</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node = self.get_node(index - <span class="number">1</span>)</span><br><span class="line">      temp = node.next</span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">        node.next = <span class="literal">None</span></span><br><span class="line">        self.tail = node</span><br><span class="line">        <span class="keyword">del</span> temp</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">        node.next = temp.next</span><br><span class="line">        <span class="keyword">del</span> temp</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="linklist-csv"><a href="#linklist-csv" class="headerlink" title="linklist.csv"></a>linklist.csv</h3><p>这个文件后来我改得非常大，一共22932行数据，不方便展开，各位可以自行<a href="https://github.com/sakebow/python-linklist/blob/master/linklist.csv" target="_blank" rel="noopener">点击我的<code>GitHub</code></a>下载。</p><h3 id="linklist-py（主文件）"><a href="#linklist-py（主文件）" class="headerlink" title="linklist.py（主文件）"></a>linklist.py（主文件）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Link <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">LETTERS = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">LETTERS_LEN = len(LETTERS)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.read_file(<span class="string">'/home/sakebow/python/linklist/linklist.csv'</span>)</span><br><span class="line">  <span class="comment"># 测试</span></span><br><span class="line">  link.delete_node_by_data(<span class="string">'3'</span>)</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果觉得大段大段的代码在这里看不怎么清楚的话，直接在<a href="https://github.com/sakebow/python-linklist" target="_blank" rel="noopener">我的GitHub</a>中下载也可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;因为研究生生涯开始了，所以需要暂时停掉&lt;code&gt;Java&lt;/code&gt;的学习，开始使用&lt;code&gt;Python&lt;/code&gt;的学习和实践了。于是花了一个小时从完全没学过到实现了最基础的单链表。这里就记录一下。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程基础综合测验" scheme="https://sakebow.gitee.io/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%B5%8B%E9%AA%8C/"/>
    
    
      <category term="Python" scheme="https://sakebow.gitee.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>回老家的四天假期</title>
    <link href="https://sakebow.gitee.io/2020/08/06/diary/%E5%9B%9E%E8%80%81%E5%AE%B6%E7%9A%84%E5%9B%9B%E5%A4%A9%E5%81%87%E6%9C%9F/"/>
    <id>https://sakebow.gitee.io/2020/08/06/diary/%E5%9B%9E%E8%80%81%E5%AE%B6%E7%9A%84%E5%9B%9B%E5%A4%A9%E5%81%87%E6%9C%9F/</id>
    <published>2020-08-06T13:48:11.000Z</published>
    <updated>2020-08-09T03:29:43.426Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">如果你坚持要看，请联系我。</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      本文针对老家的一点见闻说一些真心感受。当然，因为是个人偏见所以不对外开放。
    
    </summary>
    
    
      <category term="日记" scheme="https://sakebow.gitee.io/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="假期" scheme="https://sakebow.gitee.io/tags/%E5%81%87%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>多元梯度函数的梯度下降</title>
    <link href="https://sakebow.gitee.io/2020/08/01/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E5%87%BD%E6%95%B0%E7%9A%84%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://sakebow.gitee.io/2020/08/01/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E5%87%BD%E6%95%B0%E7%9A%84%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</id>
    <published>2020-08-01T03:25:00.000Z</published>
    <updated>2020-09-19T00:02:40.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>当然，本篇完全有理由和我之前写的<a href="/2020/07/26/人工智能/算法模型/梯度下降/">梯度下降</a>一文并在一起。但是，我还是觉得应当单独拉出来。前一篇<a href="/2020/07/26/人工智能/算法模型/梯度下降/">梯度下降</a>仅仅只是针对梯度下降的原理和流程作了一些阐释，用三个维度的例子说明了一个通用解法。而这里才是实际应用的具体表现，同时也包含很多小技巧。从这里开始，就是动真格的了！</strong></p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当然，还是那个海拔图，有高有低，有近有远。你要做的，就是从山顶上下山。环顾四周，一跳接一跳地往山下走。</p><h2 id="代价函数的确定"><a href="#代价函数的确定" class="headerlink" title="代价函数的确定"></a>代价函数的确定</h2><p>当然，代价函数就是我们需要训练的目标函数。只要代价函数最小，我们最后训练的结果就会接近事实。</p><p>可是，光是二元函数构成的三维图就已经包含了很多的不确定性，陷入局部最优解、收敛慢、内存溢出……这都是很无奈但是可控的问题。不如我们逆转过来：既然没有便利，就创造便利。</p><p>这里就还是用你的猫娘作为例子，但是这次代入了更多自变量：</p><blockquote><p>你再次收集了20万猫娘的信息，包括年龄（<code>age</code>）、体重（<code>weight</code>）、身高（<code>height</code>）、最大跳跃距离（<code>distence</code>）、胸围（<code>bust</code>）、腰围（<code>waist</code>）、臀围（<code>hip</code>）、基础社会科学考试分数（<code>score</code>）……</p></blockquote><p>虽然可能还有很多指标，但是现在就先列举这8项。是不是觉得非常的麻烦？而且这下我们连图都画不出来了，甚至无法想象8个自变量如何构成一个解空间，更无法想象涉及8个自变量的函数将会是怎样一个扭曲的形态。</p><p>行，套公式嘛，<strong>矩阵求解</strong>。</p><h2 id="函数化简"><a href="#函数化简" class="headerlink" title="函数化简"></a>函数化简</h2><blockquote><p>你整理出了一张含有$n$行数据的表，其中每一行数据都代表一只猫娘的所有收集到的信息，所以你为每一行整理了一个矩阵：</p><script type="math/tex; mode=display">\left[\begin{matrix}age_i（岁） \\weight_i（千克）\\height_i（米）\\distance_i（米）\\bust_i（厘米）\\waist_i（厘米）\\hip_i（厘米）\end{matrix}\right],i\in\{1,2,3,\ldots,n\}</script></blockquote><p><strong>这里插播一句：</strong></p><p><em>因为面对这样一个生物，对于科研人员来说就是个名副其实的黑匣子：什么都不知道，只知道输入和输出。所以在确定函数关系式的时候相当的麻烦。所以往往是一个个变量分析，优先找出一个个独立不相关的变量，然后分析相关变量的影响。这里就完全不是拟合算法能够做到的了，而是来自不同领域的科研人员齐心协力研究发现最终的出来的结果。这里因为赌的成分过高，并且和梯度下降并没有什么直接的关系，所以直接跳过。现在就直接跳到你找到了每个自变量的精确幂指数和对数底数以及对应的线性关系的情况。</em></p><blockquote><p>然后你又双叒叕凭着你对猫娘的热爱找出了这8个变量的大致关系：</p><script type="math/tex; mode=display">y=f(age,weight,height,distance,bust,waist,hip)\\\Downarrow\\y=\epsilon+\alpha_1a+\alpha_2weight^2+\alpha_3height+\alpha_4d^3+\frac{\alpha_5}{3}(b^2+waist^2+hip^2)</script><p>其中，</p><script type="math/tex; mode=display">\epsilon,\alpha_1,\alpha_2,\alpha_3,\alpha_4,\alpha_5\in\mathbb{R}</script></blockquote><p><em>如果你还有印象，那么你应该记得$\epsilon$服从正态分布$N(0,\sigma^2)$，是随机误差。在一开始决定各种自变量的系数的时候往往会先忽视这个小东西，然后在全部得出结果之后加上以保证函数能够兼容一些“<strong>偶然</strong>”</em></p><blockquote><p>看到这样群魔乱舞的函数，你感觉到背脊发凉。完全没办法想象的解空间、完全无法想象的图形走向，更不用说最终目标的图像意义都无法解释……（<em>当然，这里是为了节目效果如此设计的</em>。）</p><p>这没难倒你。你把式子化为<strong>矩阵</strong>形式表达，就变成了这样：</p><script type="math/tex; mode=display">y=\left[\begin{matrix}  1&\alpha_1&\alpha_2&\alpha_3&\alpha_4&\alpha_5\over3&\alpha_5\over3&\alpha_5\over3\end{matrix}\right]\times\left[\begin{matrix}\epsilon\\age\\weight^2\\height\\distance^3\\bust^2\\waist^2\\hip^2\end{matrix}\right]\\\Downarrow\\y=\left[\begin{matrix}  1&\alpha_1&\alpha_2&\alpha_3&\alpha_4&\alpha_5\over3&\alpha_5\over3&\alpha_5\over3\end{matrix}\right]\\\times\left[\begin{matrix}  \epsilon\\age\\weight\\height\\distance\\bust\\waist\\hip\end{matrix}\right]\\\times\left[\begin{matrix}  \epsilon\\&1\\&&weight\\&&&height\\&&&&distance\\&&&&&bust\\&&&&&&waist\\&&&&&&&hip\end{matrix}\right]\\\times\left[\begin{matrix}  1\\&1\\&&1\\&&&1\\&&&&distance\\&&&&&1\\&&&&&&1\\&&&&&&&1\end{matrix}\right]</script></blockquote><p><em>由于版面问题，这个公式只能勉强这么写着了……</em></p><p><img src="https://sakebow.gitee.io/images/emoji/fuck-off.jpg" width="150" /></p><p>先不管版面了，若稍微简化一些，我们发现系数和幂指数<strong>完全相同</strong>的$bust$、$waist$和$hip$可以<strong>合并</strong>为一个变量$\eta_1$。</p><blockquote><p>再简化一些，更抽象一些，那就成为了：</p><script type="math/tex; mode=display">y=\alpha^T\eta</script><p>其中，$\alpha$是待定系数的矩阵，而$\eta$则是自变量经过各自合适变化之后的矩阵，即：</p><script type="math/tex; mode=display">\alpha^T=\left[\begin{matrix}  \alpha_1&\alpha_2\cdots\alpha_n\end{matrix}\right]_n,\\\eta=\left[\begin{matrix}  \eta_1\\\eta_2\\\vdots\\\eta_n\end{matrix}\right]_n,</script><p>而$\eta_i$则能代表很多，可以是$x_i$，也可以是$(x_i+x_{i+1})^2$等等。</p></blockquote><p>到这里，也就只是单纯的将变量合并，将复杂的公式变成简单易懂的矩阵向量，强行转成2个矩阵维度的<strong>解空间</strong>。当然，我们还是想象不到，只不过大致可以理解为某种类似$x$轴和$y$轴的神奇坐标轴在帮助我们标记位置。这么一想的话，就算是不能想象数轴的样子，也能够想象出解空间是个什么样了，而我们最终要求的目标函数最小值大概也能模模糊湖地猜出来在哪。</p><h2 id="目标函数最终展开"><a href="#目标函数最终展开" class="headerlink" title="目标函数最终展开"></a>目标函数最终展开</h2><p>但是你发现，到这里还是和上次讲到的梯度下降没有区别。没错，后面还有内容。</p><p>由于我们已经将目标函数改成了多元一次函数，所以，我们需要将目标函数彻底展开成为级数的形式，方便我们进一步设计算法。</p><p>还记得我们最初的公式么？</p><script type="math/tex; mode=display">\beta_i=\beta_i-\frac{\alpha}{m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>我们的目标就是让$\frac{1}{m}\sum^n_{i=1}(f(x_i)-y_i)^2$尽可能地小。那么问题就简单了，针对这个函数分析就好了。另：</p><script type="math/tex; mode=display">\phi(\beta)=\frac{1}{m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>求个导：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{2}{m}\sum^n_{i=1}[f(x_i)-y_i]\dot{f(x_i)}</script><p>这里最核心的部分就是$\dot{f(x_i)}$的理解。首先，我们寻找的是有关系数的函数，所以在这里的自变量是$\beta$，所以求导的时候不应当是已经知道具体数值的$x_i$，而是完全未知的$\beta_i$，故求导结果为$x_i$。即：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{2}{m}\sum^n_{i=1}[\dot{f(x_i)}-y_i]x_i</script><p>为了求导不要新增太多没有意义的单项式或多项式，所以我们将系数$2$删掉，也就是将目标函数改为：</p><script type="math/tex; mode=display">\phi(\beta)=\frac{1}{2m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>这也就是吴恩达教授的课程中一直使用的函数的由来。求导之后就是：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{1}{m}\sum^n_{i=1}[f(x_i)-y_i]x_i</script><p>简单多了，不是么？</p><p>所以我们进而修改一下机器学习的算法：</p><script type="math/tex; mode=display">\theta_j=\theta_j-\frac{\alpha}{m}\sum^n_{i=1}[f(x_i)-y_i]x_i</script><p>到这，似乎就对计算机来说非常的方便了。</p><h2 id="theta-0-和-x-0"><a href="#theta-0-和-x-0" class="headerlink" title="$\theta_0$和$x_0$"></a>$\theta_0$和$x_0$</h2><p>对于一些课程中，你一定会遇到加设待定常数$\theta_0$和固定初始参数$x_0=1$的教师。为什么要这么做？我个人认为和数列添加初项是一样的。有些算法并不能很好地概括初项，所以强行加上去方便计算机处理。有些非常巧合的数列能够不需要初项，这就看怎么处理了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;当然，本篇完全有理由和我之前写的&lt;a href=&quot;/2020/07/26/人工智能/算法模型/梯度下降/&quot;&gt;梯度下降&lt;/a&gt;一文并在一起。但是，我还是觉得应当单独拉出来。前一篇&lt;a href=&quot;/2020/07/26/人工智能/算法模型/梯度下降/&quot;&gt;梯度下降&lt;/a&gt;仅仅只是针对梯度下降的原理和流程作了一些阐释，用三个维度的例子说明了一个通用解法。而这里才是实际应用的具体表现，同时也包含很多小技巧。从这里开始，就是动真格的了！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>建模工具：octave</title>
    <link href="https://sakebow.gitee.io/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7%EF%BC%9Aoctave/"/>
    <id>https://sakebow.gitee.io/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7%EF%BC%9Aoctave/</id>
    <published>2020-07-26T15:23:00.000Z</published>
    <updated>2020-09-19T00:02:36.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>终于，使用<code>Ubuntu</code>系统的我遇到了最尴尬的问题：建模工具<code>Matlab</code>没有<code>linux</code>发行版。虽然可以使用<code>wine</code>勉强跑起来，但毕竟不是运行在<code>Windows</code>内核下，所以往往有很多事情都非常尴尬。所以，我看上了这一款：<code>octave</code>。不仅支持<code>Ubuntu</code>，还能够兼容<code>Matlab</code>，是非常不错的替代品。</strong></p><a id="more"></a><h2 id="界面展示"><a href="#界面展示" class="headerlink" title="界面展示"></a>界面展示</h2><p>先看看<code>octave</code>的软件界面，体验一下吧。</p><p><img src="https://sakebow.gitee.io/images/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/octave%E7%95%8C%E9%9D%A2.png" alt="octave界面"></p><p>可以看到左边由上至下依次是：文件目录、工作空间和历史记录，而左边则是命令行界面。</p><p>是不是非常熟悉？没错，这简直不能再像<code>Matlab</code>了。即使顶部功能菜单并没有<code>Matlab</code>那么丰富，却也足够了。</p><h2 id="更换命令行"><a href="#更换命令行" class="headerlink" title="更换命令行"></a>更换命令行</h2><p>如果你有丰富的<code>shell</code>编程经验，那么你应该对这个<code>&gt;&gt;</code>非常熟悉。<code>Matlab</code>使用的是<code>&gt;&gt;</code>，<code>MySQL</code>使用的是<code>&gt;</code>，<code>sqlplus</code>（<em><code>Oracle</code></em>）使用的是<code>&gt;</code>，<code>Python</code>使用的是<code>&gt;&gt;&gt;</code>，<code>Ubuntu</code>普通用户使用的是<code>$</code>，<code>Ubuntu</code>超管使用的是<code>#</code>……</p><p>如果说你用惯了想要换，还是可以的。直接输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这段字符串复制自我的Ubuntu终端</span></span><br><span class="line">PS1("sakebow@Lenovo-V310-14IKB:~$ ")</span><br></pre></td></tr></table></figure><p>这样就能够保持和终端一模一样的风格了。当然为了区分也可以改称其他的，比如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ……懂的都懂……</span></span><br><span class="line">PS1("お兄ちゃん、頑張るね、大好きだよ❤　")</span><br></pre></td></tr></table></figure><h2 id="基于Linux的特点"><a href="#基于Linux的特点" class="headerlink" title="基于Linux的特点"></a>基于<code>Linux</code>的特点</h2><p>当然，因为开源免费的<code>octave</code>是使用<code>C</code>语言基于<code>Linux</code>系统开发的，所以也会保留一些<code>Linux</code>系统的命令。比如：</p><ul><li><code>pwd</code>显示当前所在文件夹</li><li><code>ls</code>显示当前文件夹中所有的文件</li><li><code>cd</code>跳转到制定文件夹</li><li><code>exit</code>退出程序</li></ul><p>即使是安装在<code>Windows</code>系统下的<code>octave</code>也是能够使用这些命令的。</p><h2 id="清空矩阵"><a href="#清空矩阵" class="headerlink" title="清空矩阵"></a>清空矩阵</h2><p>在<code>Ubuntu</code>系统中你可以直接使用<code>Ctrl+L</code>清空命令行。所有的指令会存在历史记录<code>Command History</code>栏内</p><p>当然你也可以输入<code>clc</code>并回车就能够清空命令行</p><h2 id="快速矩阵"><a href="#快速矩阵" class="headerlink" title="快速矩阵"></a>快速矩阵</h2><blockquote><p>这些<code>Octave</code>内置的快速矩阵摘自摘自<a href="https://www.youtube.com/watch?v=X0xLTKRWPgo&amp;list=PL1A2CSdiySGJ6oZe6" target="_blank" rel="noopener">油土鳖上一位印度阿三的教程</a>（<em>英语略微有一些咖喱味，但已经很不错了</em>）</p></blockquote><script type="math/tex; mode=display">ones(n, m) = \left[  \begin{matrix}    1, \cdots, 1\\\vdots\\    1, \cdots, 1  \end{matrix}\right]_{n\times m}\\zeros(n, m) = \left[  \begin{matrix}    0, \cdots, 0\\\vdots\\    0, \cdots, 0  \end{matrix}\right]_{n\times m}\\eye(n) = \left[  \begin{matrix}    1, 0, 0, \cdots, 0\\    0, 1, 0, \cdots, 0\\    0, 0, 1, \cdots, 0\\\vdots\\    0, 0, 0, \cdots, 1  \end{matrix}\right]_n = E\\eye(n, n + 1) = \left[  \begin{matrix}    1, 0, 0, \cdots, 0, 0\\    0, 1, 0, \cdots, 0, 0\\    0, 0, 1, \cdots, 0, 0\\\vdots\\    0, 0, 0, \cdots, 1, 0  \end{matrix}\right]_{n\times(n+1)}\\</script><p>而<code>rand(n,m)</code>则是生成<strong>n行m列</strong>的<strong>均匀分布随机数矩阵</strong>（<em>uniformly random matrix</em>），每个数字都是<strong>介于0到1之间的7位小数</strong>，且每个数字出现概率服从均匀分布$U(0, 1)$；</p><p><code>randn(n,m)</code>是生成一共<strong>n列m行</strong>的<strong>正态分布随机数矩阵</strong>（<em>normally random matrix</em>），每个数字服从正态分布$N(0, 1)$。乍一看这组数据毫无特点，实际上是$P(\mu-\sigma&lt;x&lt;\mu+\sigma)\approx0.6826$。这也就说明了为什么数字里面会有<strong>大于$1$和小于$-1$的数字了</strong></p><h2 id="矩阵构造"><a href="#矩阵构造" class="headerlink" title="矩阵构造"></a>矩阵构造</h2><p>在<code>C</code>、<code>C++</code>、<code>Java</code>、<code>C#</code>等等语言中构造矩阵永远是一个很难受的工程，拿<code>Java</code>中的<code>List&lt;List&lt;?&gt;&gt;</code>来说，向其中添加元素是一项无比复杂的工程。</p><p>而在<code>octave</code>和<code>Matlab</code>中，就只需要使用</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; s = [<span class="number">1</span>, <span class="number">2</span>; <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">s = </span><br><span class="line">  <span class="number">1</span> <span class="number">2</span></span><br><span class="line">  <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p>在这里你可以使用<strong>逗号</strong>作为分割符，也可以仅用<strong>空格</strong>作为分割符。</p><p>如果你要用<strong>克莱姆法则</strong>解多元一次方程组，那么就需要几个矩阵拆拆解解。这个时候可以把一整个矩阵当作数字：</p><ul><li><code>[A B]</code>像是<code>[1 2]</code>，将两个数字横着拼起来</li><li><code>[A; B]</code>则是<code>[1; 2]</code>，将两个数字竖着拼起来</li><li><code>A&#39;</code>是矩阵的转置，就是$A^T$</li></ul><p>当然，我们还有矩阵的选择：</p><ul><li><code>S(m, n)</code>是选取矩阵<code>S</code>中<strong>第m行第n列</strong>的一个元素</li><li><code>S(m, [x, y, z])</code>是选择矩阵中<strong>第m行第x、y、z列</strong>的一共三个元素。如果还需要添加元素则在<code>[]</code>内追加</li><li><em>下方冒号表达式继续介绍</em></li></ul><h2 id="冒号表达式"><a href="#冒号表达式" class="headerlink" title="冒号表达式"></a>冒号表达式</h2><p>如果你熟悉<code>C</code>、<code>C++</code>、<code>Java</code>、<code>C#</code>等等（<em><code>Python</code>除外</em>），你应该会经常使用到冒号表达式，即是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出该学生是否可以购买打折的火车票</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; 学生.学生证 === null ? <span class="string">"火车票不能打折"</span> : <span class="string">"火车票可以打折"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>但是在<code>octave</code>和<code>Matlab</code>就完全不一样了。冒号表达式会这么用：<code>start[:step]:end</code>，即创建一个从<code>start</code>到<code>end</code>的数组，其中每个数字之间间隔<code>step</code>，默认<code>step</code>值为<strong>1</strong>，即依次递增。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; s = <span class="number">1</span> : <span class="number">5</span></span><br><span class="line">&gt;&gt; <span class="built_in">ans</span> =</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">&gt;&gt; </span><br><span class="line">&gt;&gt; s = <span class="number">1</span>:<span class="number">3</span>:<span class="number">10</span></span><br><span class="line">&gt;&gt; <span class="built_in">ans</span> =</span><br><span class="line">[<span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>当然冒号不止这一个用途。刚刚我们说了矩阵的构造，在矩阵中冒号还能够用作选择器。</p><p>我们在选择矩阵中元素的时候会使用一个<strong>数组</strong>作为范围，而如果这个范围<strong>正好</strong>可以用冒号表示的时候，就可以是这样：</p><ul><li><p><code>S(m, [start : end])</code>，也就是说选取<strong>第m行从start开始到end结束的所有元素</strong></p></li><li><p>如果没有规定<code>start</code>和<code>end</code>，也就像是：<code>S(m, :)</code>，那么就是选取<strong>第m行一整行</strong></p></li></ul><h2 id="个数计算"><a href="#个数计算" class="headerlink" title="个数计算"></a>个数计算</h2><p><code>Java</code>中，对集合使用<code>size()</code>方法求集合内元素个数，对数组使用<code>length()</code>方法求数组内元素个数。</p><p>在<code>octave</code>中，我们两个都可以用，但是<code>size()</code>方法返回的是行和列两个数字，而<code>length</code>方法则是从<code>size()</code>方法返回的两个数字中选择一个最大的。举个例子：</p><p>假设你这个时候又闲着没事创建了一个随机数组<code>rand(5, 1)</code>，那么<code>size()</code>方法返回的是<code>[5 1]</code>两个数字，前者是行数，后者是列数；而<code>length()</code>方法返回的是<strong>5</strong>，是<strong>5</strong>和<strong>1</strong>中较大的数。</p><p>同样的，如果你只有一个数组<code>[1 2 4]</code>，<code>size()</code>方法返回的依然是<code>[1 3]</code>两个数，而<code>length()</code>方法就返回<strong>3</strong>。</p><h2 id="其他数学函数"><a href="#其他数学函数" class="headerlink" title="其他数学函数"></a>其他数学函数</h2><ul><li><code>ceil(x)</code> - 取比x大的第一个最近的整数，即向上取整</li><li><code>floor(x)</code> - 取比x小的第一个最近的整数，即向下取整</li><li><code>round(x)</code> - 取距离x最近的一个整数。如果$x=0.7$，则结果为$1$；如果$x=0.3$，则结果为$0$</li><li><code>max(x)</code> / <code>min(x)</code> - 取一个数组中最大/最小的数</li></ul><p>对于<code>max(x)</code>和<code>min(x)</code>在官方给的说明里面指明的是vector，也就是说这个函数同样适用于矩阵、向量等等。但是实际测试的时候是这样的：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt; <span class="built_in">rand</span>(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> <span class="number">0.097667</span>   <span class="number">0.295360</span>   <span class="number">0.710065</span></span><br><span class="line"> <span class="number">0.858128</span>   <span class="number">0.141471</span>   <span class="number">0.729432</span></span><br><span class="line"> <span class="number">0.073253</span>   <span class="number">0.503299</span>   <span class="number">0.379730</span></span><br><span class="line"> <span class="number">0.329683</span>   <span class="number">0.839168</span>   <span class="number">0.076656</span></span><br><span class="line"> <span class="number">0.662468</span>   <span class="number">0.514276</span>   <span class="number">0.020735</span></span><br><span class="line">&gt;&gt;</span><br><span class="line">&gt;&gt; <span class="built_in">min</span>(<span class="built_in">ans</span>)</span><br><span class="line"><span class="built_in">ans</span> =</span><br><span class="line"> <span class="number">0.073253</span>   <span class="number">0.141471</span>   <span class="number">0.020735</span></span><br></pre></td></tr></table></figure><p>不难发现，对比的时候将一整列作为一个数组进行纵向的对比，每一列选出了一个最小的。在上面这个例子中，数组<code>ans[0..4][0..2]</code>每一列选出了最小的，也就是<code>ans[2, 0]</code>、<code>ans[1, 1]</code>和<code>ans[3, 2]</code>。<code>max(ans)</code>也是一样的算法，只不过会每列找出一个最大的。</p><h2 id="数据集的导入和导出"><a href="#数据集的导入和导出" class="headerlink" title="数据集的导入和导出"></a>数据集的导入和导出</h2><p>如果有一天我们使用计算机去证明歌德巴赫猜想，把所有的数字塞进去日复一日地算，终于算出来了一大批数字。我们不可能使用人工一个个抄下来，肯定是让计算机自己保存。这个时候就用<code>save</code>命令让计算机保存所有的数字。</p><p>例如，我现在弄出了很大一批随机数<code>randn(1000, 1000)</code>，但是我突然发现笔记本电不够了，得保存下来。就这么使用：<code>save ${文件名} ${变量名}</code>，意思就是：将变量的值保存在指定中。当然你也可以指定别的后缀名，比如我这里选择：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">save <span class="built_in">randn</span>.json <span class="built_in">ans</span></span><br></pre></td></tr></table></figure><p>于是就有了如下效果：</p><p><img src="https://sakebow.gitee.io/images/机器学习/octave保存数据.png" alt="保存了十万条随机数"></p><p>但是呢，为了能够更直观地区分各个文件，我们尽可能按照大家默认的规矩来，这里推荐万能的<code>.csv</code>文件；官方更是推荐使用<code>.mat</code>文件。更何况，我这里导出的文件并不符合<code>json</code>文件的编写规范。</p><p>就像是<code>Java</code>的导包一样，我们会使用<code>import</code>导入一整个<code>jar</code>包。而在<code>octave</code>中，我们将会使用<code>load</code>命令导入文件。</p><p>如果再次使用，我们就使用<code>load</code>命令，即：<code>load randn.dat</code>（<em>我这里是.json</em>）</p><p><strong>看起来很简单？我们再来点奇葩的：</strong></p><p>有一天你们哥几个凑一起跑数据，结果突然发现两个人风格极其相近以至于命名都完全一样。现在重新改已经很头疼了，怎么办？</p><p>我们就用<strong>临时文件</strong>。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 创建临时文件</span></span><br><span class="line">f = tmpfile</span><br><span class="line"><span class="comment">% 将变量存入临时文件</span></span><br><span class="line">save f variable</span><br><span class="line"><span class="comment">% &#123;</span></span><br><span class="line">  拿同名变量处理一大堆事情</span><br><span class="line">&#125; <span class="comment">%</span></span><br><span class="line"><span class="comment">% 读取临时文件</span></span><br><span class="line">load f</span><br><span class="line"><span class="comment">% 这个时候同名变量就被覆盖了</span></span><br></pre></td></tr></table></figure><p>打个比方的话，就像是<code>C</code>语言的<strong>局部变量</strong>和<strong>全局变量</strong>一样。</p><p>当然，这只是一个非常极端的例子，我们强烈建议各小组之间事先商量好再码字，正如<code>SpringBoot</code>所倡导的：“<strong>约束大于业务</strong>”、“<strong>习惯大于编码</strong>”</p><h2 id="统计图绘制"><a href="#统计图绘制" class="headerlink" title="统计图绘制"></a>统计图绘制</h2><p>统计图必定是有数据支持的，但是现在没有数据……那么就随机生成吧：<code>rand(1, 100)</code>。于是工作空间中就有了<code>ans</code>这个变量，同时还有了一个共<strong>1行</strong>、<strong>100列</strong>的矩阵，也就是数组。</p><p>然后，我们就画图：<code>plot(ans)</code>，于是产生了一个很简单的折线图：</p><p><img src="https://sakebow.gitee.io/images/机器学习/基本折线图.png" alt="最简单的折线图"></p><p>因为是随机生成的数字，所以也看不出什么规律。</p><p>你可能会有点惊讶，为什么明明只有<code>ans</code>一个变量，谈不上所谓因变量和自变量，他是怎么画出来的？实际上这里是将<strong>下标</strong>作为横坐标、<strong><code>ans</code>的值</strong>作为纵坐标画出来的。</p><h2 id="统计图绘制样式"><a href="#统计图绘制样式" class="headerlink" title="统计图绘制样式"></a>统计图绘制样式</h2><p>如果说你不需要折线图，而是散点图，那么就更改绘图样式吧：<code>plot(ans, &#39;*&#39;)</code></p><p><img src="https://sakebow.gitee.io/images/机器学习/更换样式.png" alt="把折线图换成散点图"></p><p>当然你觉得<code>*</code>不太美观的话也可以换成中文的<code>·</code>（<em>中文输入下波浪线按钮不加<code>shift</code></em>）或者日文的<code>・</code>（<em>日文输入下问号按钮不加<code>shift</code></em>）</p><p>为了防止很多图像看混了，可以使用不同的颜色标记：<code>plot(ans, &#39;1&#39;)</code></p><p><img src="https://sakebow.gitee.io/images/机器学习/更换颜色.png" alt="更改颜色"></p><p>各种各样的数字代表了各种各样的<strong>颜色</strong>，而各种各样的字符代表了各种各样的<strong>描点</strong>。</p><p>如果你什么都不写，那么默认就是使用<code>-</code>，也就是折线图。</p><h2 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h2><p>好吧，用<code>plot</code>画出来的散点图多少还是有点点奇怪。那么我们干脆用专门画散点图的方法：<code>scatter</code>。</p><p>还是一样的，我们拿到了一组数据：<code>x = randn(1, 100)</code>，另外我们再来一组数据：<code>y = randn(1, 100)</code>，然后画出随机散点图：</p><p><img src="https://sakebow.gitee.io/images/机器学习/散点图.png" alt="散点图"></p><p>同样的，我们能够使用家参数的方式改变图像的样式：<code>scatter(x, y, &#39;*&#39;)</code>。只不过这里支持的字符就比较少了，经测试似乎仅支持将圆圈更换为<code>*</code>。</p><h2 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h2><p>柱状图也是一种重要的工具，在统计总数并比较多条数据的差值时用得多。就比如100个服从正态分布的随机数构成的柱状图中，能够清晰地看出各个概率之间分布的差值：</p><p><img src="https://sakebow.gitee.io/images/机器学习/柱状图.png" alt="柱状图"></p><p>我们知道，$P(0-1&lt;x&lt;0+1)\approx0.6826$，所以数据比较倾向于向$(-1, 1)$这个区间集中。</p><h2 id="等高线"><a href="#等高线" class="headerlink" title="等高线"></a>等高线</h2><p>就像是地理的等高线、电磁场的等势线一样，存在的目的就是为了说明哪一段是数值上相等的。在绘制的时候，我们需要提供一个至少<strong>两行两列</strong>的矩阵，然后就由<code>contour</code>方法寻找矩阵中值算出等高线。</p><p>比如对于$ans=\left[\begin{matrix}1&amp;2\\3&amp;4\\5&amp;6\\7&amp;8\end{matrix}\right]$这个矩阵画出来的等高线就是<code>contour(ans)</code>：</p><p><img src="https://sakebow.gitee.io/images/机器学习/等高线.png" alt="等高线"></p><h2 id="极坐标"><a href="#极坐标" class="headerlink" title="极坐标"></a>极坐标</h2><p>高中我们认识并狠狠地练习了<strong>极坐标</strong>这些题目，所以我们就直接从最简短的开始：$\rho=2\cos\theta$。相信你很清楚这个等式可以化为$x^2+y^2=x$，是以$(1,0)$为圆心、$1$为半径的圆。</p><p>那么就确定两个变量：<code>p = linspace(0, 1)</code>和<code>o = linspace(0, 2 * pi)</code></p><p><em>注：linspace(x, y) = x:0.01:y，即从x到y中每隔0.01取一个点</em></p><p>然后，画极坐标：polar(p, o)</p><p>就出现了这样的图：</p><p><img src="https://sakebow.gitee.io/images/机器学习/极坐标.png" alt="极坐标"></p><p>似乎和我们平常见到的直角坐标系不一样。不过没有关系，是不是在很多影视作品中看到类似的？<strong>雷达</strong>嘛。在战场上，你发送了敌机的$(x, y, z)$坐标，<strong>这谁懂啊</strong>。干脆点，报哪个方向方向多少度，往那打。这种情况下极坐标比直角坐标好用多了。</p><p>还有其他很有意思的：比如我们将刚刚的<code>p</code>和<code>o</code>调换一下位置，就成了螺旋线。</p><p><img src="https://sakebow.gitee.io/images/机器学习/螺旋线.png" alt="螺旋线"></p><h2 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h2><p>饼状图只是为了查看占比，所以大批量的随机数在这里并不适合作为样本。所以这里就随机生成三个数：<code>ans = randn(1, 3)</code></p><p><em>由于饼状图是组内比较，所以只能使用一组数据，即<strong>行向量</strong>或者<strong>列向量</strong>作为参数。如果生成<code>ans = randn(10, 10)</code>作为样本则会报错。使用时还请注意。</em></p><p><img src="https://sakebow.gitee.io/images/机器学习/饼状图.png" alt="饼状图"></p><p>可以看到，<code>octave</code>拿到数据之后立马进行了权重的计算，最终得出了这个结果。所以我们在实际实验中就只需要把数据整理成<strong>行向量</strong>或者<strong>列向量</strong>传入，<code>octave</code>就能够在一定程度上。</p><p>既然饼状图是查看一个部分或者多个部分的占比，为了让图片更清晰，就可以让一些部分联系起来。</p><p>时间回溯到你收集猫娘数据的那些日子（<del>别吐槽了，听就是了</del>）</p><p>你了解到全世界的猫娘们的年龄从0岁开始往上的数量依次是<code>neko = [16247, 18752, 19165, 17251, 11471, 18714, 10961, 5428, 13725, 8715, 10031, 13298, 8715, 9716, 4562, 9612, 3610]</code>（<em>随手瞎打的</em>）。你想清晰地看出在0到3岁的猫娘占比，于是你使用第二个参数：<code>explode</code>。这个参数应当是一个数组。如果数值为0，则会与下一个块区相接；而如果非0，即使是负数也会明显分开。</p><p>于是我们为了清晰地看出0到3岁的小猫娘的数量，我们使用<code>pie (neko, [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])</code>，就会产生这样的效果：</p><p><img src="https://sakebow.gitee.io/images/机器学习/突出部分元素的饼图.png" alt="突出部分元素"></p><p>可以看到，设置为非零的前三个部分被分开了，占比$8\%+9\%+10\%=27\%$。这是不是比不突出任何元素的饼图看起来更直观呢？</p><h2 id="选择支"><a href="#选择支" class="headerlink" title="选择支"></a>选择支</h2><p>当然，作为一门高级语言，选择支是必要的。</p><p>如果你是想通过选择支筛选不同年龄段，那么就使用：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> age &lt; <span class="number">3</span>,</span><br><span class="line">  <span class="comment">% filter for age &lt; 3</span></span><br><span class="line"><span class="keyword">elseif</span> age &lt; <span class="number">10</span>,</span><br><span class="line">  <span class="comment">% filter for 3 &lt; age &lt; 10</span></span><br><span class="line"><span class="keyword">else</span>,</span><br><span class="line">  <span class="comment">% filter for age &gt; 10</span></span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>这个逗号估计就是在命令划分的时候不太好识别标志加上的。虽然和<code>Java</code>、<code>Python</code>略有出入，但我相信这绝对有他的道理。</p><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p><code>while</code>循环相信各位都熟悉得不能再熟悉了。实际上<code>while</code>和<code>if</code>的用法实际上是一样的。毕竟都是判断条件并转入选择支。唯一的区别估计就是<code>if</code>语句能够接<code>else if</code>和<code>else</code>来筛选不同的条件，而<code>while</code>只能始终选择同一个条件。</p><p><code>for</code>循环相比<code>while</code>循环又多了一个神奇的功能：将一个集合里的每一个元素创建索引，并这个索引仅作用于<code>for</code>循环中，是区域变量。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 假设nekos里面保存了每只猫娘的年龄(age)和姓名(name)</span></span><br><span class="line"><span class="keyword">for</span> neko = nekos,</span><br><span class="line">  <span class="keyword">if</span> neko.age &gt; <span class="number">10</span>,</span><br><span class="line">    sprintf(<span class="string">"%i"</span>, neko.name)</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>如果你确定这些猫娘有着不同的名字，并且你一定要找到那只叫做“<strong>chocola</strong>”的猫娘（<em>没……没夹带私货……真的！</em>），那么就这么来：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> neko = nekos,</span><br><span class="line">  <span class="keyword">if</span> neko.name == <span class="string">'chocola'</span>,</span><br><span class="line">    sprintf(<span class="string">"%i"</span>, neko.age)</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">% 跳出一层循环</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>有了这个<code>break</code>，一旦找到了<strong>chocola</strong>就会退出并显示她的年龄。</p><p>而如果这些猫娘有重名却有着不容的铃铛编号呢？那么就全找出来。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> neko = nekos,</span><br><span class="line">  <span class="keyword">if</span> neko.name == <span class="string">'chocola'</span>,</span><br><span class="line">    sprintf(<span class="string">"%i"</span>, neko.id)</span><br><span class="line">    <span class="keyword">continue</span>; <span class="comment">% 强制结束本次循环</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>有了<code>continue</code>，程序就不会结束，反而是直接结束<code>continue</code>后面的所有步骤，强行结束本次循环。全部显示出来之后我们再对比这些编号是不是我们想要的编号。</p><p>和<code>Java</code>、<code>Python</code>等等有着非常多的相似之处呢。即使完全没接触过<code>matlab</code>，相信你们也能用丰富的编程经验理解用法。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数看起来非常高端，实际上你可以看成多个普通命令的合集。</p><p>函数是有固定的套路的：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> $&#123;<span class="title">variable</span>&#125; = $&#123;<span class="title">function</span> <span class="title">name</span>&#125; <span class="params">($&#123;argument list&#125;)</span></span></span><br><span class="line">  <span class="comment">% to do list</span></span><br><span class="line">endfunction;</span><br></pre></td></tr></table></figure><p>但是你得明白：函数毕竟是一个包含了很多行的整体。如果你使用纯命令行编辑整个函数，一旦某个地方有所疏忽，一运行函数就有可能会报错，然后<strong>整个函数重写</strong>。这是相当考验熟练度、耐心和细心的工作。当然，肯定不会让你有这么难受的体验的。</p><p><code>octave</code>为了能够在数学处理上由所优势，就决定兼容<code>matlab</code>所使用的<code>.m</code>文件。在这个文件中，我们能够使用各种各样的变量记录函数的定义，这样即使出现了错误我们也能够通过错误信息定位到不正确的地方并修改。这样就避免了整个函数重写的惨痛经历。</p><p>如果你只有命令行，或者说只愿意使用命令行，<code>octave</code>也是提供了专门的命令：<code>edit ${file name}</code>。如果是<code>Ubuntu</code>系统，<code>octave</code>将会在<code>~/octave</code>文件夹下创建或者修改文件。在这里尤其注意文件的命名，一方面是因为这样子能够很清晰地弄清楚什么文件保存了什么函数，另一方面也是因为有些文件名是<code>octave</code>内定的<strong>特殊文件</strong>，比如<code>test.m</code>是<code>octave</code>规定的测试文件，其中含有非常多的内置函数和测试函数供用户调用、测试。而如果只是一般的命名就没有什么特殊的，只是会加上很多版权说明，并默认提供一个空函数模板以供用户根据需求修改。</p><p>有点难懂？那我们举个例子，主人公还是那个热爱猫娘的你。这次的你尽了全力也没能收集全所有的数据，有些猫娘一被问到年龄就狠狠地挠你的嘴，有些则因为怕生逃掉了，也有些则在接近之前你就被主人当成可疑人物带走了……总之，你虽然找到了20万只猫娘，却只收集了5000条残缺不全的数据，不是掉了这个就是少了那个。但是该寻找的还是要寻找，那就是查清相同年龄里成绩最好和成绩最差的两只猫娘的信息。</p><p>在写这个函数之前，我们首先明白几个非常重要的点：</p><ul><li><code>octave</code>是以<code>matlab</code>为模板创建的全平台兼容的软件，所以有什么不懂可以直接查询<code>matlab</code>的教程；</li><li><code>octave</code>与<code>matlab</code>非常相似，都是以<code>C</code>为基础搭建的，所以并没有<strong>面向对象编程</strong>的概念，整个程序就是为了<strong>面向过程</strong>而设定的。</li></ul><p>所以，我们如果使用<code>octave</code>处理猫娘们的数据的时候，只能把所有想要的全部<strong>手打</strong>或者<strong>通过脚本筛选</strong>，最终达成只包含需要被处理的部分的、单纯列出所有而不是分类整合的数据集。如果是使用各种各样括号分开的<code>json</code>数据则无法被处理为一个个对象，却只能分成许许多多的单条数据。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 文件名：filter.m</span></span><br><span class="line"><span class="comment">% 从一堆数据中寻找最小的数据</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_mini</span> = <span class="title">filter</span><span class="params">(x)</span></span></span><br><span class="line">  ret = x(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:<span class="built_in">length</span>(x),</span><br><span class="line">    <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt; ret,</span><br><span class="line">      ret = x(<span class="built_in">i</span>)</span><br><span class="line">    endif;</span><br><span class="line">  endfor;</span><br><span class="line">endfunction;</span><br></pre></td></tr></table></figure><p>在这里需要非常注意的是：<strong>一个文件只能编辑一个函数</strong>，<strong>每个函数的名称必须和文件名保持一致</strong>，否则会报警告：<strong>函数名和文件名不匹配</strong>。调用则是很普通的使用文件名即可，代入参数便能得到结果。</p><p>可是，我要找出猫娘的<code>id</code>啊，你这只能找出分数欸。那就这样，我们先按照猫娘的<code>id</code>顺序排列，我们找出最大和最小的索引，再从这些索引中找出<code>id</code>就好咯。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[low, low_index, high, high_index]</span> = <span class="title">filter</span><span class="params">(x)</span></span></span><br><span class="line">  low = x(<span class="number">1</span>); high = x(<span class="number">1</span>); low_index = <span class="number">0</span>; high_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:<span class="built_in">length</span>(x),</span><br><span class="line">    <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt; low,</span><br><span class="line">      low = x(<span class="built_in">i</span>)</span><br><span class="line">      low_index = <span class="built_in">i</span></span><br><span class="line">    <span class="keyword">elseif</span> x(<span class="built_in">i</span>) &gt; high,</span><br><span class="line">      high = x(<span class="built_in">i</span>)</span><br><span class="line">      high_index = <span class="built_in">i</span></span><br><span class="line">    endif</span><br><span class="line">  endfor</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><p>这样看起来没什么问题。但是却依然引出了另一个问题：一旦找出符合<code>if</code>语句的分数，程序就会立马返回并打印，然后你就发现了一大堆数字堆在那里，并只能通过肉眼筛选真正符合条件的数字。如果说明得学术一点，那就是：“<strong>打印出大量的局部最优解，并只能通过肉眼寻找全局最优解</strong>”。是不是很让人抓狂？</p><p>还是有解决办法的。也就是在调用的时候规定返回值：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c, d] = filter(param)</span><br></pre></td></tr></table></figure><p>这样的话虽然还是会打印一大堆数字，却能够很明显地看出全局最优解的结果了。</p><p>当然，有函数就一定有错误处理：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="params">[low, low_index, high, high_index]</span> = <span class="title">filter</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="comment">% 如果不是列向量或者行向量，报错。</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">isvector</span>(x),</span><br><span class="line">    error(<span class="string">"filter expects a vector"</span>)</span><br><span class="line">  endif</span><br><span class="line">  low = x(<span class="number">1</span>); high = x(<span class="number">1</span>); low_index = <span class="number">0</span>; high_index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> <span class="built_in">i</span> = <span class="number">2</span>:<span class="built_in">length</span>(x),</span><br><span class="line">    <span class="keyword">if</span> x(<span class="built_in">i</span>) &lt; low,</span><br><span class="line">      low = x(<span class="built_in">i</span>)</span><br><span class="line">      low_index = <span class="built_in">i</span></span><br><span class="line">    <span class="keyword">elseif</span> x(<span class="built_in">i</span>) &gt; high,</span><br><span class="line">      high = x(<span class="built_in">i</span>)</span><br><span class="line">      high_index = <span class="built_in">i</span></span><br><span class="line">    endif</span><br><span class="line">  endfor</span><br><span class="line">endfunction</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果你是<code>Windows</code>环境下的纯命令行，那么你在执行了上面提到的一些画图命令之后，还需要执行<code>hold on</code>命令让图像显示出来，而<code>close</code>命令则是关闭图像。当然，毕竟是<code>Windows</code>窗体程序，你也可以选择点击右上角的<strong>关闭窗口</strong>按钮关掉这张图片。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;终于，使用&lt;code&gt;Ubuntu&lt;/code&gt;系统的我遇到了最尴尬的问题：建模工具&lt;code&gt;Matlab&lt;/code&gt;没有&lt;code&gt;linux&lt;/code&gt;发行版。虽然可以使用&lt;code&gt;wine&lt;/code&gt;勉强跑起来，但毕竟不是运行在&lt;code&gt;Windows&lt;/code&gt;内核下，所以往往有很多事情都非常尴尬。所以，我看上了这一款：&lt;code&gt;octave&lt;/code&gt;。不仅支持&lt;code&gt;Ubuntu&lt;/code&gt;，还能够兼容&lt;code&gt;Matlab&lt;/code&gt;，是非常不错的替代品。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="建模工具" scheme="https://sakebow.gitee.io/tags/%E5%BB%BA%E6%A8%A1%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降</title>
    <link href="https://sakebow.gitee.io/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>https://sakebow.gitee.io/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</id>
    <published>2020-07-26T15:23:00.000Z</published>
    <updated>2020-09-19T00:02:43.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>你可能又觉得梯度下降是一个完全没有接触过的新词。不过放心，依然能对上。</strong></p><a id="more"></a><h2 id="方向导数和梯度"><a href="#方向导数和梯度" class="headerlink" title="方向导数和梯度"></a>方向导数和梯度</h2><p>在说明怎么进行梯度下降之前，我们需要复习一下方向导数和梯度。</p><p>就拿最简单的两个变量为例：</p><blockquote><p>下图就是一张海拔图。</p><p><img src="https://sakebow.gitee.io/images/机器学习/二元函数梯度下降演示.jpg" alt="下降演示"></p><p>有一天，你乘坐的飞机失事了，在山顶坠毁，只有你一个人活了下来。弹尽粮绝的你几近绝望。但是你看到眼前有一大片水源，你想着找到了水源就能够活下去。所以你决定在你饿倒、冻死、被野兽咬杀之前，<strong>尽快达到山底的水源</strong>，越快越好。在这种紧急情况下，已经<strong>没有时间让你把所有的路全都探索一遍</strong>了，因为你随时可能在山上出事。</p><p>在陡峭的山上，有若干个比较平缓的落脚点。你站在出发的落脚点上，环顾四周，发现了若干能够安全到达的落脚点。于是你在这几个里面选择了最低的一个，跳了过去。接着在下一个落脚点继续寻找更低的落脚点。</p></blockquote><p>这就是“<strong>下降</strong>”，而<strong>梯度</strong>则是选择一条<strong>最优下降方向</strong>的参考。</p><p>所以问题来了，怎么样才能选出<strong>最优下降方向</strong>？如果就只是找遍目力所及的所有落脚点、计算落差，这样当然可行，但是代价太大。所以，我们在这里将使用一定的<strong>数学方法</strong>推算出来。</p><p>首先对于在平面$D$（<em>海平面</em>）上具有连续一阶偏导数的二元函数$z=f(x,y)$（<em>山高计算式</em>）上的任意一点，都有一个向量：</p><script type="math/tex; mode=display">\vec{grad}f(x,y)=\{\frac{\partial f}{\partial x},\frac{\partial f}{\partial y}\}</script><p>又由于方向导数：</p><script type="math/tex; mode=display">\vec{f_L}(x_0,y_0)=({\partial f\over\partial x},{\partial f\over\partial y})\cdot(cos\theta,sin\theta)</script><p>所以，不难得出：</p><blockquote><p>方向导数是二元函数$z=f(x,y)$在各个方向上的变化量，而当方向导数最大的时候，必定是方向导数和梯度方向重合的时候。而<strong>方向导数最大时</strong>，<strong>函数增长最快</strong>；反之亦然，<strong>方向导数最大时的反方向函数减少最快</strong>。</p><p>也就是说，我们在下山的时候唯一需要注意的就是：寻找梯度。</p></blockquote><p>当然我们还有一些需要注意的细节，<strong>下山的速度</strong>就是其中之一，它有个学术名称叫做<strong>学习率（<em><code>learning rate</code></em>）</strong>，多记为$\eta$。当学习率提高的时候，下山的速率就非常快，很快你就会达到一个区域最优解，但也可能因为步长太大忽略了某个关键点甚至可能导致不收敛；而学习率降低的时候，下山速率就非常低，只不过这样的话你能够找到更多的落脚点，从而一定程度上减少了陷入局部最优解的可能。</p><p>拿下面这个图举个例子：</p><p><img src="https://sakebow.gitee.io/images/机器学习/梯度说明图.png" alt="梯度说明"></p><p>很清楚地看到，在$x\in(0,1)$和$x\in(4,5)$的时候，函数下降速度和上升速度都非常快，这个时候可以<strong>适当减少学习率</strong>，就像是<strong>单机FPS游戏里放慢步伐寻找隐藏点</strong>一样，避免错过了任何一个细节。但是过小的步伐会导致收敛速度非常慢，一直再重复无效的学习；而在$x\in(1,4)$的时候，函数不管是上升还是下降都非常缓慢，基本没有什么起伏，可以<strong>适当加快步伐</strong>，就像是<strong>GalGame二刷回收CG</strong>一样，只抓重点，忽略细节。但是过大的步伐会导致你忽略掉$x\in(3,4)$的极值点。</p><p>总的来说，<strong>步长小了可能会陷入局部最优解；而步长大了可能会离最优解越来越远，最终得出错误的结果</strong>。</p><p><em>不过呢，三维我们还能勉强想象，但是拓展到四维、五维等超越3个维度的坐标系时，作为三次元的我们将无法想象那样的存在。所以，我们目前所能做的极限就是讨论三元变量的关系了。有没有三维以上的方向导数解法？当然有，本篇说明的就是<strong>通用解法</strong>，只不过对于三维以上的数据就<strong>无法说明几何意义</strong>了。</em></p><h2 id="梯度下降是什么"><a href="#梯度下降是什么" class="headerlink" title="梯度下降是什么"></a>梯度下降是什么</h2><p>经过复习，聪明的你应该能够明白，所谓梯度下降即是：</p><ul><li><p>从图像的意义上来看，就可以总结为：任意选取一个落脚点，然后搜索周边看能不能找到更低的落脚点。这个点不出意外的话应该在梯度方向的反方向上。</p></li><li><p>从数学的意义上来看，就可以总结为：任意选取<strong>损失函数</strong>上的一个点，一步一步寻找区域极值，并坚信其中一个极值是全域最小值，逐渐逼近使得<strong>损失函数</strong>的值最小的点。</p></li></ul><p><em>数学的角度听起来有点贪心算法的味道了？有一说一，确实。当然，不出意外的话，极值中确实会有最值；只不过时常会有意外，也就是说，最值不在极值中，而是在边界。</em></p><p>“<strong>不识庐山真面目，只缘身在此山中</strong>”。这也正是贪心算法的“贪心”所在啊，偏偏想要<strong>使用最少的次数碰运气似的找到最优解</strong>。实际上，你朝梯度的反方向看到的“<strong>最低点</strong>”，也仅仅是通过一般的数学计算才出现的<strong>预测的点</strong>，实际最低点甚至可能出现在<strong>任何地方</strong>。虽然异常的尴尬，但这也正是贪心算法想要解决的，不是么？起码7位数的数据遍历起来实在是有点难受啊……</p><h2 id="为什么选择梯度下降"><a href="#为什么选择梯度下降" class="headerlink" title="为什么选择梯度下降"></a>为什么选择梯度下降</h2><p>这个方法不仅用于线性方程求解，而且还适用于机器学习的很多个领域。找到代价函数最小值和各维度的值，同时找出根据很多自变量变化的因变量拟合函数，可以在非常多的方面说明问题，比如<strong>决策</strong>、<strong>推荐</strong>、<strong>预测</strong>、<strong>分类</strong>等等。</p><p>其实最重要的是，他能够用比较低的时间复杂度找到最好的一个解。这对于信息爆炸式增长的今天是非常有必要的。中国14亿人，就算只有一半的网民，也是7亿的并发量；面对这7亿用户的偏好分析，实在是等不起十几天慢慢磨出一份精简的报告。</p><h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><p>好了，现在开始进入正题：梯度下降的步骤。</p><p>我们先不要弄得太复杂，还是老例子：</p><blockquote><p>时间回溯到你研究猫娘食量那会。你确确实实拿到了20万数据，每个数据都是以（年龄，食量）这样的坐标形式出现。这看起来没什么问题，只不过你突然发现猫娘们的食量增长速度在成年之后随着年龄的增长而不断趋于平稳，成年之前却疯狂增长。你觉得线性方程不再适用。这样的函数你似乎希望是对数函数，可是这是不是因为有其他因素的影响？</p><p>于是，你凭着对猫娘疯狂的热爱，开始了第二波数据收集。这次你拿到了年龄(age)、身高(height)、体重(weight)和食量(quantity)四个数据，构成了函数$Q=f(a,h,w)$。</p></blockquote><p>这次涉及了三个维度和一个自变量，虽然复杂了很多，但也勉强能够画出来。只不过梯度下降的图像意义便不再是<strong>下山</strong>了，而是构建一个平面或者瞄准某一个中心。</p><blockquote><p><del>你凭着自己的性癖</del>……你随机选择了一位猫娘，将她的数据使用矩阵形式记录了下来：</p><script type="math/tex; mode=display">neko_0=\left[\begin{matrix}  a_0\\h_0\\w_0\end{matrix}\right]</script><p>紧接着，下一个数据就是：</p><script type="math/tex; mode=display">neko_1=\left[\begin{matrix}  a_1\\h_1\\w_1\end{matrix}\right]=\left[\begin{matrix}  a_0\\h_0\\w_0\end{matrix}\right]-\eta\left[\begin{matrix}{\partial\over\partial a} f(a_0,h_0,w_0)\\{\partial\over\partial h} f(a_0,h_0,w_0)\\{\partial\over\partial w} f(a_0,h_0,w_0)\end{matrix}\right]</script></blockquote><p>当然，$neko_1$是有实际数值的，而使用<code>学习率</code>、$neko_0$和<code>损失函数的偏导数</code>计算出来的$neko_1$并不是真实的数据。那么使用哪一个数据？当然是都使用。因为现在猫娘的食量和年龄变成了非线性关系，也就是说在<strong>x取值范围同样长的情况下</strong>，不同取值范围中函数的<strong>变化量不一样</strong>，部分密集，部分稀疏。所以应对<strong>密集部分</strong>我们需要<strong>加大学习率</strong>，尽快过渡到稀疏部分，从而减少重复学习的时间；应对<strong>稀疏部分</strong>我们要<strong>减少学习率</strong>，尽量避免忽略了重要区间的情况。</p><blockquote><p>好了，现在你通过数学计算拿到了$neko_1$，于是你准备获取$neko_2$。同样的，代入公式：</p><script type="math/tex; mode=display">neko_2=\left[\begin{matrix}  a_2\\h_2\\w_2\end{matrix}\right]=\left[\begin{matrix}  a_1\\h_1\\w_1\end{matrix}\right]-\eta\left[\begin{matrix}{\partial\over\partial a} f(a_1,h_1,w_1)\\{\partial\over\partial h} f(a_1,h_1,w_1)\\{\partial\over\partial w} f(a_1,h_1,w_1)\end{matrix}\right]</script><p>经过一番辛苦，你也得出来了这个数据。但是你实在算不下去了，虽然对猫娘包含热情，但是在完全机械的计算过程中，再怎么高涨的热情都会逐渐被消耗殆尽。于是你希望计算机能够帮助运算，便大致写下了一串伪代码：</p><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_i,h_i,w_i)\\  {\partial\over\partial h} f(a_i,h_i,w_i)\\  {\partial\over\partial w} f(a_i,h_i,w_i)\end{matrix}\right]</script><p><code>}</code></p></blockquote><p><em>伪代码中<code>=</code>和<code>:=</code>略有区别，分别是<strong>相等</strong>和<strong>赋值</strong>的意思</em></p><p>这样看似乎没有什么大问题，但是在实际代码实现中，我们尤其需要注意一个很难注意到的细节：</p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p>重要的事情说三遍！如果不是同步的话，<strong>错误的梯度下降</strong>伪代码将会变成这样：</p><blockquote><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display"> temp_a={\partial\over\partial a} f(a_i,h_i,w_i)\cdots①\\ a_i = temp_a\\ temp_h={\partial\over\partial h} f(a_i,h_i,w_i)\cdots②\\ \ldots</script><p><code>}</code></p></blockquote><p>注意到了吗？①式和②式中，$a_i$的值不同了！这是严重的逻辑错误！</p><p><strong>正确的梯度下降</strong>伪代码就应该是这样：</p><blockquote><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display"> temp_a=a_i-\eta{\partial\over\partial a} f(a_i,h_i,w_i)\\ temp_h=h_i-\eta{\partial\over\partial h} f(a_i,h_i,w_i)\\ temp_w=w_i-\eta{\partial\over\partial w} f(a_i,h_i,w_i)\\ a_i = temp_a\\ h_i = temp_h\\ w_i = temp_w</script><p><code>}</code></p></blockquote><p><strong>要么全部修改，要么全不修改</strong>。像极了数据库的<strong>原子性</strong>不是么？</p><p><em>在说明时我强调了是<strong>错误的梯度下降伪代码</strong>，而不是<strong>错误的伪代码</strong>，这是因为这本来就是一种正确的算法，但不是梯度下降，而是一种其他的什么代码。这就要各位读者继续读下去来寻找正确答案了。</em></p><p>没错，这就是通用解法，无论多少维，用这个矩阵解法都会有一个结果。随着学习的进行，导数或者偏导数都会逐渐变化，$\eta$也应当随之而变化。他也有另外一个名字，叫<strong>随机梯度下降</strong>，因为我们刚刚是随机选择初始点、根据梯度寻找下一跳、逐步靠近最优解，所以收敛的时候有很大的随机性，收敛时也会在局部最优附近疯狂抖动。还是用个反常的例子类比：</p><blockquote><p>你的猫娘很生气，你想逗她开心。你身边有很多东西，毛球、老鼠玩具、吉他、钢琴等等。你知道这些她都喜欢，但是你不知道这次怎么样才能让她开心。于是你开始疯狂试探。</p><p>有时候她笑了一下，有时候又挠你几下，有时候保持冷漠……在心情在变好和变坏之间反复横跳。最后，你终于拿出口琴吹起了她喜欢的音乐，把她哄好了。</p></blockquote><p>当然，公式归公式，解法是解法，这两个可以不需要严格意义上保持一致。也就是说，如果$f(a,h,w)$在求导的时候极大地增加了复杂度，就比如$\sqrt{\frac{1+sinx}{1-cosx}}$，我们可以人为地分段、化简，变成方便计算的其他公式，就像吴恩达教授的视频课程中将线性方程$Y=\beta_0+\beta_1x$中待定系数的求解从二次通过求导降为一次。（<em>如果你不清楚为什么是二次，请查看我之前写的<a href="/2020/07/26/人工智能/算法模型/代价函数">代价函数</a>一文</em>）</p><h2 id="一个尴尬的细节"><a href="#一个尴尬的细节" class="headerlink" title="一个尴尬的细节"></a>一个尴尬的细节</h2><p>好了，到了这里，相信各位读者对梯度下降也有一定的了解了。那么，各位有没有注意到一个小小的细节：<strong>我们是为什么需要根据一定的步长移动</strong>？其实是基于“<strong>最初随机选到的点并不是极值点</strong>”这一前提下展开的。那么我们就极端一点，最初就那么运气不好，选到了极值点，会怎么样呢？很显然，极值点的导数或偏导数都是0，最终我们的计算式也就化简成为了：</p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_i,h_i,w_i)\\  {\partial\over\partial h} f(a_i,h_i,w_i)\\  {\partial\over\partial w} f(a_i,h_i,w_i)\end{matrix}\right]=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\times0=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]</script><p>也就是说在这里我们将原地踏步。如果这里并不是全域最优解，而是局部最优解，我们也就像一开始介绍梯度下降是所说的一样：<strong>陷入局部最优解</strong>。这也正是<strong>步长过小</strong>造成的<strong>必然结果</strong>。</p><p>当然，既然有让你陷入局部最优解的情况，也有只能收敛到全局最优解的情况。用比较学术一点的话来说，就是“<strong>目标函数$f(a,h,w)$是一个凹函数</strong>”（<em>国外这里叫<strong>凸函数</strong>，因为看的方向不一样所以叫法不一样</em>），即目标函数的二阶偏导数<strong>恒大于0</strong>。这就导致一阶偏导数最多也就1个零点，即最多有一个极值，原函数要么是个碗，极值即最值；要么就单调，端点是最值。</p><p>很尴尬，也很无奈。当然办法还是有的，也就是<strong>贪心算法</strong>。这就依靠大家打怪升级之后解锁新篇章了，这里只介绍这么多有关梯度的内容。</p><h2 id="批量（Bacth）梯度下降"><a href="#批量（Bacth）梯度下降" class="headerlink" title="批量（Bacth）梯度下降"></a>批量（<code>Bacth</code>）梯度下降</h2><p>我相信你会等不及找答案的。所以这里提供一个临时的解决办法：批量梯度下降。</p><p>为什么是批量？在这里我们每次迭代都会整个训练集都试一遍，然后找到一个局部最优解，然后剪枝，重新遍历整个数据集，然后又找到下一个局部最优解，再剪枝……整个过程将会行走在非常标准的直通线路上。</p><p>当然，缺点也非常明显，整个训练一遍意味着需要大量的内存和大量的计算。如果训练集足够大，内存将无法一次性执行完，要么直接<code>OutOfMemoryException</code>，要么在内存加载的内容全部计算完后等待磁盘经过漫长的时间加载所需的下一批数据。整体来说还是相当的憋屈，所以也在逐渐的弃用这个方法。</p><p>是不是有点能理解了呢？</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在吴恩达教授的课程中，解向量是这么求的：</p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_0,h_0,w_0)\\  {\partial\over\partial h} f(a_0,h_0,w_0)\\  {\partial\over\partial w} f(a_0,h_0,w_0)\end{matrix}\right]</script><p>其中在循环之中不停调整$a_0$、$h_0$、$w_0$的值。实际上这么做的核心目的依然是保持同步，只不过用本篇所讲述的方法是普遍都在使用的方法，因为看起来更简洁。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;你可能又觉得梯度下降是一个完全没有接触过的新词。不过放心，依然能对上。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="https://sakebow.gitee.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="https://sakebow.gitee.io/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加数学公式渲染器</title>
    <link href="https://sakebow.gitee.io/2020/07/26/hexo/hexo%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E5%99%A8/"/>
    <id>https://sakebow.gitee.io/2020/07/26/hexo/hexo%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E5%99%A8/</id>
    <published>2020-07-26T01:47:00.000Z</published>
    <updated>2020-07-26T15:37:39.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>markdown</code>作为非常强大的编辑器，在公式编辑和网页兼容上做的非常不错。但是，还是有非常多没能兼顾的地方，这里就以我正在使用的<code>NexT</code>主题为例详细讲述公式编辑插件的安装。参考教程为<code>ShadowLearner</code>的<a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a>一文。</strong></p><a id="more"></a><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>如果你是<code>Windows</code>系统，直接使用<code>Git Bash</code>的命令行在<code>Hexo</code>根目录下使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>即删除默认的<code>hexo-renderer-marked</code>插件、安装<code>hexo-renderer-kramed</code>插件。</p><p>如果你是<code>Ubuntu</code>系统，请使用超管权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall hexo-renderer-marked --save</span><br><span class="line">sudo npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>否则<code>NodeJS</code>就根本不会卸载或下载。</p><p>当然，其他的教程上也说明了语义冲突，你也可以对根目录下的<code>/node_modules/kramed/lib/rules/inline.js</code>稍加修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var inline = &#123;</span><br><span class="line">  // 第2行修改</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  ...</span><br><span class="line">  // 第20行修改（也可能是21行）</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打开开关"><a href="#打开开关" class="headerlink" title="打开开关"></a>打开开关</h2><p>教程中会有很多说明要打开开关，于是你无脑地复制了教程中的代码，贴在了自己的配置中，然后发现一点动静都没有，怒砸电脑。</p><p>实际上，你应该这么想：既然是有人已经做成了类似<code>SpringBoot</code>这种开箱即用的插件式模块，那么肯定是所有配置都齐全了的。所以，找到根目录下的<code>/themes/next/_config.yml</code>文件，按下<code>Ctrl+F</code>，在弹出的搜索框中输入<code>mathjax</code>查找匹配项，然后你找到了这样几行字：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/hexos/mathjax配置位置.png" alt="查到配置的位置"></p><p>把所有的<code>false</code>改成<code>true</code></p><p><code>enable</code>就是配置<code>mathjax</code>插件的启用与否；而<code>per_page</code>则是确认渲染所有还是逐个查找开启渲染的页进行渲染。</p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>这是在<code>per_page</code>配置为<code>true</code>的基础上才需要做的。如果你删除了这个配置项，那么就是默认选择<code>false</code>；如果你依然保持<code>false</code>，那么所有的页面将会渲染，这一步对你来说没有意义；如果你选择了<code>true</code>，那么你需要在<code>Hexo</code>的标题区（学术一点的称呼是<code>Front-matter</code>）中声明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">这里是标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-26</span> <span class="number">09</span><span class="string">:27</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">自定义分类</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">自定义标签1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">自定义标签2</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>于是，你就可以使用<code>mathjax</code>作为你的公式渲染器了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>使用时即使使用``包裹住依然会被强行转码，所以尽可能在不需要转码的地方使用</p><p>为了给大家看看效果，这里就摆出所有可以使用的公式：</p><blockquote><p>以下内容全部整理自<strong>DanielGavin</strong>的<a href="https://www.jianshu.com/p/e74eb43960a1" target="_blank" rel="noopener"><code>Markdown</code>数学公式语法</a>一文。</p></blockquote><h3 id="单项式"><a href="#单项式" class="headerlink" title="单项式"></a>单项式</h3><ul><li><p>一对<code>$</code>包裹的就是嵌入一行文字内任意位置的公式： $xyz$</p></li><li><p>两对就是单独另起一行的公式：</p></li></ul><script type="math/tex; mode=display">abc</script><ul><li><p>用<code>^</code>标记含有上标的公式：$x^4y$</p></li><li><p>绝对值能够开平方：${\sqrt[2]{x^2}}=|x|$</p></li><li><p>用对数表示时间复杂度：$O(n\log_2(n))$</p></li><li><p>硫代硫酸根的化学式：${S}_{2}O_{3}^{2-}$</p></li></ul><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><ul><li><p>x的<strong>向量</strong>（<em>也叫<strong>矢量</strong></em>）：$\vec{x}$</p></li><li><p>a的<strong>最小二乘估计量</strong>：$\hat{a}$</p></li><li><p>a的<strong>样本平均值</strong>：$\bar{a}$</p></li><li><p>函数$f(x)$的<strong>一阶导数</strong>：$\dot{f(x)}$</p></li><li><p><strong>二阶导数</strong>：$\ddot{f(x)}$</p></li><li><p>$f(x)$在一个范围内<strong>单调递增</strong>。这里的<code>uparrow</code>可以把<code>U</code>大写</p></li><li><p>极限里面的<strong>x趋近于0</strong>：$x\rightarrow0$，也可以用$\to$。两者虽然不同，但是非常相似，看你的喜好。趋近于无穷就是$x\to\infty$</p></li><li><p>限定范围：$\forall x\in\mathbb{R}，s.t.\dot{f(x)}^2=\ddot{f(x)f(x)}$</p></li></ul><h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><ul><li><p>普通的两项相加：$x+y$</p></li><li><p>虚数：$2-\imath$</p></li><li><p>二元虚数：$a\imath+b\jmath$</p></li><li><p>表示误差：$20\pm0.5$</p></li><li><p>分段函数：</p></li></ul><script type="math/tex; mode=display">y=\left\{\begin{aligned}-x+10 &,  &x  &\in  &(-\infty, -10) \\20    &,  &x  &\in  &(-10, 10)      \\x+10  &,  &x  &\in  &(10, +\infty)\end{aligned}\right.</script><ul><li>化学方程式</li></ul><script type="math/tex; mode=display">2H_2O_2 \xlongequal[\Delta]{M_nO_2} 2H_2O+O_2\uparrow</script><ul><li>化学表达式</li></ul><script type="math/tex; mode=display">C_{6}H_{12}O_{6} \xrightarrow{酶} H_2O+CO_2+ATP</script><ul><li><p>常用多项式展开式</p><ul><li><strong>三次方的展开式</strong>：</li></ul></li></ul><script type="math/tex; mode=display">a^3 \pm b^3 = (a \pm b)(a^2 \mp ab + b^2)</script><ul><li><strong>泰勒展开式</strong>：</li></ul><script type="math/tex; mode=display">e^x = 1 + x + {1\over2!}x^2 + {\frac{1}{3!}}x^3</script><ul><li><p>逻辑运算也是毫无压力的：</p><ul><li><p>大于小于等于没有区别，分别是：$x+y&gt;z$、$x+y&lt;z$、$x+y=z$</p></li><li><p>大于等于：$x+y \geq z$。这里由于<code>geq</code>可能会和<code>z</code>连在一起变成歧义，所以<strong>必须要有个空格</strong>避免歧义。下同。</p></li><li><p>小于等于：$x+y \leq z$</p></li><li><p>不等于：$x+y \neq z$</p></li><li><p>不大于等于：$x+y \ngeq z$</p></li><li><p>不小于等于：$x+y \nleq z$</p></li><li><p>约等于：$x+y \approx z$</p></li><li><p>恒等于：$x+y \equiv z$</p></li></ul></li><li><p>集合运算：</p><ul><li><p>表示<strong>元素x</strong>属于<strong>集合y</strong>：$x \in y$</p></li><li><p>表示<strong>元素x</strong>不属于<strong>集合y</strong>：$x \notin y$，当然也可以是$x \not\in y$</p></li><li><p>表示<strong>集合x</strong>的全部元素和<strong>集合y</strong>的部分元素相同：$x \subset y$</p></li><li><p>表示<strong>集合y</strong>的全部元素和<strong>集合x</strong>的部分元素相同：$x \supset y$。和刚刚的区别就是，开口向哪边，哪边就比较大。下同。</p></li><li><p>表示<strong>集合x</strong>的全部元素和<strong>集合y</strong>的一部分元素相同，但<strong>集合y</strong>还有<strong>集合x</strong>所没有的元素：$x \subseteq y$。和<code>subset</code>的区别在于这里明确说明了<strong>集合y</strong>比<strong>集合x</strong>更多，而<code>subset</code>没有说明，可以多，可以等，但不能少。</p></li><li><p>表示<strong>集合x</strong>是<strong>集合y</strong>的真子集，也就是说，<strong>集合y</strong>包含了<strong>集合x</strong>的全部元素，但是<strong>集合y</strong>和<strong>集合x</strong>不能完全相等：$x \subsetneq y$</p></li><li><p>$x \supseteq y$</p></li><li><p>$x \supsetneq y$</p></li><li><p>$x \not\subset y$</p></li><li><p>$x \not\supset y$</p></li><li><p>表示<strong>集合x</strong>和<strong>集合y</strong>所有元素合成新集合，但是要剔除重复的：$x \cup y$</p></li><li><p>表示选出<strong>集合x</strong>和<strong>集合y</strong>相同的元素组成新集合：$x \cap y$</p></li><li><p>表示将<strong>集合x</strong>中的元素选出和<strong>集合y</strong>相同的元素并删除，剩下的组合成新集合：$x \setminus y$</p></li><li><p>实数集合：$\mathbb{R}$</p></li><li><p>自然数集合：$\mathbb{Z}$</p></li><li><p>空集：$\emptyset$</p></li><li><p>同或运算，如：$x \bigodot y$</p></li><li><p>同与运算，如：$x \bigotimes y$</p></li></ul></li></ul><h3 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h3><ul><li>找规律类的给定项数运算，也可以求均值：</li></ul><script type="math/tex; mode=display">\overline{a}=\overbrace{a_1+a_2+ \cdots +a_n}^{200}=E(a)</script><ul><li>求一元极限：</li></ul><script type="math/tex; mode=display">\lim_{x \to 0} (1 + x)^{1 \over x} = e</script><ul><li>求二元极限：</li></ul><script type="math/tex; mode=display">\displaystyle \lim^{x \to \infty}_{y \to \infty}{\frac{(xy)^2}{x^2+y^2}}</script><ul><li>级数求和：</li></ul><script type="math/tex; mode=display">\sum^{n \rightarrow \infty}_{i=1}{\frac{i}{n^2}} = {1\over2}</script><ul><li>级数化简：</li></ul><script type="math/tex; mode=display">\sum^{n \rightarrow \infty}_{i=1}{\frac{i}{n^2}} = \int^1_0{xdx} = \frac{x^2}{2} | ^1_0 = {1\over2}</script><ul><li>偏微分:</li></ul><script type="math/tex; mode=display">\int^{+\infty}_{-\infty}\int^{+\infty}_{-\infty}\frac{\partial f(x,y)}{\partial y} dx + \frac{\partial f(x,y)}{\partial x} dy</script><ul><li>矩阵</li></ul><script type="math/tex; mode=display">\left[\begin{matrix}  a+b   &a      &0      &\cdots &0      &0\\  b     &a+b    &a      &\cdots &0      &0\\  0     &b      &a+b    &\cdots &0      &0\\  \vdots&\vdots &\vdots &\ddots &\vdots &\vdots\\  0     &0      &0      &\cdots &a+b    &a\\  0     &0      &0      &\cdots &b      &a+b\\\end{matrix}\right]_n = \frac{a^{n+1}-b^{n+1}}{a-b}</script><h3 id="希腊符号"><a href="#希腊符号" class="headerlink" title="希腊符号"></a>希腊符号</h3><p><strong>注：<code>代码</code>栏首字母大写只能写出部分字母，而其他和英文字母重复的则不被支持</strong></p><div class="table-container"><table><thead><tr><th>大写</th><th>字符</th><th>代码</th></tr></thead><tbody><tr><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>$\delta$</td><td>\delta</td></tr><tr><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>Z</td><td>$\zeta$</td><td>zeta</td></tr><tr><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>$\theta$</td><td>\theta</td></tr><tr><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>M</td><td>$\mu$</td><td>\mu</td></tr><tr><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>$\xi$</td><td>\xi</td></tr><tr><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>$\pi$</td><td>\pi</td></tr><tr><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>$\phi$</td><td>\phi</td></tr><tr><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>$\omega$</td><td>\omega</td></tr></tbody></table></div><h2 id="最后给点小玩意"><a href="#最后给点小玩意" class="headerlink" title="最后给点小玩意"></a>最后给点小玩意</h2><p>当然，<code>markdown</code>也并不是万能的，因为还有很多类似序号等特殊段首标记无法打出来。<code>Windows10</code>现在自带的微软输入法可能会带这些东西，但是<code>Ubuntu</code>的<code>iBus-pinyin</code>就是没有，很无奈，所以在这里贴出来一些：</p><blockquote><p>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿</p><p>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴</p><p>——摘自<strong>Applied Sciences</strong>的<a href="https://blog.csdn.net/appleyuchi/article/details/84036985" target="_blank" rel="noopener">带圆圈的数字和markdown常用表达式记录(持续更新中)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;markdown&lt;/code&gt;作为非常强大的编辑器，在公式编辑和网页兼容上做的非常不错。但是，还是有非常多没能兼顾的地方，这里就以我正在使用的&lt;code&gt;NexT&lt;/code&gt;主题为例详细讲述公式编辑插件的安装。参考教程为&lt;code&gt;ShadowLearner&lt;/code&gt;的&lt;a href=&quot;https://www.jianshu.com/p/7ab21c7f0674&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在Hexo中渲染MathJax数学公式&lt;/a&gt;一文。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://sakebow.gitee.io/categories/Hexo/"/>
    
    
      <category term="NexT主题踩坑" scheme="https://sakebow.gitee.io/tags/NexT%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
</feed>
