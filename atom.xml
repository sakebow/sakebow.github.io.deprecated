<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakebow的小博客</title>
  
  <subtitle>一条苦苦挣扎的废柴大学狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sakebow.cn/"/>
  <updated>2020-08-18T14:12:09.171Z</updated>
  <id>http://www.sakebow.cn/</id>
  
  <author>
    <name>Sakebow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python基础综合：链表</title>
    <link href="http://www.sakebow.cn/2020/08/17/python/python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <id>http://www.sakebow.cn/2020/08/17/python/python%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%EF%BC%9A%E9%93%BE%E8%A1%A8/</id>
    <published>2020-08-17T14:00:00.000Z</published>
    <updated>2020-08-18T14:12:09.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>因为研究生生涯开始了，所以需要暂时停掉<code>Java</code>的学习，开始使用<code>Python</code>的学习和实践了。于是花了一个小时从完全没学过到实现了最基础的单链表。这里就记录一下。</strong></p><h2 id="链表结构复习"><a href="#链表结构复习" class="headerlink" title="链表结构复习"></a>链表结构复习</h2><p>首先我们回顾链表由什么构成。在<code>C</code>语言中，对链表的定义就是：</p><blockquote><p>链表是一种动态数据结构。它主要是利用动态内存分配、使用结构体并配合之镇来实现的一种数据结构。</p><p>——摘自《C语言程序设计（第三版）》苏小红、王宇颖、孙志岗等编著</p></blockquote><p>也就是说，链表有以下几个特点：</p><ul><li><p>是类似数组的链式结构</p></li><li><p>内存分配并不像数组一样完全连续</p></li><li><p>每个节点使用结构体，每个节点也就有了更高的自由度和更大的存储量</p></li><li><p>下一个节点的位置保存在上一个节点中</p></li></ul><h2 id="Python对比预习"><a href="#Python对比预习" class="headerlink" title="Python对比预习"></a><code>Python</code>对比预习</h2><p>复习了链表之后，让我们再看看<code>Python</code>语言相对于<code>C</code>语言和<code>Java</code>有什么不同：</p><ul><li><p>不需要显式声明<code>private</code>、<code>protected</code>和<code>public</code></p></li><li><p>对象名直接对应对象的地址，这一点和<code>Java</code>非常相似</p></li><li><p>没有括号限制函数体，直接用缩进表示</p></li><li><p><code>None</code>对应<code>C</code>语言和<code>Java</code>的<code>null</code></p></li><li><p><code>self</code>代替了<code>C</code>语言和<code>Java</code>的<code>this</code>指针</p></li><li><p>魔法函数<code>__init__</code>直接定义了结构体的属性构成，而不需要显式定义结构体具体有哪些属性</p></li></ul><p>主要就是这些了。具体的细节我们遇到了再去查<a href="https://www.runoob.com/python3/python3-tutorial.html" target="_blank" rel="noopener"><strong>菜鸟教程</strong></a>就好了。当然，如果能够直接查<a href="https://docs.python.org/zh-cn/3/" target="_blank" rel="noopener"><code>Python</code></a>官方文档更好，毕竟都贴心地给出了中文版（但是点进去每个函数的解释还是<strong>英文</strong>，而且没有实例）。</p><h2 id="从节点的定义开始编码"><a href="#从节点的定义开始编码" class="headerlink" title="从节点的定义开始编码"></a>从节点的定义开始编码</h2><p>那么，为了先熟悉<code>Python</code>的语法，我们先来个小小的结构体试试水：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># 链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data, next, index)</span>:</span></span><br><span class="line">    self.data = data</span><br><span class="line">    self.next = next</span><br><span class="line">    self.index = index</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试节点</span></span><br><span class="line">node = Node(<span class="number">0</span>, <span class="literal">None</span>, <span class="number">0</span>)</span><br><span class="line">print(node.data)</span><br></pre></td></tr></table></figure><p>当然，没有悬念，输出<code>0</code>。</p><p>第一行首先是确认字符编码。默认是<code>UTF-8</code>，根据需要可以更换成别的；其次是使用<code>__init__</code>函数定义一个具有三个属性的类作为结构体；最后的pass则是占位符，表示一个域的结束，相当于<code>}</code>。因为<code>Python</code>直接使用缩进表示是否结束，所以这个仅仅作为个人习惯出现在这里。</p><h2 id="从链表的功能开始完善"><a href="#从链表的功能开始完善" class="headerlink" title="从链表的功能开始完善"></a>从链表的功能开始完善</h2><p>既然我们完成了节点的构造，那么我们一口气把整个链表攻下来吧！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">  <span class="comment"># 初始化 / 不需要参数，自带空的头节点</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.head = <span class="literal">None</span></span><br><span class="line">    self.length = <span class="number">0</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 尾插法插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_tail</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    <span class="comment"># 当尾节点为空时，使用头插法确定尾节点</span></span><br><span class="line">    <span class="keyword">if</span> self.tail <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      self.insert_head(index, data)</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 在尾节点非空时往后接节点</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node = Node(data, <span class="literal">None</span>, index)</span><br><span class="line">      self.tail.next = node</span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 头插法插入数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">insert_head</span><span class="params">(self, index, data)</span>:</span></span><br><span class="line">    node = Node(data, self.head, index)</span><br><span class="line">    self.head = node</span><br><span class="line">    self.length += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 当只有一个元素的时候，确定尾节点</span></span><br><span class="line">    <span class="keyword">if</span> self.length == <span class="number">1</span>:</span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 输出链表 / 从头开始顺序输出</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">output</span><span class="params">(self)</span>:</span></span><br><span class="line">    node = self.head</span><br><span class="line">    <span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">      print(<span class="string">f'<span class="subst">&#123;node.index&#125;</span>: <span class="subst">&#123;node.data&#125;</span>'</span>, end = <span class="string">' '</span>)</span><br><span class="line">      node = node.next</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    print()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">link = Link()</span><br><span class="line">link.insert_head(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">link.insert_tail(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">link.output()</span><br></pre></td></tr></table></figure><p>在这里的<code>self</code>关键字在<strong>函数体内</strong>就是<strong>作为<code>this</code>指针</strong>使用，而作为<strong>参数</strong>出现的时候就是声明该函数是一个<strong>成员函数</strong>。后面有一句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">f'<span class="subst">&#123;node.index&#125;</span>: <span class="subst">&#123;node.data&#125;</span>'</span>, end = <span class="string">' '</span>)</span><br></pre></td></tr></table></figure><p>这是<code>Python</code>3.6以后的新特性，使用<code>f</code>直接将字符串格式化，另外使用<code>end</code>规定输出结尾是空格而不是默认的换行结尾。</p><p>于是，这次的输出就是：<code>1:2 3:4</code>。</p><h2 id="全自动构造链表"><a href="#全自动构造链表" class="headerlink" title="全自动构造链表"></a>全自动构造链表</h2><p>但是这还差一个输入。不想一个字一个字输入的我直接定义了一个随机生成的函数，让链表自己随便生成什么东西。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件开头加上：</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">LETTERS = <span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">LETTERS_LEN = len(LETTERS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Link类中添加成员函数</span></span><br><span class="line"><span class="comment"># 随机生成链表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_link</span><span class="params">(self)</span>:</span></span><br><span class="line">  size = random.randint(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, size):</span><br><span class="line">    self.insert_tail(i + <span class="number">1</span>, LETTERS[random.randint(<span class="number">0</span>, LETTERS_LEN - <span class="number">1</span>)])</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全自动生成</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.random_link()</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>于是每次编译输出都有完全不一样的结果。</p><p>好了，到这里构造链表就没有什么大问题了。</p><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><p>接下来就是很恼人的删除节点了。和<code>C++</code>一样，可以直接使用<code>del</code>命令显式删除对象。值得一提的是，这里显式删除之后只是将内存标记为“<strong>可使用</strong>”，该部分内存并没有被回收。之后<code>GC</code>会过来打扫的。</p><p>为了能够保持数组每次都是一致的，方便查看位置，这里添加了文件读取，能够在每次运行的时候从<code>linklist.csv</code>中读取一模一样的数据。</p><p>数据文件<code>linklist.csv</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">3</span><br><span class="line">1000</span><br><span class="line">7</span><br><span class="line">p</span><br><span class="line">q</span><br><span class="line">h</span><br><span class="line">@</span><br><span class="line">!</span><br><span class="line">,</span><br><span class="line">&gt;</span><br><span class="line">shift</span><br></pre></td></tr></table></figure><p>然后是读取文件并删掉<code>readline</code>方法读取时最后的字符<code>\n</code>误读的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取固定的链表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_file</span><span class="params">(self, filepath)</span>:</span></span><br><span class="line">  index = <span class="number">1</span></span><br><span class="line">  <span class="keyword">with</span> open(filepath, <span class="string">'r'</span>) <span class="keyword">as</span> lines:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">      self.insert_tail(index, line.rstrip(<span class="string">'\n'</span>))</span><br><span class="line">      index += <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>接着是删除某个位置的节点。这里虽然没有难点，但是很难在细节上保持平衡。需要考虑以下几种情况：</p><ul><li><p>链表<strong>没有节点</strong></p></li><li><p>链表<strong>有且仅有</strong>一个节点</p></li><li><p>中间<strong>任意位置</strong>删除</p></li><li><p>要删除的是<strong>第一个元素</strong></p></li><li><p>要删除的是<strong>最后一个元素</strong></p></li></ul><p>如果面面俱到，代码一定会纷繁复杂。所以我们需要根据这些非常神奇的地方巧妙避雷：</p><ul><li><p>如果链表没有节点，<strong>直接结束</strong></p></li><li><p>如果链表仅一个节点，删除时需要同时解除<code>head</code>指针、<code>tail</code>指针，<strong>避免指针指了个寂寞</strong>，然后一脸哀怨的给你报了个错</p></li><li><p>在删除的时候，使用临时指针<code>node</code>指向<code>head</code>指针或者<code>tail</code>指针，并删除<code>node</code>指针的时候，你会发现<code>head</code>和<code>tail</code>实际指向的地址依然存在原有的实例对象。所以实际步骤应当是<strong>先重置原先指向需要删除地址的指针，再删除临时指针</strong></p></li><li><p>删除的时候需要在最后修改链表长度，避免下次使用的时候<strong>索引超限</strong></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用索引删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_index</span><span class="params">(self, index)</span>:</span></span><br><span class="line">  <span class="comment"># 没有节点</span></span><br><span class="line">  <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 删除头</span></span><br><span class="line">  <span class="keyword">elif</span> index == <span class="number">1</span>:</span><br><span class="line">    node = self.head</span><br><span class="line">    self.head = self.head.next</span><br><span class="line">    <span class="keyword">del</span> node</span><br><span class="line">    <span class="comment"># 检查是不是只有这个节点</span></span><br><span class="line">    <span class="comment"># 如果无视tail，head将会为None而tail保持原样</span></span><br><span class="line">    <span class="keyword">if</span> self.head <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      self.tail = self.head</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 中间任意位置删除</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    node = self.get_node(index - <span class="number">1</span>)</span><br><span class="line">    temp = node.next</span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">      node.next = <span class="literal">None</span></span><br><span class="line">      self.tail = node</span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>然后我们来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试删除是否成功</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.read_file(<span class="string">'/home/sakebow/python/linklist/linklist.csv'</span>)</span><br><span class="line">  link.delete_node_by_index(link.length)</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这里要强调的是<code>read_file</code>命令需要<strong>完整的绝对路径</strong>，否则无法读取文件。</p><p>当然，很完美地删掉了最后一个元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: 1 2: 2 3: 3 4: 10 5: 11 6: a 7: b 8: 3 9: 1000 10: 7 11: p 12: q 13: h 14: @ 15: ! 16: , 17: &gt;</span><br></pre></td></tr></table></figure><p>接着我们再来完善匹配所有项的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匹配内容删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_node_by_data</span><span class="params">(self, data)</span>:</span></span><br><span class="line">  <span class="comment"># 强行改为有头节点的链表 / 内容随意，仅需保证next指向head</span></span><br><span class="line">  node = Node(<span class="string">'a'</span>, self.head, <span class="number">0</span>)</span><br><span class="line">  <span class="comment"># 保持标识，最后需要删除</span></span><br><span class="line">  <span class="comment"># 如果head移动了也不要紧，node将会控制下一跳的位置</span></span><br><span class="line">  stay_head = node</span><br><span class="line">  <span class="comment"># 游标，规定temp为必删项，node为上一项</span></span><br><span class="line">  temp = self.head</span><br><span class="line">  <span class="comment"># 遍历链表</span></span><br><span class="line">  <span class="keyword">while</span> temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># 如果要删第一个</span></span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">is</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">      <span class="comment"># 先重置</span></span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="comment"># 检查tail</span></span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">        self.tail = self.head = node.next</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="comment"># 再删除</span></span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      <span class="comment"># 因为下次循环依然需要使用temp，所以重置为node下一跳</span></span><br><span class="line">      temp = node.next</span><br><span class="line">      <span class="comment"># 修改长度</span></span><br><span class="line">      self.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 中间任意项删除</span></span><br><span class="line">    <span class="comment"># 原理同上</span></span><br><span class="line">    <span class="keyword">elif</span> temp <span class="keyword">is</span> <span class="keyword">not</span> self.head <span class="keyword">and</span> temp.data == data:</span><br><span class="line">      node.next = temp.next</span><br><span class="line">      <span class="keyword">if</span> temp <span class="keyword">is</span> self.tail:</span><br><span class="line">        self.tail = node</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">      <span class="keyword">del</span> temp</span><br><span class="line">      temp = node.next</span><br><span class="line">      self.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    <span class="comment"># 如果不匹配，全部下一跳，且长度不变</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      temp = temp.next</span><br><span class="line">      node = node.next</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">  <span class="comment"># 最终删除辅助节点</span></span><br><span class="line">  <span class="keyword">del</span> stay_head</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>那我们来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">  link = Link()</span><br><span class="line">  link.read_file(<span class="string">'/home/sakebow/python/linklist/linklist.csv'</span>)</span><br><span class="line">  <span class="comment"># 因为数据集里面3出现了两次，所以选择3</span></span><br><span class="line">  link.delete_node_by_data(<span class="string">'3'</span>)</span><br><span class="line">  link.output()</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>当然，最终结果把两个3全部删掉了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1: 1 2: 2 4: 10 5: 11 6: a 7: b 9: 1000 10: 7 11: p 12: q 13: h 14: @ 15: ! 16: , 17: &gt; 18: shift</span><br></pre></td></tr></table></figure><p>也没有问题！</p><p>当然你也可以使用各种各样的数据测试。就算是60万行数据也能用$1’32’’$秒给出答案。（<em>实际测量可能和电脑运算能力有误差</em>）</p><p>总之，我认为是相当成功的。如果百万级甚至以上的数据量，如果使用多线程、优化数据结构也是能够解决相当一部分问题的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;因为研究生生涯开始了，所以需要暂时停掉&lt;code&gt;Java&lt;/code&gt;的学习，开始使用&lt;code&gt;Python&lt;/code
      
    
    </summary>
    
    
      <category term="编程基础综合测验" scheme="http://www.sakebow.cn/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%E7%BB%BC%E5%90%88%E6%B5%8B%E9%AA%8C/"/>
    
    
      <category term="Python" scheme="http://www.sakebow.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>回老家的四天假期</title>
    <link href="http://www.sakebow.cn/2020/08/06/diary/%E5%9B%9E%E8%80%81%E5%AE%B6%E7%9A%84%E5%9B%9B%E5%A4%A9%E5%81%87%E6%9C%9F/"/>
    <id>http://www.sakebow.cn/2020/08/06/diary/%E5%9B%9E%E8%80%81%E5%AE%B6%E7%9A%84%E5%9B%9B%E5%A4%A9%E5%81%87%E6%9C%9F/</id>
    <published>2020-08-06T13:48:11.000Z</published>
    <updated>2020-08-09T03:29:43.426Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">如果你坚持要看，请联系我。</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      本文针对老家的一点见闻说一些真心感受。当然，因为是个人偏见所以不对外开放。
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sakebow.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="假期" scheme="http://www.sakebow.cn/tags/%E5%81%87%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>一个普通的案例</title>
    <link href="http://www.sakebow.cn/2020/08/02/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E8%99%9A%E5%B9%BB/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E6%A1%88%E4%BE%8B/"/>
    <id>http://www.sakebow.cn/2020/08/02/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E8%99%9A%E5%B9%BB/%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%E7%9A%84%E6%A1%88%E4%BE%8B/</id>
    <published>2020-08-02T15:07:00.000Z</published>
    <updated>2020-08-09T03:39:06.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>这个只是为了熟悉虚幻引擎的各种操作，要想一个人开发游戏还远得很呐。</strong></p><a id="more"></a><h2 id="基本大地图"><a href="#基本大地图" class="headerlink" title="基本大地图"></a>基本大地图</h2><p>想要做游戏，一个空间是必要的。现不管剧情如何，能够给用户一定的操作空间是必然的。于是我们就需要创建一个足够大的地图，让我们能够尽可能的探索。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这个只是为了熟悉虚幻引擎的各种操作，要想一个人开发游戏还远得很呐。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏开发" scheme="http://www.sakebow.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="虚幻4" scheme="http://www.sakebow.cn/tags/%E8%99%9A%E5%B9%BB4/"/>
    
  </entry>
  
  <entry>
    <title>开发游戏之前想说的话</title>
    <link href="http://www.sakebow.cn/2020/08/02/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F%E4%B9%8B%E5%89%8D%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
    <id>http://www.sakebow.cn/2020/08/02/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/%E5%BC%80%E5%8F%91%E6%B8%B8%E6%88%8F%E4%B9%8B%E5%89%8D%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/</id>
    <published>2020-08-02T14:08:00.000Z</published>
    <updated>2020-08-03T14:18:48.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>开了一个大坑，超级大的大坑。使用的教程是B站上翰者学堂的<a href="https://bilibili.com/BV1fE411S7AW" target="_blank" rel="noopener">零基础学UE4</a>。</strong></p><a id="more"></a><h2 id="开坑的理由"><a href="#开坑的理由" class="headerlink" title="开坑的理由"></a>开坑的理由</h2><p>高中报考计算机专业，就是想做游戏。然后大学玩了四年，发现自己连初心都忘了。所以，现在考上了研究生之后，又回到了比较温柔的大学生活。所以，现在我又重新捡起我的<strong>初心</strong>。</p><p>另外呢，在辗转了很久之后，我发现机器学习依然能够运用到游戏中，也就是游戏开发中用的比较多的<strong>行为树</strong>。</p><p>最后还有个很私人的想法：我想给我以后的家做个特效。虽然明白凭借我的经济实力还远远不够，但是毕竟是梦想嘛，<strong>在梦里想想</strong>。等梦做完了再醒不也挺好的吗（用眼睛逐渐失去高光）</p><p>当然，我很清楚，没有美术功底的我很难走很远。所以，我会尽可能避开这个弱势，像很多独立游戏开发者一样，用有趣的灵魂填补丑陋的外表。</p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>我只是单纯的讨厌又大又笨重的<code>.Net</code>框架，更不喜欢一共将近<strong>50G</strong>的<code>Visual Studio</code>，同样也不喜欢又大又累赘的<code>Windows</code>系统和无理取闹的<code>Windows Defender</code>。</p><p>所以，我找到了今年上半年出了<strong>5</strong>的<code>Unreal Engine</code>。当然，5还没有普及到<code>PC</code>端，写文章的时候最新版依然还是<strong>4.25</strong>。使用这个引擎也没什么别的理由，只是单纯的因为这个开源、渲染都做得很不错，跨平台也做得很好。</p><p>其实我个人更推荐在<code>Ubuntu</code>或者<code>Mac</code>环境下将虚幻官方给的引擎源码编译一下直接用，但是因为我的小联想笔记本没有强强独显，所以只能用弱弱<code>Windows</code>台式。虽然很不爽，但是也只能这样了。不过<code>Windows</code>下安装也更方便，安装好<code>Epic Games</code>之后就能在里面下载了。</p><h2 id="一点点想法"><a href="#一点点想法" class="headerlink" title="一点点想法"></a>一点点想法</h2><p>首先还是先学会<code>UE</code>的基本用法，最起码不能拖研究的后腿。</p><p>在了解了<code>UE</code>基本的行为树设置之后，再开始行为树和机器学习结合铺开。</p><p>当然，能够研究出什么东西，写些论文冲博士当然是最好的。如果运气爆棚，说不定能去军队做一个预演系统；运气很好的话也能进一些游戏工作室做做<code>NPC</code>的设置；再不济这些学到的小玩意还能去个小的游戏公司赚点，虽然不多，起码还是比<code>Java</code>程序员高一个档次的。</p><p>首要目的当然是冲博士。虽然也明白自己是个学术垃圾，但是还是想各种各样的事情都尝试一下。加油吧。正在阅读这篇文章的你，也加油吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;开了一个大坑，超级大的大坑。使用的教程是B站上翰者学堂的&lt;a href=&quot;https://bilibili.com/BV1fE411S7AW&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;零基础学UE4&lt;/a&gt;。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="游戏开发" scheme="http://www.sakebow.cn/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="虚幻4" scheme="http://www.sakebow.cn/tags/%E8%99%9A%E5%B9%BB4/"/>
    
  </entry>
  
  <entry>
    <title>多元梯度函数的另一种打开方式</title>
    <link href="http://www.sakebow.cn/2020/08/01/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.sakebow.cn/2020/08/01/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E5%A4%9A%E5%85%83%E6%A2%AF%E5%BA%A6%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-01T03:25:00.000Z</published>
    <updated>2020-08-16T03:21:14.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>当然，本篇完全有理由和我之前写的<a href="/2020/07/26/人工智能/算法模型/梯度下降/">梯度下降</a>一文并在一起。但是，我还是觉得应当单独拉出来。前一篇<a href="/2020/07/26/人工智能/算法模型/梯度下降/">梯度下降</a>仅仅只是针对梯度下降的原理和流程作了一些阐释，用三个维度的例子说明了一个通用解法。而这里才是实际应用的具体表现，同时也包含很多小技巧。从这里开始，就是动真格的了！</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当然，还是那个海拔图，有高有低，有近有远。你要做的，就是从山顶上下山。环顾四周，一跳接一跳地往山下走。</p><h2 id="代价函数的确定"><a href="#代价函数的确定" class="headerlink" title="代价函数的确定"></a>代价函数的确定</h2><p>当然，代价函数就是我们需要训练的目标函数。只要代价函数最小，我们最后训练的结果就会接近事实。</p><p>可是，光是二元函数构成的三维图就已经包含了很多的不确定性，陷入局部最优解、收敛慢、内存溢出……这都是很无奈但是可控的问题。不如我们逆转过来：既然没有便利，就创造便利。</p><p>这里就还是用你的猫娘作为例子，但是这次代入了更多自变量：</p><blockquote><p>你再次收集了20万猫娘的信息，包括年龄（<code>age</code>）、体重（<code>weight</code>）、身高（<code>height</code>）、最大跳跃距离（<code>distence</code>）、胸围（<code>bust</code>）、腰围（<code>waist</code>）、臀围（<code>hip</code>）、基础社会科学考试分数（<code>score</code>）……</p></blockquote><p>虽然可能还有很多指标，但是现在就先列举这8项。是不是觉得非常的麻烦？而且这下我们连图都画不出来了，甚至无法想象8个自变量如何构成一个解空间，更无法想象涉及8个自变量的函数将会是怎样一个扭曲的形态。</p><p>行，套公式嘛，<strong>矩阵求解</strong>。</p><h2 id="函数化简"><a href="#函数化简" class="headerlink" title="函数化简"></a>函数化简</h2><blockquote><p>你整理出了一张含有$n$行数据的表，其中每一行数据都代表一只猫娘的所有收集到的信息，所以你为每一行整理了一个矩阵：</p><script type="math/tex; mode=display">\left[\begin{matrix}age_i（岁） \\weight_i（千克）\\height_i（米）\\distance_i（米）\\bust_i（厘米）\\waist_i（厘米）\\hip_i（厘米）\end{matrix}\right],i\in\{1,2,3,\ldots,n\}</script></blockquote><p><strong>这里插播一句：</strong></p><p><em>因为面对这样一个生物，对于科研人员来说就是个名副其实的黑匣子：什么都不知道，只知道输入和输出。所以在确定函数关系式的时候相当的麻烦。所以往往是一个个变量分析，优先找出一个个独立不相关的变量，然后分析相关变量的影响。这里就完全不是拟合算法能够做到的了，而是来自不同领域的科研人员齐心协力研究发现最终的出来的结果。这里因为赌的成分过高，并且和梯度下降并没有什么直接的关系，所以直接跳过。现在就直接跳到你找到了每个自变量的精确幂指数和对数底数以及对应的线性关系的情况。</em></p><blockquote><p>然后你又双叒叕凭着你对猫娘的热爱找出了这8个变量的大致关系：</p><script type="math/tex; mode=display">y=f(age,weight,height,distance,bust,waist,hip)\\\Downarrow\\y=\epsilon+\alpha_1a+\alpha_2weight^2+\alpha_3height+\alpha_4d^3+\frac{\alpha_5}{3}(b^2+waist^2+hip^2)</script><p>其中，</p><script type="math/tex; mode=display">\epsilon,\alpha_1,\alpha_2,\alpha_3,\alpha_4,\alpha_5\in\mathbb{R}</script></blockquote><p><em>如果你还有印象，那么你应该记得$\epsilon$服从正态分布$N(0,\sigma^2)$，是随机误差。在一开始决定各种自变量的系数的时候往往会先忽视这个小东西，然后在全部得出结果之后加上以保证函数能够兼容一些“<strong>偶然</strong>”</em></p><blockquote><p>看到这样群魔乱舞的函数，你感觉到背脊发凉。完全没办法想象的解空间、完全无法想象的图形走向，更不用说最终目标的图像意义都无法解释……（<em>当然，这里是为了节目效果如此设计的</em>。）</p><p>这没难倒你。你把式子化为<strong>矩阵</strong>形式表达，就变成了这样：</p><script type="math/tex; mode=display">y=\left[\begin{matrix}  1&\alpha_1&\alpha_2&\alpha_3&\alpha_4&\alpha_5\over3&\alpha_5\over3&\alpha_5\over3\end{matrix}\right]\times\left[\begin{matrix}\epsilon\\age\\weight^2\\height\\distance^3\\bust^2\\waist^2\\hip^2\end{matrix}\right]\\\Downarrow\\y=\left[\begin{matrix}  1&\alpha_1&\alpha_2&\alpha_3&\alpha_4&\alpha_5\over3&\alpha_5\over3&\alpha_5\over3\end{matrix}\right]\\\times\left[\begin{matrix}  \epsilon\\age\\weight\\height\\distance\\bust\\waist\\hip\end{matrix}\right]\\\times\left[\begin{matrix}  \epsilon\\&1\\&&weight\\&&&height\\&&&&distance\\&&&&&bust\\&&&&&&waist\\&&&&&&&hip\end{matrix}\right]\\\times\left[\begin{matrix}  1\\&1\\&&1\\&&&1\\&&&&distance\\&&&&&1\\&&&&&&1\\&&&&&&&1\end{matrix}\right]</script></blockquote><p><em>由于版面问题，这个公式只能勉强这么写着了……</em></p><p><img src="https://sakebow.gitee.io/images/emoji/fuck-off.jpg" width="150" /></p><p>先不管版面了，若稍微简化一些，我们发现系数和幂指数<strong>完全相同</strong>的$bust$、$waist$和$hip$可以<strong>合并</strong>为一个变量$\eta_1$。</p><blockquote><p>再简化一些，更抽象一些，那就成为了：</p><script type="math/tex; mode=display">y=\alpha^T\eta</script><p>其中，$\alpha$是待定系数的矩阵，而$\eta$则是自变量经过各自合适变化之后的矩阵，即：</p><script type="math/tex; mode=display">\alpha^T=\left[\begin{matrix}  \alpha_1&\alpha_2\cdots\alpha_n\end{matrix}\right]_n,\\\eta=\left[\begin{matrix}  \eta_1\\\eta_2\\\vdots\\\eta_n\end{matrix}\right]_n,</script><p>而$\eta_i$则能代表很多，可以是$x_i$，也可以是$(x_i+x_{i+1})^2$等等。</p></blockquote><p>到这里，也就只是单纯的将变量合并，将复杂的公式变成简单易懂的矩阵向量，强行转成2个矩阵维度的<strong>解空间</strong>。当然，我们还是想象不到，只不过大致可以理解为某种类似$x$轴和$y$轴的神奇坐标轴在帮助我们标记位置。这么一想的话，就算是不能想象数轴的样子，也能够想象出解空间是个什么样了，而我们最终要求的目标函数最小值大概也能模模糊湖地猜出来在哪。</p><h2 id="目标函数最终展开"><a href="#目标函数最终展开" class="headerlink" title="目标函数最终展开"></a>目标函数最终展开</h2><p>但是你发现，到这里还是和上次讲到的梯度下降没有区别。没错，后面还有内容。</p><p>由于我们已经将目标函数改成了多元一次函数，所以，我们需要将目标函数彻底展开成为级数的形式，方便我们进一步设计算法。</p><p>还记得我们最初的公式么？</p><script type="math/tex; mode=display">\beta_i=\beta_i-\frac{\alpha}{m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>我们的目标就是让$\frac{1}{m}\sum^n_{i=1}(f(x_i)-y_i)^2$尽可能地小。那么问题就简单了，针对这个函数分析就好了。另：</p><script type="math/tex; mode=display">\phi(\beta)=\frac{1}{m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>求个导：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{2}{m}\sum^n_{i=1}[f(x_i)-y_i]\dot{f(x_i)}</script><p>这里最核心的部分就是$\dot{f(x_i)}$的理解。首先，我们寻找的是有关系数的函数，所以在这里的自变量是$\beta$，所以求导的时候不应当是已经知道具体数值的$x_i$，而是完全未知的$\beta_i$，故求导结果为$x_i$。即：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{2}{m}\sum^n_{i=1}[\dot{f(x_i)}-y_i]x_i</script><p>为了求导不要新增太多没有意义的单项式或多项式，所以我们将系数$2$删掉，也就是将目标函数改为：</p><script type="math/tex; mode=display">\phi(\beta)=\frac{1}{2m}\sum^n_{i=1}(f(x_i)-y_i)^2</script><p>这也就是吴恩达教授的课程中一直使用的函数的由来。求导之后就是：</p><script type="math/tex; mode=display">\dot{\phi(\beta)}=\frac{1}{m}\sum^n_{i=1}[f(x_i)-y_i]x_i</script><p>简单多了，不是么？</p><p>所以我们进而修改一下机器学习的算法：</p><script type="math/tex; mode=display">\theta_j=\theta_j-\frac{\alpha}{m}\sum^n_{i=1}[f(x_i)-y_i]x_i</script><p>到这，似乎就对计算机来说非常的方便了。</p><h2 id="theta-0-和-x-0"><a href="#theta-0-和-x-0" class="headerlink" title="$\theta_0$和$x_0$"></a>$\theta_0$和$x_0$</h2><p>对于一些课程中，你一定会遇到加设待定常数$\theta_0$和固定初始参数$x_0=1$的教师。为什么要这么做？我个人认为和数列添加初项是一样的。有些算法并不能很好地概括初项，所以强行加上去方便计算机处理。有些非常巧合的数列能够不需要初项，这就看怎么处理了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;当然，本篇完全有理由和我之前写的&lt;a href=&quot;/2020/07/26/人工智能/算法模型/梯度下降/&quot;&gt;梯度下降&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="http://www.sakebow.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降</title>
    <link href="http://www.sakebow.cn/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/"/>
    <id>http://www.sakebow.cn/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D/</id>
    <published>2020-07-26T15:23:00.000Z</published>
    <updated>2020-08-01T03:24:09.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>你可能又觉得梯度下降是一个完全没有接触过的新词。不过放心，依然能对上。</strong></p><a id="more"></a><h2 id="方向导数和梯度"><a href="#方向导数和梯度" class="headerlink" title="方向导数和梯度"></a>方向导数和梯度</h2><p>在说明怎么进行梯度下降之前，我们需要复习一下方向导数和梯度。</p><p>就拿最简单的两个变量为例：</p><blockquote><p>下图就是一张海拔图。</p><p><img src="https://sakebow.gitee.io/images/机器学习/二元函数梯度下降演示.jpg" alt="下降演示"></p><p>有一天，你乘坐的飞机失事了，在山顶坠毁，只有你一个人活了下来。弹尽粮绝的你几近绝望。但是你看到眼前有一大片水源，你想着找到了水源就能够活下去。所以你决定在你饿倒、冻死、被野兽咬杀之前，<strong>尽快达到山底的水源</strong>，越快越好。在这种紧急情况下，已经<strong>没有时间让你把所有的路全都探索一遍</strong>了，因为你随时可能在山上出事。</p><p>在陡峭的山上，有若干个比较平缓的落脚点。你站在出发的落脚点上，环顾四周，发现了若干能够安全到达的落脚点。于是你在这几个里面选择了最低的一个，跳了过去。接着在下一个落脚点继续寻找更低的落脚点。</p></blockquote><p>这就是“<strong>下降</strong>”，而<strong>梯度</strong>则是选择一条<strong>最优下降方向</strong>的参考。</p><p>所以问题来了，怎么样才能选出<strong>最优下降方向</strong>？如果就只是找遍目力所及的所有落脚点、计算落差，这样当然可行，但是代价太大。所以，我们在这里将使用一定的<strong>数学方法</strong>推算出来。</p><p>首先对于在平面$D$（<em>海平面</em>）上具有连续一阶偏导数的二元函数$z=f(x,y)$（<em>山高计算式</em>）上的任意一点，都有一个向量：</p><script type="math/tex; mode=display">\vec{grad}f(x,y)=\{\frac{\partial f}{\partial x},\frac{\partial f}{\partial y}\}</script><p>又由于方向导数：</p><script type="math/tex; mode=display">\vec{f_L}(x_0,y_0)=({\partial f\over\partial x},{\partial f\over\partial y})\cdot(cos\theta,sin\theta)</script><p>所以，不难得出：</p><blockquote><p>方向导数是二元函数$z=f(x,y)$在各个方向上的变化量，而当方向导数最大的时候，必定是方向导数和梯度方向重合的时候。而<strong>方向导数最大时</strong>，<strong>函数增长最快</strong>；反之亦然，<strong>方向导数最大时的反方向函数减少最快</strong>。</p><p>也就是说，我们在下山的时候唯一需要注意的就是：寻找梯度。</p></blockquote><p>当然我们还有一些需要注意的细节，<strong>下山的速度</strong>就是其中之一，它有个学术名称叫做<strong>学习率（<em><code>learning rate</code></em>）</strong>，多记为$\eta$。当学习率提高的时候，下山的速率就非常快，很快你就会达到一个区域最优解，但也可能因为步长太大忽略了某个关键点甚至可能导致不收敛；而学习率降低的时候，下山速率就非常低，只不过这样的话你能够找到更多的落脚点，从而一定程度上减少了陷入局部最优解的可能。</p><p>拿下面这个图举个例子：</p><p><img src="https://sakebow.gitee.io/images/机器学习/梯度说明图.png" alt="梯度说明"></p><p>很清楚地看到，在$x\in(0,1)$和$x\in(4,5)$的时候，函数下降速度和上升速度都非常快，这个时候可以<strong>适当减少学习率</strong>，就像是<strong>单机FPS游戏里放慢步伐寻找隐藏点</strong>一样，避免错过了任何一个细节。但是过小的步伐会导致收敛速度非常慢，一直再重复无效的学习；而在$x\in(1,4)$的时候，函数不管是上升还是下降都非常缓慢，基本没有什么起伏，可以<strong>适当加快步伐</strong>，就像是<strong>GalGame二刷回收CG</strong>一样，只抓重点，忽略细节。但是过大的步伐会导致你忽略掉$x\in(3,4)$的极值点。</p><p>总的来说，<strong>步长小了可能会陷入局部最优解；而步长大了可能会离最优解越来越远，最终得出错误的结果</strong>。</p><p><em>不过呢，三维我们还能勉强想象，但是拓展到四维、五维等超越3个维度的坐标系时，作为三次元的我们将无法想象那样的存在。所以，我们目前所能做的极限就是讨论三元变量的关系了。有没有三维以上的方向导数解法？当然有，本篇说明的就是<strong>通用解法</strong>，只不过对于三维以上的数据就<strong>无法说明几何意义</strong>了。</em></p><h2 id="梯度下降是什么"><a href="#梯度下降是什么" class="headerlink" title="梯度下降是什么"></a>梯度下降是什么</h2><p>经过复习，聪明的你应该能够明白，所谓梯度下降即是：</p><ul><li><p>从图像的意义上来看，就可以总结为：任意选取一个落脚点，然后搜索周边看能不能找到更低的落脚点。这个点不出意外的话应该在梯度方向的反方向上。</p></li><li><p>从数学的意义上来看，就可以总结为：任意选取<strong>损失函数</strong>上的一个点，一步一步寻找区域极值，并坚信其中一个极值是全域最小值，逐渐逼近使得<strong>损失函数</strong>的值最小的点。</p></li></ul><p><em>数学的角度听起来有点贪心算法的味道了？有一说一，确实。当然，不出意外的话，极值中确实会有最值；只不过时常会有意外，也就是说，最值不在极值中，而是在边界。</em></p><p>“<strong>不识庐山真面目，只缘身在此山中</strong>”。这也正是贪心算法的“贪心”所在啊，偏偏想要<strong>使用最少的次数碰运气似的找到最优解</strong>。实际上，你朝梯度的反方向看到的“<strong>最低点</strong>”，也仅仅是通过一般的数学计算才出现的<strong>预测的点</strong>，实际最低点甚至可能出现在<strong>任何地方</strong>。虽然异常的尴尬，但这也正是贪心算法想要解决的，不是么？起码7位数的数据遍历起来实在是有点难受啊……</p><h2 id="为什么选择梯度下降"><a href="#为什么选择梯度下降" class="headerlink" title="为什么选择梯度下降"></a>为什么选择梯度下降</h2><p>这个方法不仅用于线性方程求解，而且还适用于机器学习的很多个领域。找到代价函数最小值和各维度的值，同时找出根据很多自变量变化的因变量拟合函数，可以在非常多的方面说明问题，比如<strong>决策</strong>、<strong>推荐</strong>、<strong>预测</strong>、<strong>分类</strong>等等。</p><p>其实最重要的是，他能够用比较低的时间复杂度找到最好的一个解。这对于信息爆炸式增长的今天是非常有必要的。中国14亿人，就算只有一半的网民，也是7亿的并发量；面对这7亿用户的偏好分析，实在是等不起十几天慢慢磨出一份精简的报告。</p><h2 id="随机梯度下降"><a href="#随机梯度下降" class="headerlink" title="随机梯度下降"></a>随机梯度下降</h2><p>好了，现在开始进入正题：梯度下降的步骤。</p><p>我们先不要弄得太复杂，还是老例子：</p><blockquote><p>时间回溯到你研究猫娘食量那会。你确确实实拿到了20万数据，每个数据都是以（年龄，食量）这样的坐标形式出现。这看起来没什么问题，只不过你突然发现猫娘们的食量增长速度在成年之后随着年龄的增长而不断趋于平稳，成年之前却疯狂增长。你觉得线性方程不再适用。这样的函数你似乎希望是对数函数，可是这是不是因为有其他因素的影响？</p><p>于是，你凭着对猫娘疯狂的热爱，开始了第二波数据收集。这次你拿到了年龄(age)、身高(height)、体重(weight)和食量(quantity)四个数据，构成了函数$Q=f(a,h,w)$。</p></blockquote><p>这次涉及了三个维度和一个自变量，虽然复杂了很多，但也勉强能够画出来。只不过梯度下降的图像意义便不再是<strong>下山</strong>了，而是构建一个平面或者瞄准某一个中心。</p><blockquote><p><del>你凭着自己的性癖</del>……你随机选择了一位猫娘，将她的数据使用矩阵形式记录了下来：</p><script type="math/tex; mode=display">neko_0=\left[\begin{matrix}  a_0\\h_0\\w_0\end{matrix}\right]</script><p>紧接着，下一个数据就是：</p><script type="math/tex; mode=display">neko_1=\left[\begin{matrix}  a_1\\h_1\\w_1\end{matrix}\right]=\left[\begin{matrix}  a_0\\h_0\\w_0\end{matrix}\right]-\eta\left[\begin{matrix}{\partial\over\partial a} f(a_0,h_0,w_0)\\{\partial\over\partial h} f(a_0,h_0,w_0)\\{\partial\over\partial w} f(a_0,h_0,w_0)\end{matrix}\right]</script></blockquote><p>当然，$neko_1$是有实际数值的，而使用<code>学习率</code>、$neko_0$和<code>损失函数的偏导数</code>计算出来的$neko_1$并不是真实的数据。那么使用哪一个数据？当然是都使用。因为现在猫娘的食量和年龄变成了非线性关系，也就是说在<strong>x取值范围同样长的情况下</strong>，不同取值范围中函数的<strong>变化量不一样</strong>，部分密集，部分稀疏。所以应对<strong>密集部分</strong>我们需要<strong>加大学习率</strong>，尽快过渡到稀疏部分，从而减少重复学习的时间；应对<strong>稀疏部分</strong>我们要<strong>减少学习率</strong>，尽量避免忽略了重要区间的情况。</p><blockquote><p>好了，现在你通过数学计算拿到了$neko_1$，于是你准备获取$neko_2$。同样的，代入公式：</p><script type="math/tex; mode=display">neko_2=\left[\begin{matrix}  a_2\\h_2\\w_2\end{matrix}\right]=\left[\begin{matrix}  a_1\\h_1\\w_1\end{matrix}\right]-\eta\left[\begin{matrix}{\partial\over\partial a} f(a_1,h_1,w_1)\\{\partial\over\partial h} f(a_1,h_1,w_1)\\{\partial\over\partial w} f(a_1,h_1,w_1)\end{matrix}\right]</script><p>经过一番辛苦，你也得出来了这个数据。但是你实在算不下去了，虽然对猫娘包含热情，但是在完全机械的计算过程中，再怎么高涨的热情都会逐渐被消耗殆尽。于是你希望计算机能够帮助运算，便大致写下了一串伪代码：</p><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_i,h_i,w_i)\\  {\partial\over\partial h} f(a_i,h_i,w_i)\\  {\partial\over\partial w} f(a_i,h_i,w_i)\end{matrix}\right]</script><p><code>}</code></p></blockquote><p><em>伪代码中<code>=</code>和<code>:=</code>略有区别，分别是<strong>相等</strong>和<strong>赋值</strong>的意思</em></p><p>这样看似乎没有什么大问题，但是在实际代码实现中，我们尤其需要注意一个很难注意到的细节：</p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p><strong>这个矩阵形式的写法意味着$a_i$、$h_i$、$w_i$是同步更新的！！！</strong></p><p>重要的事情说三遍！如果不是同步的话，<strong>错误的梯度下降</strong>伪代码将会变成这样：</p><blockquote><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display"> temp_a={\partial\over\partial a} f(a_i,h_i,w_i)\cdots①\\ a_i = temp_a\\ temp_h={\partial\over\partial h} f(a_i,h_i,w_i)\cdots②\\ \ldots</script><p><code>}</code></p></blockquote><p>注意到了吗？①式和②式中，$a_i$的值不同了！这是严重的逻辑错误！</p><p><strong>正确的梯度下降</strong>伪代码就应该是这样：</p><blockquote><p><code>repeat until convergence {</code></p><script type="math/tex; mode=display"> temp_a=a_i-\eta{\partial\over\partial a} f(a_i,h_i,w_i)\\ temp_h=h_i-\eta{\partial\over\partial h} f(a_i,h_i,w_i)\\ temp_w=w_i-\eta{\partial\over\partial w} f(a_i,h_i,w_i)\\ a_i = temp_a\\ h_i = temp_h\\ w_i = temp_w</script><p><code>}</code></p></blockquote><p><strong>要么全部修改，要么全不修改</strong>。像极了数据库的<strong>原子性</strong>不是么？</p><p><em>在说明时我强调了是<strong>错误的梯度下降伪代码</strong>，而不是<strong>错误的伪代码</strong>，这是因为这本来就是一种正确的算法，但不是梯度下降，而是一种其他的什么代码。这就要各位读者继续读下去来寻找正确答案了。</em></p><p>没错，这就是通用解法，无论多少维，用这个矩阵解法都会有一个结果。随着学习的进行，导数或者偏导数都会逐渐变化，$\eta$也应当随之而变化。他也有另外一个名字，叫<strong>随机梯度下降</strong>，因为我们刚刚是随机选择初始点、根据梯度寻找下一跳、逐步靠近最优解，所以收敛的时候有很大的随机性，收敛时也会在局部最优附近疯狂抖动。还是用个反常的例子类比：</p><blockquote><p>你的猫娘很生气，你想逗她开心。你身边有很多东西，毛球、老鼠玩具、吉他、钢琴等等。你知道这些她都喜欢，但是你不知道这次怎么样才能让她开心。于是你开始疯狂试探。</p><p>有时候她笑了一下，有时候又挠你几下，有时候保持冷漠……在心情在变好和变坏之间反复横跳。最后，你终于拿出口琴吹起了她喜欢的音乐，把她哄好了。</p></blockquote><p>当然，公式归公式，解法是解法，这两个可以不需要严格意义上保持一致。也就是说，如果$f(a,h,w)$在求导的时候极大地增加了复杂度，就比如$\sqrt{\frac{1+sinx}{1-cosx}}$，我们可以人为地分段、化简，变成方便计算的其他公式，就像吴恩达教授的视频课程中将线性方程$Y=\beta_0+\beta_1x$中待定系数的求解从二次通过求导降为一次。（<em>如果你不清楚为什么是二次，请查看我之前写的<a href="/2020/07/26/人工智能/算法模型/代价函数">代价函数</a>一文</em>）</p><h2 id="一个尴尬的细节"><a href="#一个尴尬的细节" class="headerlink" title="一个尴尬的细节"></a>一个尴尬的细节</h2><p>好了，到了这里，相信各位读者对梯度下降也有一定的了解了。那么，各位有没有注意到一个小小的细节：<strong>我们是为什么需要根据一定的步长移动</strong>？其实是基于“<strong>最初随机选到的点并不是极值点</strong>”这一前提下展开的。那么我们就极端一点，最初就那么运气不好，选到了极值点，会怎么样呢？很显然，极值点的导数或偏导数都是0，最终我们的计算式也就化简成为了：</p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_i,h_i,w_i)\\  {\partial\over\partial h} f(a_i,h_i,w_i)\\  {\partial\over\partial w} f(a_i,h_i,w_i)\end{matrix}\right]=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\times0=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]</script><p>也就是说在这里我们将原地踏步。如果这里并不是全域最优解，而是局部最优解，我们也就像一开始介绍梯度下降是所说的一样：<strong>陷入局部最优解</strong>。这也正是<strong>步长过小</strong>造成的<strong>必然结果</strong>。</p><p>当然，既然有让你陷入局部最优解的情况，也有只能收敛到全局最优解的情况。用比较学术一点的话来说，就是“<strong>目标函数$f(a,h,w)$是一个凹函数</strong>”（<em>国外这里叫<strong>凸函数</strong>，因为看的方向不一样所以叫法不一样</em>），即目标函数的二阶偏导数<strong>恒大于0</strong>。这就导致一阶偏导数最多也就1个零点，即最多有一个极值，原函数要么是个碗，极值即最值；要么就单调，端点是最值。</p><p>很尴尬，也很无奈。当然办法还是有的，也就是<strong>贪心算法</strong>。这就依靠大家打怪升级之后解锁新篇章了，这里只介绍这么多有关梯度的内容。</p><h2 id="批量（Bacth）梯度下降"><a href="#批量（Bacth）梯度下降" class="headerlink" title="批量（Bacth）梯度下降"></a>批量（<code>Bacth</code>）梯度下降</h2><p>我相信你会等不及找答案的。所以这里提供一个临时的解决办法：批量梯度下降。</p><p>为什么是批量？在这里我们每次迭代都会整个训练集都试一遍，然后找到一个局部最优解，然后剪枝，重新遍历整个数据集，然后又找到下一个局部最优解，再剪枝……整个过程将会行走在非常标准的直通线路上。</p><p>当然，缺点也非常明显，整个训练一遍意味着需要大量的内存和大量的计算。如果训练集足够大，内存将无法一次性执行完，要么直接<code>OutOfMemoryException</code>，要么在内存加载的内容全部计算完后等待磁盘经过漫长的时间加载所需的下一批数据。整体来说还是相当的憋屈，所以也在逐渐的弃用这个方法。</p><p>是不是有点能理解了呢？</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>在吴恩达教授的课程中，解向量是这么求的：</p><script type="math/tex; mode=display">\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]:=\left[\begin{matrix}  a_i\\h_i\\w_i\end{matrix}\right]-\eta\left[\begin{matrix}  {\partial\over\partial a} f(a_0,h_0,w_0)\\  {\partial\over\partial h} f(a_0,h_0,w_0)\\  {\partial\over\partial w} f(a_0,h_0,w_0)\end{matrix}\right]</script><p>其中在循环之中不停调整$a_0$、$h_0$、$w_0$的值。实际上这么做的核心目的依然是保持同步，只不过用本篇所讲述的方法是普遍都在使用的方法，因为看起来更简洁。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;你可能又觉得梯度下降是一个完全没有接触过的新词。不过放心，依然能对上。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="http://www.sakebow.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Hexo添加数学公式渲染器</title>
    <link href="http://www.sakebow.cn/2020/07/26/hexo/hexo%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E5%99%A8/"/>
    <id>http://www.sakebow.cn/2020/07/26/hexo/hexo%E6%B7%BB%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E6%B8%B2%E6%9F%93%E5%99%A8/</id>
    <published>2020-07-26T01:47:00.000Z</published>
    <updated>2020-07-26T15:37:39.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>markdown</code>作为非常强大的编辑器，在公式编辑和网页兼容上做的非常不错。但是，还是有非常多没能兼顾的地方，这里就以我正在使用的<code>NexT</code>主题为例详细讲述公式编辑插件的安装。参考教程为<code>ShadowLearner</code>的<a href="https://www.jianshu.com/p/7ab21c7f0674" target="_blank" rel="noopener">在Hexo中渲染MathJax数学公式</a>一文。</strong></p><a id="more"></a><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>如果你是<code>Windows</code>系统，直接使用<code>Git Bash</code>的命令行在<code>Hexo</code>根目录下使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>即删除默认的<code>hexo-renderer-marked</code>插件、安装<code>hexo-renderer-kramed</code>插件。</p><p>如果你是<code>Ubuntu</code>系统，请使用超管权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm uninstall hexo-renderer-marked --save</span><br><span class="line">sudo npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>否则<code>NodeJS</code>就根本不会卸载或下载。</p><p>当然，其他的教程上也说明了语义冲突，你也可以对根目录下的<code>/node_modules/kramed/lib/rules/inline.js</code>稍加修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var inline = &#123;</span><br><span class="line">  // 第2行修改</span><br><span class="line">  escape: /^\\([`*\[\]()#$+\-.!_&gt;])/,</span><br><span class="line">  ...</span><br><span class="line">  // 第20行修改（也可能是21行）</span><br><span class="line">  em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="打开开关"><a href="#打开开关" class="headerlink" title="打开开关"></a>打开开关</h2><p>教程中会有很多说明要打开开关，于是你无脑地复制了教程中的代码，贴在了自己的配置中，然后发现一点动静都没有，怒砸电脑。</p><p>实际上，你应该这么想：既然是有人已经做成了类似<code>SpringBoot</code>这种开箱即用的插件式模块，那么肯定是所有配置都齐全了的。所以，找到根目录下的<code>/themes/next/_config.yml</code>文件，按下<code>Ctrl+F</code>，在弹出的搜索框中输入<code>mathjax</code>查找匹配项，然后你找到了这样几行字：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax Support</span></span><br><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span> <span class="string">//cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML</span></span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/hexos/mathjax配置位置.png" alt="查到配置的位置"></p><p>把所有的<code>false</code>改成<code>true</code></p><p><code>enable</code>就是配置<code>mathjax</code>插件的启用与否；而<code>per_page</code>则是确认渲染所有还是逐个查找开启渲染的页进行渲染。</p><h2 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h2><p>这是在<code>per_page</code>配置为<code>true</code>的基础上才需要做的。如果你删除了这个配置项，那么就是默认选择<code>false</code>；如果你依然保持<code>false</code>，那么所有的页面将会渲染，这一步对你来说没有意义；如果你选择了<code>true</code>，那么你需要在<code>Hexo</code>的标题区（学术一点的称呼是<code>Front-matter</code>）中声明：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">这里是标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-26</span> <span class="number">09</span><span class="string">:27</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">自定义分类</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">自定义标签1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">自定义标签2</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>于是，你就可以使用<code>mathjax</code>作为你的公式渲染器了。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>使用时即使使用``包裹住依然会被强行转码，所以尽可能在不需要转码的地方使用</p><p>为了给大家看看效果，这里就摆出所有可以使用的公式：</p><blockquote><p>以下内容全部整理自<strong>DanielGavin</strong>的<a href="https://www.jianshu.com/p/e74eb43960a1" target="_blank" rel="noopener"><code>Markdown</code>数学公式语法</a>一文。</p></blockquote><h3 id="单项式"><a href="#单项式" class="headerlink" title="单项式"></a>单项式</h3><ul><li><p>一对<code>$</code>包裹的就是嵌入一行文字内任意位置的公式： $xyz$</p></li><li><p>两对就是单独另起一行的公式：</p></li></ul><script type="math/tex; mode=display">abc</script><ul><li><p>用<code>^</code>标记含有上标的公式：$x^4y$</p></li><li><p>绝对值能够开平方：${\sqrt[2]{x^2}}=|x|$</p></li><li><p>用对数表示时间复杂度：$O(n\log_2(n))$</p></li><li><p>硫代硫酸根的化学式：${S}_{2}O_{3}^{2-}$</p></li></ul><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><ul><li><p>x的<strong>向量</strong>（<em>也叫<strong>矢量</strong></em>）：$\vec{x}$</p></li><li><p>a的<strong>最小二乘估计量</strong>：$\hat{a}$</p></li><li><p>a的<strong>样本平均值</strong>：$\bar{a}$</p></li><li><p>函数$f(x)$的<strong>一阶导数</strong>：$\dot{f(x)}$</p></li><li><p><strong>二阶导数</strong>：$\ddot{f(x)}$</p></li><li><p>$f(x)$在一个范围内<strong>单调递增</strong>。这里的<code>uparrow</code>可以把<code>U</code>大写</p></li><li><p>极限里面的<strong>x趋近于0</strong>：$x\rightarrow0$，也可以用$\to$。两者虽然不同，但是非常相似，看你的喜好。趋近于无穷就是$x\to\infty$</p></li><li><p>限定范围：$\forall x\in\mathbb{R}，s.t.\dot{f(x)}^2=\ddot{f(x)f(x)}$</p></li></ul><h3 id="多项式"><a href="#多项式" class="headerlink" title="多项式"></a>多项式</h3><ul><li><p>普通的两项相加：$x+y$</p></li><li><p>虚数：$2-\imath$</p></li><li><p>二元虚数：$a\imath+b\jmath$</p></li><li><p>表示误差：$20\pm0.5$</p></li><li><p>分段函数：</p></li></ul><script type="math/tex; mode=display">y=\left\{\begin{aligned}-x+10 &,  &x  &\in  &(-\infty, -10) \\20    &,  &x  &\in  &(-10, 10)      \\x+10  &,  &x  &\in  &(10, +\infty)\end{aligned}\right.</script><ul><li>化学方程式</li></ul><script type="math/tex; mode=display">2H_2O_2 \xlongequal[\Delta]{M_nO_2} 2H_2O+O_2\uparrow</script><ul><li>化学表达式</li></ul><script type="math/tex; mode=display">C_{6}H_{12}O_{6} \xrightarrow{酶} H_2O+CO_2+ATP</script><ul><li><p>常用多项式展开式</p><ul><li><strong>三次方的展开式</strong>：</li></ul></li></ul><script type="math/tex; mode=display">a^3 \pm b^3 = (a \pm b)(a^2 \mp ab + b^2)</script><ul><li><strong>泰勒展开式</strong>：</li></ul><script type="math/tex; mode=display">e^x = 1 + x + {1\over2!}x^2 + {\frac{1}{3!}}x^3</script><ul><li><p>逻辑运算也是毫无压力的：</p><ul><li><p>大于小于等于没有区别，分别是：$x+y&gt;z$、$x+y&lt;z$、$x+y=z$</p></li><li><p>大于等于：$x+y \geq z$。这里由于<code>geq</code>可能会和<code>z</code>连在一起变成歧义，所以<strong>必须要有个空格</strong>避免歧义。下同。</p></li><li><p>小于等于：$x+y \leq z$</p></li><li><p>不等于：$x+y \neq z$</p></li><li><p>不大于等于：$x+y \ngeq z$</p></li><li><p>不小于等于：$x+y \nleq z$</p></li><li><p>约等于：$x+y \approx z$</p></li><li><p>恒等于：$x+y \equiv z$</p></li></ul></li><li><p>集合运算：</p><ul><li><p>表示<strong>元素x</strong>属于<strong>集合y</strong>：$x \in y$</p></li><li><p>表示<strong>元素x</strong>不属于<strong>集合y</strong>：$x \notin y$，当然也可以是$x \not\in y$</p></li><li><p>表示<strong>集合x</strong>的全部元素和<strong>集合y</strong>的部分元素相同：$x \subset y$</p></li><li><p>表示<strong>集合y</strong>的全部元素和<strong>集合x</strong>的部分元素相同：$x \supset y$。和刚刚的区别就是，开口向哪边，哪边就比较大。下同。</p></li><li><p>表示<strong>集合x</strong>的全部元素和<strong>集合y</strong>的一部分元素相同，但<strong>集合y</strong>还有<strong>集合x</strong>所没有的元素：$x \subseteq y$。和<code>subset</code>的区别在于这里明确说明了<strong>集合y</strong>比<strong>集合x</strong>更多，而<code>subset</code>没有说明，可以多，可以等，但不能少。</p></li><li><p>表示<strong>集合x</strong>是<strong>集合y</strong>的真子集，也就是说，<strong>集合y</strong>包含了<strong>集合x</strong>的全部元素，但是<strong>集合y</strong>和<strong>集合x</strong>不能完全相等：$x \subsetneq y$</p></li><li><p>$x \supseteq y$</p></li><li><p>$x \supsetneq y$</p></li><li><p>$x \not\subset y$</p></li><li><p>$x \not\supset y$</p></li><li><p>表示<strong>集合x</strong>和<strong>集合y</strong>所有元素合成新集合，但是要剔除重复的：$x \cup y$</p></li><li><p>表示选出<strong>集合x</strong>和<strong>集合y</strong>相同的元素组成新集合：$x \cap y$</p></li><li><p>表示将<strong>集合x</strong>中的元素选出和<strong>集合y</strong>相同的元素并删除，剩下的组合成新集合：$x \setminus y$</p></li><li><p>实数集合：$\mathbb{R}$</p></li><li><p>自然数集合：$\mathbb{Z}$</p></li><li><p>空集：$\emptyset$</p></li><li><p>同或运算，如：$x \bigodot y$</p></li><li><p>同与运算，如：$x \bigotimes y$</p></li></ul></li></ul><h3 id="高级运算"><a href="#高级运算" class="headerlink" title="高级运算"></a>高级运算</h3><ul><li>找规律类的给定项数运算，也可以求均值：</li></ul><script type="math/tex; mode=display">\overline{a}=\overbrace{a_1+a_2+ \cdots +a_n}^{200}=E(a)</script><ul><li>求一元极限：</li></ul><script type="math/tex; mode=display">\lim_{x \to 0} (1 + x)^{1 \over x} = e</script><ul><li>求二元极限：</li></ul><script type="math/tex; mode=display">\displaystyle \lim^{x \to \infty}_{y \to \infty}{\frac{(xy)^2}{x^2+y^2}}</script><ul><li>级数求和：</li></ul><script type="math/tex; mode=display">\sum^{n \rightarrow \infty}_{i=1}{\frac{i}{n^2}} = {1\over2}</script><ul><li>级数化简：</li></ul><script type="math/tex; mode=display">\sum^{n \rightarrow \infty}_{i=1}{\frac{i}{n^2}} = \int^1_0{xdx} = \frac{x^2}{2} | ^1_0 = {1\over2}</script><ul><li>偏微分:</li></ul><script type="math/tex; mode=display">\int^{+\infty}_{-\infty}\int^{+\infty}_{-\infty}\frac{\partial f(x,y)}{\partial y} dx + \frac{\partial f(x,y)}{\partial x} dy</script><ul><li>矩阵</li></ul><script type="math/tex; mode=display">\left[\begin{matrix}  a+b   &a      &0      &\cdots &0      &0\\  b     &a+b    &a      &\cdots &0      &0\\  0     &b      &a+b    &\cdots &0      &0\\  \vdots&\vdots &\vdots &\ddots &\vdots &\vdots\\  0     &0      &0      &\cdots &a+b    &a\\  0     &0      &0      &\cdots &b      &a+b\\\end{matrix}\right]_n = \frac{a^{n+1}-b^{n+1}}{a-b}</script><h3 id="希腊符号"><a href="#希腊符号" class="headerlink" title="希腊符号"></a>希腊符号</h3><p><strong>注：<code>代码</code>栏首字母大写只能写出部分字母，而其他和英文字母重复的则不被支持</strong></p><div class="table-container"><table><thead><tr><th>大写</th><th>字符</th><th>代码</th></tr></thead><tbody><tr><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>$\Gamma$</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>$\Delta$</td><td>$\delta$</td><td>\delta</td></tr><tr><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>Z</td><td>$\zeta$</td><td>zeta</td></tr><tr><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>$\Theta$</td><td>$\theta$</td><td>\theta</td></tr><tr><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>$\Lambda$</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>M</td><td>$\mu$</td><td>\mu</td></tr><tr><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>$\Xi$</td><td>$\xi$</td><td>\xi</td></tr><tr><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>$\Pi$</td><td>$\pi$</td><td>\pi</td></tr><tr><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>$\Sigma$</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>$\Upsilon$</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>$\Phi$</td><td>$\phi$</td><td>\phi</td></tr><tr><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>$\Psi$</td><td>$\psi$</td><td>\psi</td></tr><tr><td>$\Omega$</td><td>$\omega$</td><td>\omega</td></tr></tbody></table></div><h2 id="最后给点小玩意"><a href="#最后给点小玩意" class="headerlink" title="最后给点小玩意"></a>最后给点小玩意</h2><p>当然，<code>markdown</code>也并不是万能的，因为还有很多类似序号等特殊段首标记无法打出来。<code>Windows10</code>现在自带的微软输入法可能会带这些东西，但是<code>Ubuntu</code>的<code>iBus-pinyin</code>就是没有，很无奈，所以在这里贴出来一些：</p><blockquote><p>⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ㉑ ㉒ ㉓ ㉔ ㉕ ㉖ ㉗ ㉘ ㉙ ㉚ ㉛ ㉜ ㉝ ㉞ ㉟ ㊱ ㊲ ㊳ ㊴ ㊵ ㊶ ㊷ ㊸ ㊹ ㊺ ㊻ ㊼ ㊽ ㊾ ㊿</p><p>⓿ ❶ ❷ ❸ ❹ ❺ ❻ ❼ ❽ ❾ ❿⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴</p><p>——摘自<strong>Applied Sciences</strong>的<a href="https://blog.csdn.net/appleyuchi/article/details/84036985" target="_blank" rel="noopener">带圆圈的数字和markdown常用表达式记录(持续更新中)</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;markdown&lt;/code&gt;作为非常强大的编辑器，在公式编辑和网页兼容上做的非常不错。但是，还是有非常多没能兼顾的地方，这里就以我正在使用的&lt;code&gt;NexT&lt;/code&gt;主题为例详细讲述公式编辑插件的安装。参考教程为&lt;code&gt;ShadowLearner&lt;/code&gt;的&lt;a href=&quot;https://www.jianshu.com/p/7ab21c7f0674&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在Hexo中渲染MathJax数学公式&lt;/a&gt;一文。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.sakebow.cn/categories/Hexo/"/>
    
    
      <category term="NexT主题踩坑" scheme="http://www.sakebow.cn/tags/NexT%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>代价函数</title>
    <link href="http://www.sakebow.cn/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0/"/>
    <id>http://www.sakebow.cn/2020/07/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0/</id>
    <published>2020-07-26T01:27:00.000Z</published>
    <updated>2020-07-30T08:52:53.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>这里将会从一个简单的例子引入话题。例子是一个自变量和一个因变量构成的一元一次函数。因为同时兼顾了有趣和浅显，例子也是相当的乱来，能会意就行，吐槽就免了吧。</strong></p><a id="more"></a><h2 id="回归函数"><a href="#回归函数" class="headerlink" title="回归函数"></a>回归函数</h2><p>在说明代价函数前我们先复习回归函数。</p><blockquote><p>现在你突发奇想，想知道<strong>猫娘年龄和猫粮食用量之间的关系</strong>，你跑遍了全世界找了所有的<strong>20万只猫娘</strong>，问到了食量，作了个匿名记录，记下了<strong>年龄</strong>和<strong>食量</strong>的关系，并总结出了一张<strong>散点图</strong>。你看着你家幼小的猫娘，看了看散点表，<strong>预测</strong>出了她这个年龄大概吃多少。当然，你非常疼爱你的猫娘，<strong>不够吃的话肯定还是会加</strong>，<strong>吃不下也会多加调整</strong>。</p><p><img src="https://sakebow.gitee.io/images/background/illust_80183815_20200714_143825.jpg" width="200" alt="pid=143825"></p></blockquote><p><strong>我知道你很想吐槽，现在憋着。</strong></p><p>首先，通过这个例子，我们先重点强调一些细节：</p><ul><li><p>十几万只猫娘是你的<strong>样本容量</strong>，虽然数量不是很大，但是足以说明问题；</p></li><li><p>这里自变量是年龄，因变量是食量，只是一个单纯的<strong>一元一次方程</strong>;</p></li><li><p>虽然能够收集非常多数据，但是你<strong>只能画出散点图</strong>；</p></li><li><p>你需要为你的小猫娘<strong>预测</strong>食量；</p></li></ul><p>明白了这些细节之后，我们应该怎么操作呢？从初中到大学我们学到的<strong>线性回归方程</strong>就是为了这个问题服务的。</p><p>通过散点图，你可以使用一条直线贯穿大部分的点，一些<strong>少有偏离可能是个体差异</strong>，比如活泼、好动、成长期<del>还有发情期</del>等等；同样也一定有<strong>过于偏离</strong>这条直线的散点数据，<strong>少量则有可能是记录错误</strong>，而大量的话要么是<strong>有其他决定条件</strong>，要么是<strong>数学模型选择错误</strong>。<strong>这里我们就假定没有其他条件而且数学模型就是一元一次函数</strong>。</p><p>如果你大学认真学习了《概率论与数理统计》，那么你应该对线性回归方程不陌生。</p><p>于是你熟练地写出：</p><blockquote><p>猫娘的食量<code>Y</code>和猫娘的年龄<code>x</code>之间有线性关系，设</p><p>Y = $\beta_0$ + ${\beta_1}x+\epsilon$，其中$\beta_0$和$\beta_1$是待定系数，$\epsilon$是随机误差，满足$\epsilon$~$N(0,\sigma^2)$</p></blockquote><p>既然$\epsilon$服从正态分布，那么<code>Y</code>呢？</p><p>由于<code>Y</code>与<code>x</code>的关系为线性关系，所以就有：</p><p>$EY=E(\beta_0+{\beta_1}x)=\beta_0+{\beta_1}E(x)$</p><p>所以你接着写下：</p><blockquote><p>依题意，$Y$~$N(\beta_0+{\beta_1}x,\sigma^2)$</p></blockquote><p>你可能会怀疑到这一步能够得出什么。这个只能说在一定的正确率范围内预测这个事实，而不能完完全全的当作必然。</p><p>那么，怎么预测呢？在这个只有离散型数据的图表中，如何才可以制定一个尽可能正确的线性方程呢？这就需要<strong>最小二乘估计</strong>。</p><p>我们先忽略$\epsilon$的影响，因为无法预测；然后将线性方程简化为我们能够预测的样子，并将我们所收集的样本值一一对应进去。所以你写着：</p><script type="math/tex; mode=display">\hat{y_i}=\hat{\beta_0}+\hat{\beta_1}x_i</script><p>需要注意的是，这个是我们的预测函数，而不是实际规律。没人知道实际规律，因为总有这样那样的误差，只能说尽可能的出一个大家都认同的规律。</p><p>代入每一个实际的$x_i$，我们都能获得一个预测的$\hat{y_i}$。而实际的$x_i$却又对应事实成立的$y_i$，两者的差就是偏离度。为了尽可能拟合数据，我们应当尽可能缩小这个偏差。于是，我们准备求出每一组偏差距离，也就是<strong>y坐标差的绝对值</strong>，即$|y_i-\hat{y_i}|$，也就是$|y_i-\beta_0-{\beta_1}x|$，并让他最小。这部分就是高数的<strong>拉格朗日定理</strong>了。</p><p>于是你接着写下：</p><blockquote><p>由20组已知数据组$(x_i,y_i)$，则将x、y设为已知量，令n=200,000，且</p><script type="math/tex; mode=display">L(\beta_0,\beta_1)=\sum^{n}_{i=1}(y_i-\beta_0-{\beta_1}x_i)^2</script><p>分别对$\beta_0$和$\beta_1$求偏导，并令偏导为0，能够得出两个等式：</p><script type="math/tex; mode=display">{\frac{\partial L(\beta_0,\beta_1)}{\partial\beta_0}}=-2\sum^{n}_{i=1}(y_i-\beta_0-{\beta_1}x)=0\cdots①</script><script type="math/tex; mode=display">{\frac{\partial L(\beta_0,\beta_1)}{\partial\beta_1}}=-2\sum^{n}_{i=1}(y_i-\beta_0-{\beta_1}x)=0\cdots②</script><p>解得：</p><script type="math/tex; mode=display">\beta_0=\frac{(\sum^n_{i=1}y_i)(\sum^n_{i=1}x_i^2)-(\sum^n_{i=1}x_i)(\sum^n_{i=1}x_iy_i)}{n(\sum^n_{i=1}x_i^2)-(\sum^n_{i=1}x_i)^2}</script><script type="math/tex; mode=display">\beta_1=\frac{n(\sum^n_{i=1}x_iy_i)-(\sum^n_{i=1}x_i)(\sum^n_{i=1}y_i)}{n(\sum^n_{i=1}x_i^2)-(\sum^n_{i=1}x_i)^2}</script></blockquote><p>相信你解到这一步的时候都快疯掉了，直接看答案的估计也蒙圈了。你放心，这玩意在2020年绝对不会靠人算，如果真的碰到了那也只能祝你好运了。</p><p>不过就算是这种算式也是能够简化到一定地步的。别忘了还有这些：</p><blockquote><p>记$\bar{x}=\frac{\sum^n_{i=1}x_i}{n}$，$\bar{y}=\frac{\sum^n_{i=1}y_i}{n}$</p><p>整理得：</p><script type="math/tex; mode=display">\hat{\beta_1}=\frac{\sum^n_{i=1}x_iy_i-n\bar{x}\bar{y}}{\sum^n_{i=1}x_i^2-n\bar{x}^2}</script><script type="math/tex; mode=display">\hat{\beta_0}=\bar{y}-\bar{x}\hat{\beta_1}</script></blockquote><p>是不是觉得好看多了？而且这样子也更便于计算。</p><blockquote><p>故代入方程得：</p><script type="math/tex; mode=display">\hat{Y}=\hat{\beta_0}+\hat{\beta_1}x</script></blockquote><p>这下子你就能够用这个方程来预测你的小猫娘会吃多少啦！</p><p><img src="https://sakebow.gitee.io/images/background/illust_79288093_20200714_142659.png" width="250" alt="pid=142659"></p><h2 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h2><p>好了，讲了这么久的回归函数，是不是完全不知道这玩意和代价函数有什么关系？别担心，慢慢来。</p><p>在机器学习中，我们主要希望计算机尽可能贴近事实，也就是尽可能计算最为贴近所有样本的一元线性函数（<em>当然也有可能是别的什么函数，这里以一元线性为例</em>）。</p><p>既然是尽可能贴近，我们就会在其中筛选不贴近的、折衷较为贴近的、选取最为贴近的。于是：</p><ul><li><p>针对<strong>单个样本</strong>，我们规定了<strong>损失函数</strong>，也就是在整个线性规划的过程中产生偏差的量；</p></li><li><p>针对<strong>全部取样样本</strong>，我们规定了<strong>代价函数</strong>，也就是研究在线性规划中整个取样的样本产生偏差的量；</p></li><li><p>针对<strong>最终结果</strong>，我们规定了<strong>目标函数</strong>，也就是在尽可能照顾到所有取样样本之后研究出的最贴近事实的函数</p></li></ul><p>一开始听起来像是三个新词？这么一说明，是不是开始和以前的线性规划对上了？</p><p><strong>损失函数</strong>，其实就是<strong>残差</strong>，以前我们记为$e$；而<strong>代价函数</strong>其实就是残差的绝对值的和，但是因为计算不方便，我们全部平方了，也就是残差的平方和，最后求导再除2就是最终结果；而<strong>目标函数</strong>，就是在<strong>代价函数在取值范围内最小</strong>的情况下拟合出来的函数。</p><p>好了，到这里答案就出来了。代价函数就是求解线性方程时使用的拉格朗日定理构造的函数。之前我们定义的是：</p><script type="math/tex; mode=display">L(\beta_0,\beta_1)=\sum^{n}_{i=1}(y_i-\beta_0-{\beta_1}x_i)^2</script><p>但是同时要兼顾到计算的简便，我们再取一个求导之后不会有系数的函数：</p><script type="math/tex; mode=display">L(\beta_0,\beta_1)=\frac{\sum^{n}_{i=1}(\beta_0+{\beta_1}x_i-y_i)^2}{2n}</script><p>不仅在求导的时候去掉了系数$2$，还避免了符号问题，顺便还提供了一个$\frac{1}{n}$方便计算均值。不得不说，<strong>NICE</strong>！</p><p>你担心这样复杂的算法会拖垮计算机速度？当然不是把这个模型直接搬给计算机去算的啦，这只不过是数学推导过程，最后还是要根据计算机的特点尽可能化简成只有次数不多的加减、涵盖了几乎全部的重复劳动的算法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里将会从一个简单的例子引入话题。例子是一个自变量和一个因变量构成的一元一次函数。因为同时兼顾了有趣和浅显，例子也是相当的乱来，能会意就行，吐槽就免了吧。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="http://www.sakebow.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>模型描述</title>
    <link href="http://www.sakebow.cn/2020/07/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E6%A8%A1%E5%9E%8B%E6%8F%8F%E8%BF%B0/"/>
    <id>http://www.sakebow.cn/2020/07/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/%E6%A8%A1%E5%9E%8B%E6%8F%8F%E8%BF%B0/</id>
    <published>2020-07-25T02:00:00.000Z</published>
    <updated>2020-07-25T12:44:23.422Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>我们在描述算法的时候，往往也会提到“算法模型”这个概念。模型是什么？算法和模型之间有什么联系？</strong></p><a id="more"></a><h2 id="算法的定义"><a href="#算法的定义" class="headerlink" title="算法的定义"></a>算法的定义</h2><p>如果你在大学学过了数据结构，这句话你应该耳熟能详：</p><blockquote><p>通俗地讲，算法是解决问题的一种方法或一个过程。更严格地讲，算法是由若干条指令组成的有穷序列，且满足下述4条性质</p><ul><li><p>输入：0个或者多个外部提供的量作为算法输入项</p></li><li><p>输出：算法应当产生至少一个量作为输出项</p></li><li><p>确定性：组成算法的每条指令是清晰的、没有歧义的</p></li><li><p>有限性：算法中每条指令的执行次数是有限的，执行每条指令的时间也是有限的</p></li></ul><p>——摘自《计算机算法设计与分析》（第五版），王晓东著</p></blockquote><p>那，模型又是什么？</p><h2 id="模型的概念"><a href="#模型的概念" class="headerlink" title="模型的概念"></a>模型的概念</h2><p>我们知道，现在普遍使用的算法例如深度搜索、哈密顿回路等等经典算法都是经过很长时间的发现、假说、论证、优化的不停循环才产生出来，而这个论证的过程就是将算法抽象为一系列的数学模型，然后计算时间复杂度、空间复杂度，最终在比较中筛选更为优秀的。所以我们平常所说的“<strong>模型</strong>”都是指“<strong>数学模型</strong>”。</p><p>也就是说：</p><blockquote><p>模型是一类问题的解题步骤，亦即一类问题的算法。</p><p>——摘自<strong>慕码人2483693</strong>对<a href="http://www.imooc.com/wenda/detail/447305" target="_blank" rel="noopener"><strong>模型与算法之间是什么关系</strong></a>一问的回答</p></blockquote><p>算法是一类问题的抽象解答，而模型则是一系列算法的数学表达。</p><p>如果问题不是一类问题，就单单类似<strong>这只猫接下来要做什么</strong>这样的问题，算法也就失去了存在的必要；同样的，算法如果也不是一系列算法，就单单类似<strong>这只狗吃骨头的流程</strong>这样的算法，模型也没有存在的必要。就像是数据结构中的抽象实体类<code>ADT</code>一样，它的存在就是为了描述一系列相似问题的解法的。</p><p>所以，你能够理解为什么会有<strong>推荐算法模型</strong>了么？因为一系列的<code>APP</code>都将会根据用户的使用情况收集偏好并提高用户体验，这些<code>APP</code>囊括了生活中的方方面面，包括<strong>美食</strong>、<strong>服饰</strong>、<strong>手办</strong>、<strong>模玩</strong>、<strong>家具</strong>还有<strong>电子产品</strong>甚至<strong>性癖</strong>（<del><em>比方说<code>pixiv</code></em></del>）等等。因为类似，这就抽象出来了。</p><h2 id="机器学习中模型的描述"><a href="#机器学习中模型的描述" class="headerlink" title="机器学习中模型的描述"></a>机器学习中模型的描述</h2><p>正如一开始所说的，算法需要有<strong>0个以上的输入</strong>、<strong>1个以上的输出</strong>，机器学习中的算法也是一样的，有着0个以上的<strong>数据集</strong>输入，输出至少一个<strong>结果</strong>。数据集中包括了大量的具有相似数据结构的信息，可以是事实，也可以是虚拟信息；而输出则是根据结果的预测、分类等等。就如下图所示：</p><p><img src="https://sakebow.gitee.io/images/机器学习/模型描述流程图1.png" alt="机器学习模型描述"></p><p>这个机器学习的算法并不是一成不变的，同样也是在不断的实践和训练中逐渐发现最贴近事实、最能概括所有内容的数学模型和算法。</p><p>是不是能理解了？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;我们在描述算法的时候，往往也会提到“算法模型”这个概念。模型是什么？算法和模型之间有什么联系？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="算法模型" scheme="http://www.sakebow.cn/tags/%E7%AE%97%E6%B3%95%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>监督学习</title>
    <link href="http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-24T14:32:00.000Z</published>
    <updated>2020-07-25T01:02:22.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>监督学习，就如同字面意思，有人一直作为督工一直监督机器学习。</strong></p><a id="more"></a><h2 id="监督学习的定义"><a href="#监督学习的定义" class="headerlink" title="监督学习的定义"></a>监督学习的定义</h2><blockquote><p>监督学习是从标记的训练数据来推断一个功能的机器学习任务。训练数据包括一套训练示例。在监督学习中，每个实例都是由一个输入对象（通常为矢量）和一个期望的输出值（也称为监督信号）组成。监督学习算法是分析该训练数据，并产生一个推断的功能，其可以用于映射出新的实例。一个最佳的方案将允许该算法来正确地决定那些看不见的实例的类标签。这就要求学习算法是在一种“合理”的方式从一种从训练数据到看不见的情况下形成。</p><p>摘自<a href="https://baike.baidu.com/item/监督学习/9820109?fr=aladdin" target="_blank" rel="noopener">百度百科：监督学习</a></p></blockquote><p>是不是非常非常拗口而且难懂？这可能是中国学术的悲哀，说的非常的生涩难懂，似乎不是为了给别人看。这里就简单概括一下：</p><blockquote><p>监督学习是给定一组数据作为正确答案输入计算机程序中并完成适当的训练。在训练结束后机器能够在满足一定正确率的情况下进行预测。</p></blockquote><p>举个例子：</p><blockquote><p>你想要一夜暴富，但是你明白你要脚踏实地，所以你开始了一夜暴富的可行性分析。首先你收集了全球富豪的姓名、年龄、婚姻状况、政治身份、民族、家庭住址、教育背景，然后找到了全球富豪祖宗三代的同样的信息。长时间的整理之后，你作出了多张图表，分别是每个人不同属性和现持有资金的离散型数据关系。然后，你得出结论：一夜暴富的可能性几乎没有。</p></blockquote><p>虽然这个例子有点乱来，但是相信大家还是明白这个道理的。就是说，这些全球成功暴富的人，也就是以正确答案输入程序的<strong>训练集</strong>，在经过一段时间的分析，也就是<strong>适当的训练</strong>。为什么是适当呢？如果训练不够，你就会轻易地觉得自己没有希望，最终自闭。这也叫<strong>欠拟合</strong>；如果训练过当，你就会盲目自信，然后赔得内裤都没得穿。这也叫<strong>过拟合</strong>。适当训练之后，你就能够<strong>在一定正确率的情况下预测</strong>自己能不能一夜暴富。当然，这也只是说一定的正确率，是不是实际发生谁也不知道。</p><p>是不是多少明白了一点点呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;监督学习，就如同字面意思，有人一直作为督工一直监督机器学习。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="机器学习" scheme="http://www.sakebow.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>非监督学习</title>
    <link href="http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E9%9D%9E%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</id>
    <published>2020-07-24T14:32:00.000Z</published>
    <updated>2020-07-25T01:43:07.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>非监督学习，就如同字面意思，没有人监督的，也就是机器自学。</strong></p><a id="more"></a><h2 id="非监督学习的定义"><a href="#非监督学习的定义" class="headerlink" title="非监督学习的定义"></a>非监督学习的定义</h2><blockquote><p>现实生活中常常会有这样的问题：缺乏足够的先验知识，因此难以人工标注类别或进行人工类别标注的成本太高。很自然地，我们希望计算机能代我们完成这些工作，或至少提供一些帮助。根据类别未知(没有被标记)的训练样本解决模式识别中的各种问题，称之为无监督学习。</p><p>——摘自<a href="https://baike.baidu.com/item/无监督学习/810193" target="_blank" rel="noopener">百度百科：无监督学习</a></p></blockquote><p>这个定义似乎比<strong>监督学习</strong>更简单，最起码而言没有涉及过多的理科专有词汇。不过这个定义依然比较抽象，我们来举个例子看看：</p><blockquote><p>你是一个大老板，能赚很多钱，但是除了赚钱一无所知。这一天，你拿到了一车黑色液体，里面有酱油，有生抽，有可乐，甚至有枇杷膏。你知道这些是你能够发财致富的东西，可你却<strong>完全不知道它们之间的区别是什么</strong>。于是你请了一队人<strong>工具人</strong>来帮你鉴定分类，他们都是各种菜系的国家级厨师，能够很快根据自己的经验捕捉到这瓶黑色液体的显著特点，并鉴定出这到底是什么；然后给你分好类、装好箱、上好架。最后，你根据他们分好的类别去货架上贴好标签，你的店铺就被<strong>整理得整整齐齐</strong>的了。</p></blockquote><p>听起来这个例子无论是<strong>机器</strong>还是<strong>学习</strong>都扯不上半点关系，但这个例子确实说明了<strong>无监督学习的几个特点</strong>：</p><ul><li><p>缺乏足够的先验知识，因此你没有办法直接给这些黑色液体标注类别；</p></li><li><p>因为量太大，自己标注所需要花费的时间成本太高，只好交给别人，而且是极其有耐心的<strong>工具人</strong>；</p></li></ul><p>那么，我们在这两条特点的基础上继续整理出<strong>无监督学习的使用条件</strong>：</p><ul><li><p>从<strong>庞大的样本</strong>集合中选出一些具有代表性的加以标注用于分类器的训练；</p></li><li><p>先将所有样本自动分为不同的类别，再<strong>由人类对这些类别进行标注</strong>；</p></li><li><p>在<strong>无类别信息</strong>情况下，寻找好的特征；</p></li></ul><p>也就是说，只要这组数据并没有明确分类，只是整个数据集一股脑地全扔给了程序，那就需要使用无监督学习。而如果你已经明确知道了这一大串数据集中哪些是第一类，哪些是第二类，就像是垃圾邮件和星标邮件的明显区别，就是监督学习。</p><p>是不是能理解一点了？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;非监督学习，就如同字面意思，没有人监督的，也就是机器自学。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="机器学习" scheme="http://www.sakebow.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习是什么</title>
    <link href="http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://www.sakebow.cn/2020/07/24/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2020-07-24T09:20:00.000Z</published>
    <updated>2020-07-24T14:35:32.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>这里我参考的教程是吴恩达在2019年录制的课程，在B站上有链接，只不过是全英文，<a href="https://bilibili.com/BV164411S78V" target="_blank" rel="noopener">点我跳转</a>。当然，如果你选择<a href="https://bilibili.com/BV1JE411g7XF" target="_blank" rel="noopener">李宏毅的机器学习课程</a>也可以，因为是中文所以对于更多人来说更亲切一点。</strong></p><a id="more"></a><h2 id="机器学习的定义"><a href="#机器学习的定义" class="headerlink" title="机器学习的定义"></a>机器学习的定义</h2><p><code>Arthur Samuel</code>早在1959年就给即去学习下了个定义：</p><blockquote><p><code>Field of study that gives computers the ability to learn without being explicitly programmed</code></p><p>译：在没有明确设置的情况下是计算机具有学习能力的研究领域</p></blockquote><p>当然，这个定义稍微有些陈旧了。1998年，<code>Tom Mitchell</code>更新了这个定义：</p><blockquote><p><code>A computer program is said to *learn* from experience E with respect to some task T and some performace measure P, if its performace on T, as measured by P, improves with E</code></p><p>译：计算机程序从经验<code>E</code>中学习，解决某一任务<code>T</code>，进行某一性能度量<code>P</code>，通过<code>P</code>测定在<code>T</code>上的表现因经验<code>E</code>而提高。</p></blockquote><p>听起来非常的绕口？当然啦，这是人家的比喻，吴恩达老师在这里给出了一个例子：</p><blockquote><p>你需要参加研究生招生考试，最终考上心仪的大学，走向人生巅峰。在这次考试中，你将会面对很多题目，每个题目可能对应一个甚至多个知识点。为了掌握这些知识点，刷题便是我们现在400万考研的大学生正在做的事。</p><p>那么，针对这个例子，请找出任务<code>T</code>、性能度量<code>P</code>和经验<code>E</code>。</p></blockquote><p>这个例子虽然并不是那么的恰当，但是也相当具有代表性。<strong>考上心仪的大学</strong>就是任务<code>T</code>，而<strong>考试得分</strong>就是性能度量<code>P</code>，<strong>刷题</strong>就是经验<code>E</code>。通过监测你的<strong>得分</strong><code>P</code>，<strong>考上心仪大学</strong>的任务<code>T</code>将会因为你大量的<strong>刷题</strong><code>E</code>而一步一步靠近。</p><p>如果是好不容易考上研究生的你是不是能理解了？</p><p><img src="https://sakebow.gitee.io/images/emoji/滑稽-屑狐狸版.jpg" alt="滑稽"></p><h2 id="机器学习的分类"><a href="#机器学习的分类" class="headerlink" title="机器学习的分类"></a>机器学习的分类</h2><p>机器学习主要就是<strong>监督学习</strong>和<strong>非监督学习</strong>。当然我们还有非常多的，例如强化学习、推荐系统等等。这些都是其他的具体应用了，<strong>监督学习</strong>和<strong>非监督学习</strong>更像是这一切的基础。正所谓：</p><blockquote><p>公欲善其事，必先利其器</p></blockquote><p>当然，如果你是程序大佬，你也可以直接看推荐系统的源代码，并从中学到非常多的算法，积累非常多的经验。但是，正如我曾经的足球教练所说的，完全凭着经验能够做的非常好、非常快。但是，这些人<strong>遇到瓶颈也非常快</strong>，遇到了更强的人将<strong>无法战胜</strong>。这就是<strong>基本功的重要性</strong>。</p><p>在将来的几篇中，我将详细展开这两个基本的机器学习模式。请直接点击链接跳转到相应的教程：<a href="/2020/07/24/机器学习/监督学习/">监督学习</a>、<a href="/2020/07/24/机器学习/非监督学习/">非监督学习</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里我参考的教程是吴恩达在2019年录制的课程，在B站上有链接，只不过是全英文，&lt;a href=&quot;https://bilibili.com/BV164411S78V&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我跳转&lt;/a&gt;。当然，如果你选择&lt;a href=&quot;https://bilibili.com/BV1JE411g7XF&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;李宏毅的机器学习课程&lt;/a&gt;也可以，因为是中文所以对于更多人来说更亲切一点。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="人工智能" scheme="http://www.sakebow.cn/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
      <category term="机器学习" scheme="http://www.sakebow.cn/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>针对SQL语句本身的查询优化</title>
    <link href="http://www.sakebow.cn/2020/07/19/MySQL/%E9%92%88%E5%AF%B9SQL%E8%AF%AD%E5%8F%A5%E6%9C%AC%E8%BA%AB%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>http://www.sakebow.cn/2020/07/19/MySQL/%E9%92%88%E5%AF%B9SQL%E8%AF%AD%E5%8F%A5%E6%9C%AC%E8%BA%AB%E7%9A%84%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</id>
    <published>2020-07-19T14:24:00.000Z</published>
    <updated>2020-08-15T15:42:55.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>现在项目愈加复杂的需求中越来越离不开数据库了。而实际项目中，查询往往占绝大多数。所以查询的优化是整个项目的关键。</strong></p><a id="more"></a><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>在我之前写的<a href="/2020/07/29/MySQL/SQL基础/">SQL基础</a>中，描述了<code>SQL</code>语句的执行顺序，还是那个手办的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物</span><br><span class="line"><span class="keyword">FROM</span> 手办表, 番剧表</span><br><span class="line"><span class="keyword">WHERE</span> 手办表.对应人物 = 番剧表.出场人物</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 手办表.价格 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>按照之前的顺序，我们一步一步分析：</p><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a><code>FROM</code></h2><p>我们将会把<code>FROM</code>后面跟着的所有的表全部加载到内存。听起来是为了方便筛选数据，但是这么做对于海量数据的表将会是毁灭性的。就单纯的像学生管理系统的学生表，涉及姓名、密码、民族、政治面貌、入学时间、毕业时间、奖惩记录等等可能上百个字段，几万行数据，相当的消耗内存。如果真的是联立表，推荐使用<code>JOIN</code>进行联立。</p><h2 id="JOIN-amp-ON"><a href="#JOIN-amp-ON" class="headerlink" title="JOIN&amp;ON"></a><code>JOIN</code>&amp;<code>ON</code></h2><p><code>ON</code>将会在联立两个表的数据之前仅加载一张表的数据，然后另一张表通过一定的条件合并到第一张表中，相对于直接联立会减小很多压力。所以，本例中的<code>SQL</code>语句可以修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物</span><br><span class="line"><span class="keyword">FROM</span> 番剧表</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 手办表</span><br><span class="line"><span class="keyword">ON</span> 手办表.对应人物 = 番剧表.出场人物</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 手办表.价格 <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>虽然在本例中查询出来的结果是一样的，但是查询过程略有不同：<code>LEFT JOIN</code>会保留左表所有数据，即使没有匹配成功也会显示，<code>RIGHT JOIN</code>则是保留右表；两者在查询时间上也略有区别，但是这里数据实在太少，区别不明显。如果是查询中国街道表将会有非常明显的变化。</p><h2 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a><code>WHERE</code></h2><p><code>WHERE</code>作为筛选条件，虽然说没有非常明显的优化方式，但是还是想说：尽量少用字符串作为匹配条件。在匹配的时候往往会整个串遍历，时间复杂度最少也是<code>KMP</code>算法的$O(m+n)$，而数字则为$O(1)$，相对来说会少一个复杂度。不过如果字符串很短，例如学号、教工号这类不超过15个字符的就随意了。</p><h2 id="GROUP-BY-amp-HAVING"><a href="#GROUP-BY-amp-HAVING" class="headerlink" title="GROUP BY&amp;HAVING"></a><code>GROUP BY</code>&amp;<code>HAVING</code></h2><p><code>GROUP BY</code>和<code>HAVING</code>作为分组条件没有什么可以优化的了，只能说根据业务需求进行调整。</p><h2 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a><code>SELECT</code></h2><p><code>SELECT</code>将会从内存中选择列，这没什么争议。但是如果使用<code>*</code>作为属性列表将会让系统首先查找哪些字段符合条件，是极其消耗资源的方法。哪怕表内几百的字段都是需要查询的，最好也要一个个写上去。</p><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a><code>DISTINCT</code></h2><p>只是普通的剔除重复的，因为大量重复的情况很少出现，所以如果不是为了特殊业务有或无都没什么。</p><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a><code>ORDER BY</code></h2><p>正如我们在<a href="/2020/07/29/MySQL/SQL基础/">SQL基础</a>中说明的一样，数据库会根据<strong>索引</strong>优化树形结构。所以，排序的优化就转变为了索引的优化。这就是另外一门学问了。</p><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><p>看起来和<code>SQL</code>语句完全没有关系，实际上正如上面<code>ORDER BY</code>一栏所述，优化结构使得查询更为便捷也是优化的一种。</p><p><code>MySQL</code>支持的最大索引数量是<strong>57</strong>个，但是实际上最好还是不超过<strong>5</strong>个，因为过多的索引不便于表结构专门针对某一个字段优化，正所谓“<strong>过犹不及</strong>”。</p><p>索引优化并没有一个定性公式，而是根据需求和实际不断权衡、各取利弊，最终达到极限。依然举个有些乱来的例子：</p><blockquote><p>你找到了一家手办店。你相当的喜欢这里面的手办，每一款都非常好看。但是因为你当前的经济能力由不得你全都要，只能购买其中最喜欢的几个。所以店长专门为整个手办店创建了索引。</p><p>说是创建索引，实际上也是根据番剧名称重新分类、重新整理数据结构而已。于是你在找你喜欢的手办（<em>数据库查询</em>）的过程中，你发现你头顶有一些标牌，标明了哪些区域是哪些番剧（<em>根据番剧创建的索引</em>）。</p><p>于是你根据这些标语找到了《Re:从零开始的异世界生活》。</p><p>但是蕾姆人气实在是太高了，魔术师、泳装、女仆装、便装、睡衣装、等身手办等等都一一展示在这个区域。于是店长精心整理了一下这里的展示柜，从下到上模型逐渐变得小巧、服饰逐渐变少；从1:4逐渐过渡到1:8（<em>根据模型大小创建的索引</em>），从羽绒服逐渐过渡到浴巾（<em>根据服饰创建的索引</em>）。这么一整理是不是比胡乱摆放的仓库好多了？</p></blockquote><p>是不是有点能理解了呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;现在项目愈加复杂的需求中越来越离不开数据库了。而实际项目中，查询往往占绝大多数。所以查询的优化是整个项目的关键。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://www.sakebow.cn/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="http://www.sakebow.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>突如其来的反思</title>
    <link href="http://www.sakebow.cn/2020/07/19/diary/%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
    <id>http://www.sakebow.cn/2020/07/19/diary/%E7%AA%81%E5%A6%82%E5%85%B6%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D/</id>
    <published>2020-07-19T13:58:00.000Z</published>
    <updated>2020-07-25T07:35:15.228Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">如果你坚持要看，请联系我。</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      只不过是一点点遐想，抛出几个问题然后自己慢慢思索结果而已。没什么值得看的，而且不想公开日记。
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sakebow.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="随笔" scheme="http://www.sakebow.cn/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>docker创建服务器</title>
    <link href="http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-11T12:58:00.000Z</published>
    <updated>2020-11-15T13:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>本文主要参考了<a href="https://blog.csdn.net/qq_21429153/article/details/80867813" target="_blank" rel="noopener">lzssing的“<code>Docker</code>搭建<code>CentOS</code>系统，并配置<code>ssh</code>环境”</a>，并补充了一些相关细节。本篇将按照我的尝试全过程依次排雷，这样也能够让各位看到更清晰的问题解决方案，但是照着做时需要避开明确标注了“不正确”的地方。</strong></p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>无论是什么系统，只需要下载安装<code>Docker</code>就好了。参照我之前写的<a href="/2020/07/11/运维/docker/docker的简介与安装">docker的简介与安装</a>。如果你是<code>Ubuntu</code>系统，那么这些就够了。如果你是<code>Windows</code>系统，你可能还需要一个<a href="https://pan.baidu.com/s/1VFQVelcYuw30nd1B0jXOZA" target="_blank" rel="noopener"><code>XShell</code>（提取码：88kv）</a>用于远程连接。这里就以我使用的<code>Ubuntu</code>系统编写流程，如果你是<code>Windows</code>，你可以选择<code>Docker for Windows</code>并用<code>CMD（管理员）</code>执行同样的命令，也可以选择使用<code>Windows</code>子系统。</p><h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>首先肯定是确保自己进入了超级管理员权限，并使用docker命令下载我们需要的<code>CentOS</code>镜像。为什么是<code>CentOS</code>？因为全都是<code>Ubuntu</code>的话比较容易弄混，所以就用个其他的系统区分一下。</p><p>请求超管权限，输入密码认证之后进入超管权限。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure></p><p><strong>从这里之后便全是CentOS。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos # 拉取镜像</span><br><span class="line">docker run -itd centos /bin/bash # 创建容器运行镜像</span><br><span class="line">docker exec -it 18 /bin/bash # 进入容器操作镜像</span><br></pre></td></tr></table></figure><p>这里需要说明的是，<code>run</code>命令中当我们使用<code>-d</code>作为参数时，容器将支持后台运行。<code>run</code>命令之后便会生成一个<strong>容器id</strong>，我的是：</p><p><code>18b400110fc8772d23016358e60b4b5ff00e3892d1ad7db4bbbc4b6d1bb13e45</code></p><p>这实在是太长了。于是我在确认了没有重复项之后缩减了长度，只写了<code>18</code>，也就是<code>exec</code>命令所示的那样。</p><p><img src="https://sakebow.gitee.io/images/运维/拉取镜像.png" alt="拉取镜像"></p><p>然后我们开始搭建<code>ssh</code>环境，因为需要使用<code>ssh</code>工具进行连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install passwd openssl openssh-server openssh-clients initscripts vim -y # 安装软件</span><br></pre></td></tr></table></figure><p>此处<code>-y</code>代表<strong>确认安装</strong>。这个过程实在太长而且都是一样的输出就不截图了。你担心出错？<strong>放心好了</strong>。只要你不断网，这些输出必定每个人都是一样的。</p><p><img src="https://sakebow.gitee.io/images/运维/各种包已下载完成.png" alt="下载完成"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""</span><br><span class="line">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""</span><br><span class="line">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""</span><br></pre></td></tr></table></figure><p>运行sshd服务一共需要三种密钥，<code>rsa</code>、<code>ecdsa</code>、<code>ed25519</code>。这三种都是<strong>数字签名</strong>的算法，能够保证服务器和客户端之间有能够认证身份的<strong>唯一指定</strong>令牌。在这里就不持续展开了，总之都是<strong>世界级</strong>的加密算法。</p><p>好了，准备工作差不多就到这里了，我们不如先存个档？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit # 从CentOS中退出来，回到超管权限下的Ubuntu</span><br><span class="line"></span><br><span class="line">docker commit -a "sakebow" -m "ssh complete" 18 centos_server/save:v1 # 保存镜像</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/运维/保存修改后的镜像.png" alt="保存镜像"></p><p>既然我们已经保存了镜像，之前使用的<code>18</code>容器就不再需要了，删除了吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 18 # 之前是保持后台运行，现在需要手动关闭容器</span><br><span class="line">docker rm 18 # 删除容器</span><br><span class="line">docker ps -a # 确认容器是否存在</span><br></pre></td></tr></table></figure><p>好了，我们再次使用新的镜像跑一下。</p><p><strong>友情提醒：从现在开始会出现错误情况，我将郑重标明</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 错误示范</span></span><br><span class="line">docker run -itd 79 /bin/bash # 创建容器并运行镜像</span><br><span class="line">docker exec -it da /bin/bash # 进入容器</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/运维/进入新镜像.png" alt="进入新镜像"></p><p>这里的<code>79</code>是<strong>新镜像的id</strong>，而<code>da</code>是<strong>新容器的id</strong>。各位在这一步需要更换为<strong>自己的对应id</strong>。现在，我们已经进入了<code>CentOS</code>系统中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshd.service # 启动服务</span><br></pre></td></tr></table></figure><p>然后，噩梦开始了。这是第一个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@daa9499a8f9f /]# systemctl start sshd.service</span><br><span class="line">System has not been booted with systemd as init system (PID 1). Can't operate.</span><br><span class="line">Failed to connect to bus: Host is down</span><br></pre></td></tr></table></figure><p>就很奇怪。后来在<a href="https://blog.csdn.net/baidu_38558076/article/details/103890319" target="_blank" rel="noopener">baidu_38558076的“System has not been booted with systemd as init system”一文</a>中找到了解决方案：<code>/bin/bash</code>修改为<code>/sbin/init</code>，这样才会注册主线程<code>PID 1</code>。</p><h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exit # 退出失败的容器</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下修改稿1 - 这说明他依然有问题</span></span><br><span class="line">docker ps -a # 确认出错容器</span><br><span class="line">docker stop da # 停掉后台的容器</span><br><span class="line">docker rm da # 删除容器</span><br><span class="line">docker run --privileged=true 94 /sbin/init # 使用不一样的方式创建镜像</span><br><span class="line">docker exec -it 94 /bin/bash # 运行</span><br></pre></td></tr></table></figure><p>截图之前没注意，参数还有顺序要求，闹了很多错误。我也就不回避这些，给大家排个雷。</p><p><img src="https://sakebow.gitee.io/images/运维/修改1.png" alt="排雷式截图：进入新容器"></p><p><code>run</code>命令一定是要<code>--privileged=true</code>在<strong>镜像id</strong>之前。</p><p>再来试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshd.service # 启动服务</span><br><span class="line">ps -e | grep sshd # 查看sshd服务运行情况</span><br></pre></td></tr></table></figure><p>这次没有报错。你有些后怕？放心好了，<code>Linux</code>的哲学就是：“<strong>没有报错就是没有错误！</strong>”相信自己，他不说你有错误你就是没错误。</p><p><img src="https://sakebow.gitee.io/images/运维/成功开启服务.png" alt="成功开启服务"></p><p>我们试着用<code>ssh</code>工具连接一下。另外开一个窗口，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.111 # 这个192.168.1.111是我的IP地址</span><br></pre></td></tr></table></figure><p><strong>好像行不通</strong>。以下是错误信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakebow@sakebow-Lenovo-V310-14IKB:~$ ssh root@192.168.1.111</span><br><span class="line">ssh: connect to host 192.168.1.111 port 22: Connection refused</span><br></pre></td></tr></table></figure><p>为什么？因为<code>Docker</code>是运行在本机的，开的端口就是本机的端口，也就是默认监听<code>22</code>端口。这个端口又是其他机器连接本机的关键，<strong>不允许被占用</strong>，所以直接被拒绝了。</p><p>那怎么搞嘛！<strong>换端口</strong>。</p><h2 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这次是正确的</span></span><br><span class="line"></span><br><span class="line">exit # 同样退出错误的容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同样重开重进</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker stop 94 e5 10</span><br><span class="line">docker rm 94 e5 10</span><br><span class="line">docker run -itd --privileged=true -p 1000:22 79 /sbin/init</span><br><span class="line">docker exec -it be /bin/bash</span><br><span class="line"></span><br><span class="line">systemctl start sshd # 同样在CentOS里面开启服务</span><br></pre></td></tr></table></figure><p>没有错误提示。连接试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.111 -p 1000</span><br></pre></td></tr></table></figure><p>出现了新的对话！</p><p><img src="https://sakebow.gitee.io/images/运维/连接成功.png" alt="连接成功"></p><p>确定继续连接吗？确定的话<code>CentOS</code>（服务器）中的指纹就会保存在<code>Ubuntu</code>（客户机）中，方便下次连接。输入<code>yes</code>录入指纹，也就是以后允许这台机器输入密码认证，这样其他任何机器输入的密码即使是正确的也不会核对；如果选择<code>no</code>将会终止连接，虽然指纹依然在服务器<code>CentOS</code>上，但是客户机<code>Ubuntu</code>没有指纹，将不会核对密码。</p><p>密码正确后，进入服务器。</p><p>到这里全部完成。</p><h2 id="总结正确的全过程"><a href="#总结正确的全过程" class="headerlink" title="总结正确的全过程"></a>总结正确的全过程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">sudo su</span><br><span class="line">docker pull centos # 此处获得mirror_id_1</span><br><span class="line">docker run -itd $&#123;mirror_id_1&#125; /bin/bash # 此处填入你的mirror_id_1，执行后生成container_id_1</span><br><span class="line">docker exec -it $&#123;container_id_1&#125; /bin/bash # 填入你获得的container_id_1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">yum install passwd openssl openssh-server openssh-clients initscripts vim -y</span><br><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""</span><br><span class="line">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""</span><br><span class="line">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""</span><br><span class="line">systemctl start sshd.service # sshd.service可以简写为sshd</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">docker commit -a "$&#123;custom_author&#125;" -m "$&#123;custom_comments&#125;" $&#123;container_id_1&#125; $&#123;custom_mirror_name&#125; # 输入自定义的作者信息、备注信息 和 container_id_1，并获得mirror_id_2</span><br><span class="line">docker stop $&#123;container_id_1&#125; # 输入你的container_id_1</span><br><span class="line">docker rm $&#123;container_id_1&#125; # 输入你的container_id_1</span><br><span class="line">docker ps -a</span><br><span class="line">docker run -itd --privileged=true -p $&#123;custom_port&#125;:22 $&#123;mirror_id_2&#125; /sbin/init # 此处填入你的自定义端口号custom_port，mirror_id_2</span><br><span class="line">ssh root@$&#123;IP_HOST&#125; -p $&#123;port&#125; # 此处填入你的IP_HOST和custom_port</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本文主要参考了&lt;a href=&quot;https://blog.csdn.net/qq_21429153/article/details/80867813&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lzssing的“&lt;code&gt;Docker&lt;/code&gt;搭建&lt;code&gt;CentOS&lt;/code&gt;系统，并配置&lt;code&gt;ssh&lt;/code&gt;环境”&lt;/a&gt;，并补充了一些相关细节。本篇将按照我的尝试全过程依次排雷，这样也能够让各位看到更清晰的问题解决方案，但是照着做时需要避开明确标注了“不正确”的地方。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://www.sakebow.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.sakebow.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker的简介与安装</title>
    <link href="http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-11T09:18:00.000Z</published>
    <updated>2020-07-19T09:16:11.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>简介部分主要参考了<strong>尚硅谷周阳</strong>的<a href="https://bilibili.com/BV1Vs411E7AR" target="_blank" rel="noopener">B站视频</a>，安装部分主要参考了<a href="https://www.cnblogs.com/walker-lin/p/11214127.html" target="_blank" rel="noopener"><code>walker_lin</code>的<code>docker</code>学习（一）<code>ubuntu</code>上安装<code>docker</code>一文</a></p><a id="more"></a><h2 id="第一感觉"><a href="#第一感觉" class="headerlink" title="第一感觉"></a>第一感觉</h2><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/docker.png" alt="docker"></p><p>什么是<code>Docker</code>？<code>Dock</code>是容器的意思，那么<code>Docker</code>也就有容器管理员的意思了。既然是管理员，那么也就有容器的来源、状态和去向三个属性的管理。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a><code>Docker</code>架构</h2><p><code>Docker</code>是一个<code>C/S</code>架构的应用，虽然我们能看到的非常有限，却在设计之初就已经构想了一整套完美的生态。整个生态包括<code>Docker镜像仓库</code>、<code>Docker</code>容器和<code>Docker</code>客户端，这三个分别掌管来源、状态和去向。</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>来源虽说是容器的来源，其实就是说<code>Docker</code>镜像的来源，也就指向<code>Docker</code>庞大的代码仓库。从代码仓库中下载最小限度的镜像之后，在确定运行这些镜像之后，就会自动创建一个容器，并塞入镜像。而这个仓库则是在开发人员和众多社区大佬的共同努力下逐渐丰富起来的一个网站，叫<a href="https://hub.docker.com" target="_blank" rel="noopener"><code>Docker Hub</code></a>。</p><p>听起来就像<strong>超市购物</strong>一样，我在超市里找到了我想要的商品（<em>镜像</em>），然后装进袋子（<em>容器</em>）里。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态普遍只会用到两种，一种是<strong>停止</strong>，另一种是<strong>运行中</strong>。这是两种正确执行之后才会出现的状态，而其他则是<strong>由命令不正确导致空容器</strong>、由<strong>无网络造成的创建失败</strong>等等状态。由于其他状态相当于<strong>错误</strong>，需要被处理，所以就没有一一列出的必要。</p><p>要管理容器状态，其实也就是操作容器，<strong>关闭</strong>、<strong>打开</strong>、<strong>创建</strong>、<strong>删除</strong>四大基本操作，其他的操作都类似这四大操作的<strong>旁支</strong>，比如<strong>后台挂起</strong>，也相当于<strong>打开</strong>。当然，如果遇到了刚刚所说的<strong>错误</strong>，这些<strong>旁支</strong>就<strong>没有效果</strong>了。</p><p>如果要打比方的话，状态就类似守门的大爷，对一个个的停车位是选择<strong>开门</strong>、<strong>关门</strong>、<strong>监视</strong>还是<strong>放任</strong>。</p><h3 id="去向"><a href="#去向" class="headerlink" title="去向"></a>去向</h3><p>去向说的是容器的去向，实际上也就是容器到底是<strong>留存</strong>还是<strong>删除</strong>。无论是<strong>停止</strong>还是<strong>保持运行</strong>，容器都还在，是<strong>留存</strong>；<strong>删除</strong>则是将容器<strong>彻底删除</strong>，在容器运行期间对镜像的<strong>一切修改将不会保存</strong>，但是最初的镜像将会完好地保存下来，因为容器中运行的是镜像的备份。</p><p>这就像是快递检货一样，无论发往哪里，都是<strong>检验合格（<em>确认要用</em>）</strong>；而<strong>检验不合格（<em>确认不用</em>）</strong>将会直接<strong>处理掉（<em>删除</em>）</strong>。这里的合不合格则是由<strong>快递员（<em>开发者</em>）来</strong>决定。</p><h2 id="为什么是Docker"><a href="#为什么是Docker" class="headerlink" title="为什么是Docker"></a>为什么是<code>Docker</code></h2><p><code>Docker</code>能够下载镜像、创建容器并运行镜像。这就像是虚拟机一样，我们去网上下载镜像，然后挂载到机器上，成为虚拟系统。但是这两者完全不相同。</p><p>这里使用<a href="https://www.zhihu.com/question/48174633" target="_blank" rel="noopener">知乎中针对“<code>docker</code>容器与虚拟机有什么区别？”这一问题<code>water Cc</code>给出的回答（3楼）</a>中的图片来说明：</p><p><img src="https://pic1.zhimg.com/80/20006deca0fccda0d536edd626835e9e_720w.jpg?source=1940ef5c" alt="虚拟机和docker的区别"></p><p>我们可以看到，左边是<strong>虚拟机</strong>的架构，而右边是<strong>Docker</strong>的架构。最底下的<code>Server</code>和<code>Host OS</code>合起来构成物理主机，也就是我们平常所用的个人电脑。</p><p>其中，<strong>虚拟机</strong>使用了<code>Hypervisor</code>，全称是<strong>虚拟机监视器</strong>，是一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件。也就是说，我们在针对<strong>虚拟机</strong>中挂载的系统操作的时候，<strong>挂载的系统</strong>监听到了操作，并交给挂载的操作系统处理，然后被<strong>虚拟机监视器</strong>监听到，收集数据后发送给<strong>物理主机</strong>，最终由<strong>物理主机</strong>完成系统调用，最后返还给<strong>挂载的系统</strong>并回显结果。这一整串过程是不是非常复杂？是不是能够理解为什么虚拟机挂载的时候慢一点了？</p><p>而<strong>Docker</strong>就不一样，取消了<strong>Hypervisor</strong>和<strong>挂载的系统</strong>，直接使用对应的基础代码库。这个基础代码库甚至可以不是操作系统，可以是<strong>单纯的某个应用</strong>，比如<code>MySQL</code>、<code>Zookeeper</code>等等，这就在灵活性上提升了一个数量级；其次，取消了<code>Hypervisor</code>能够让<code>Docker</code>运行中容器里的操作直接交给物理主机进行系统调用，速度上非常占优，相应非常迅速。</p><p>但是相对而言两者也同样有利有弊。</p><p>对于虚拟机来说，经过<strong>Hypervisor</strong>和<strong>挂载的系统</strong>能够实现非常完美的隔离性；而仅使用<strong>Docker Engine</strong>运行的几个容器隔离性相对较弱。</p><p>不仅如此，直接将请求传送给物理主机进行系统调用的<strong>Docker</strong>是非常依赖物理主机的架构和操作系统内核的。例如：<code>Windows</code>能够使用<code>Docker</code>运行<code>Windows Server</code>和<code>Linux</code>系统，但是<code>Linux</code>系统则只能够使用<code>Docker</code>运行<code>Linux</code>系统，因为内核完全不支持；而使用<strong>Hypervisor</strong>的<strong>虚拟机</strong>则使用中间件屏蔽了操作系统内核和架构的具体实现，从而使得<strong>虚拟机</strong>能够挂载<code>Windows</code>、<code>Linux</code>甚至<code>MacOS</code>。</p><p>二者差别还是非常大的，但在不同的环境下也各有千秋，开发者们需要根据自己的需求选择合适的实现方法。当然实际生产环境中还是希望能够使用更为轻量级的<code>Docker</code>来实现比较不错的响应速度。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>简介主要介绍了<code>Docker</code>相关，包括生态和优缺点。相信大家已经对<code>Docker</code>有了基本的了解。由于<code>Windows</code>有一键安装<code>Docker</code>的安装包，所以接下来我们就在<code>Ubuntu</code>下安装<code>Docker</code>，就不考虑<code>Windows</code>了。</p><p>首先确认我们要<strong>删除旧版本</strong>（<em>如果没有可以跳过</em>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge docker</span><br><span class="line">sudo apt-get purge docker-ce</span><br><span class="line">sudo apt-get remove -y docker-*</span><br></pre></td></tr></table></figure><p>然后<strong>开始安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntuan安装Docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 - 进入root权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有设置root用户的密码使用如下语句</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置了root用户的密码使用如下语句</span></span><br><span class="line">su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 - 下载必要的包</span></span><br><span class="line">apt-get install \</span><br><span class="line">  apt-transport-https \</span><br><span class="line">  ca-certificates \</span><br><span class="line">  curl gnupg-agent \</span><br><span class="line">  software-properties-common -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2 - 添加国内阿里云docker-ce镜像的GPG-key</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 - 添加国内阿里云docker-ce镜像源</span></span><br><span class="line">add-apt-repository \</span><br><span class="line">  "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta">  $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">  stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4 - 更新包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5 - 安装包</span></span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><code>CentOS</code>安装<code>Docker</code>的方法也附上，你会用到的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS安装Docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 - 下载必要的包</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2 - 配置源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 - 列出所有版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4 - 选择安装版本并填入<span class="variable">$&#123;version&#125;</span></span></span><br><span class="line">yum install docker-ce-$&#123;version&#125; -y</span><br></pre></td></tr></table></figure><p>到这里大致上就<strong>结束</strong>了。我们来检验一下是不是安装好了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果输出是这样的，那么就是安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker version 19.03.12, build 48a66213fe</span><br></pre></td></tr></table></figure><p>当然，这其中的数字和字符串可能每个人选择的版本不同就会显示不一样的结果，这一点无需担心，只要确认能够出现这样的信息就是<strong>安装成功</strong>。</p><p>下面是<strong>安装失败</strong>的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command 'docker' not found, but there are 21 similar ones.</span><br></pre></td></tr></table></figure><p>安装完之后就是使用了。但是由于客户端默认连接的<code>Docker Hub</code>是国外的镜像仓库，所以下载速度非常慢，这里就需要更改默认配置为国内镜像仓库。</p><p><strong>首先是确认用什么仓库</strong>。目前比较好的库就是<strong>Docker CN</strong>、网易、阿里云等等。但是阿里云镜像需要自行申请，手续麻烦而且界面不够人性化，所以我选择网易，也就是<code>http://hub-mirror.c.163.com</code>。</p><p>其次，来<strong>确认<code>Docker</code>服务是否启动</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images # 查看镜像列表，如果报错则服务未启动</span><br><span class="line">systemctl status docker # 系统调用查看服务</span><br></pre></td></tr></table></figure><p><strong>如果没有启动就打开</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker # 安装后第一次运行需要启动服务</span><br></pre></td></tr></table></figure><p>启动之后就会生成<code>/etc/docker</code>文件夹，如果没有请检查是否启动失败。</p><p>在里面添加<code>daemon.json</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line">sudo touch daemon.json</span><br><span class="line">sudo vi daemon.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入文本：</span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["http://hub-mirror.c.163.com"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我是选择了网易镜像，你也可以替换为其他镜像。</p><p>然后拉取速度就非常快了。</p><p><strong>愉快的玩耍吧</strong>！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;简介部分主要参考了&lt;strong&gt;尚硅谷周阳&lt;/strong&gt;的&lt;a href=&quot;https://bilibili.com/BV1Vs411E7AR&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站视频&lt;/a&gt;，安装部分主要参考了&lt;a href=&quot;https://www.cnblogs.com/walker-lin/p/11214127.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;walker_lin&lt;/code&gt;的&lt;code&gt;docker&lt;/code&gt;学习（一）&lt;code&gt;ubuntu&lt;/code&gt;上安装&lt;code&gt;docker&lt;/code&gt;一文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://www.sakebow.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.sakebow.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SQL基础</title>
    <link href="http://www.sakebow.cn/2020/07/09/MySQL/SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://www.sakebow.cn/2020/07/09/MySQL/SQL%E5%9F%BA%E7%A1%80/</id>
    <published>2020-07-09T10:25:00.000Z</published>
    <updated>2020-07-30T15:01:58.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>SQL</code>语句是所有数据库系统没有办法绕开的。与其说是基础，不如说是所有数据库系统遵循的“行业规范”。</strong></p><a id="more"></a><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>因为数据库的数据非常多，内存往往不能满足所有数据的存储，而且当服务器断电后，内存中的所有数据将会立即消失，是非常严重的事故。如果涉及交易，这将会是毁灭性的灾难。</p><p>所以数据往往都是存在硬盘中，也作“<strong>磁盘</strong>”，大容量、信息不随着电的消失而消失，是非常不错的载体。但是速度奇慢，无法在有效时间内回复大量的查询请求。于是，人们发明了<strong>B+树</strong>。</p><p><strong>B+树</strong>的特点就是非叶子节点并不占用内存，只有真正找到了位置并读取数据的时候才有一次磁盘IO，在此之前完全基于内存的操作极大提升了查询速度。而使得数据按照一定规律排列成B+树的就是数据库的<strong>索引</strong>。</p><p>索引能够根据指定的字段重构数据库表用于存储的树形结构，从而能够在一定程度上优化查询，从$O(n)$降到$O(\log(n))$，如果是4000行数据，将会从4000次对比降到20次以内，这是非常贴近理想的优化。</p><h2 id="SQL语句基本公式"><a href="#SQL语句基本公式" class="headerlink" title="SQL语句基本公式"></a><code>SQL</code>语句基本公式</h2><p>每个计算机语言都有他的公式，比如<strong>C语言</strong>的<code>printf(&quot;%d&quot;, &amp;n)</code>，又如<strong>Java</strong>的<code>System.out.println(&quot;Hello World&quot;)</code>，都是有规律可循。依照规律，无论是平时作业还是大型项目都是信手拈来。下面给出<code>SQL</code>语句的公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &lt;选择字段&gt;</span><br><span class="line"><span class="keyword">FROM</span> &lt;左表&gt; &lt;<span class="keyword">join</span>类型&gt;</span><br><span class="line"><span class="keyword">JOIN</span> &lt;右表&gt; <span class="keyword">ON</span> &lt;<span class="keyword">join</span>条件&gt;</span><br><span class="line"><span class="keyword">WHERE</span> &lt;选择条件&gt;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;集合条件&gt;</span><br><span class="line"><span class="keyword">HAVING</span> &lt;聚合条件&gt;</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;排序条件&gt;</span><br><span class="line"><span class="keyword">LIMIT</span> &lt;每页选择行数&gt; <span class="comment">-- 这里是MySQL特有的分页</span></span><br></pre></td></tr></table></figure><h2 id="运行解析"><a href="#运行解析" class="headerlink" title="运行解析"></a>运行解析</h2><p>当然，<code>SQL</code>是一门高级语言，机器无法识别，只能说是由机器解释后运行。解析便和编辑完全是两回事了。我们假设有这么一句<code>SQL</code>和上面给出的公式完全一样的顺序，解析之后就会变成这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;左表&gt; -- 获得笛卡尔积</span><br><span class="line">ON &lt;join条件&gt; -- 主表保留</span><br><span class="line">&lt;JOIN类型&gt; JOIN &lt;右表&gt; -- 不符合ON的数据也添加进去</span><br><span class="line">WHERE &lt;选择条件&gt; -- 非聚合数据</span><br><span class="line">GROUP BY &lt;集合条件&gt; -- 改变对表的引用</span><br><span class="line">HAVING &lt;聚合条件&gt; -- 之作用分组后</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="keyword">DISTINCT</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;排序条件&gt; <span class="comment">-- 可使用SELECT别名</span></span><br><span class="line"><span class="keyword">LIMIT</span> &lt;每页选择行数&gt; <span class="comment">-- 行数、偏移量</span></span><br></pre></td></tr></table></figure><p>有些人估计就直接蒙圈了。来举个例子吧：</p><blockquote><p>你迷恋上了手办，准备搜罗一下有没有自己喜欢的，然后统一入手。初期，你收集了一点点信息，并做成了表格：</p><p><strong>手办表</strong></p><div class="table-container"><table><thead><tr><th>手办id</th><th>对应人物</th><th>服饰</th><th>价格</th></tr></thead><tbody><tr><td>1</td><td>蕾姆</td><td>蓝色比基尼</td><td>99.00</td></tr><tr><td>2</td><td>巧克力</td><td>红色长袖睡衣</td><td>258.00</td></tr><tr><td>3</td><td>香草</td><td>蓝色短袖睡衣</td><td>258.00</td></tr></tbody></table></div><p><strong>番剧表</strong></p><div class="table-container"><table><thead><tr><th>番剧id</th><th>番剧名称</th><th>出场人物</th></tr></thead><tbody><tr><td>1</td><td>NEKOPARA</td><td>巧克力</td></tr><tr><td>1</td><td>NEKOPARA</td><td>香草</td></tr><tr><td>2</td><td>Re:从零开始的异世界生活</td><td>蕾姆</td></tr></tbody></table></div><p>然后，你想把这两个表对应起来，于是编写<code>SQL</code>：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物</span><br><span class="line"><span class="keyword">FROM</span> 手办表, 番剧表</span><br><span class="line"><span class="keyword">WHERE</span> 手办表.对应人物 = 番剧表.出场人物</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 手办表.对应人物, 手办表.服饰, 手办表.价格, 番剧表.番剧名称, 番剧表.出场人物;</span><br><span class="line">ORDER BY 手办表.价格 DESC</span><br></pre></td></tr></table></figure><blockquote><p>运行这样的语句之后，你的表格就变成了这样：</p><p><strong>番剧手办表</strong></p><div class="table-container"><table><thead><tr><th>对应人物</th><th>服饰</th><th>番剧名称</th><th>价格</th></tr></thead><tbody><tr><td>蕾姆</td><td>蓝色比基尼</td><td>Re:0</td><td>99</td></tr><tr><td>巧克力</td><td>红色长袖睡衣</td><td>NEKOPARA</td><td>258.00</td></tr><tr><td>香草</td><td>蓝色短袖睡衣</td><td>NEKOPARA</td><td>258.00</td></tr></tbody></table></div><p>看起来挺不错的。</p><p>在系统里面他们又是怎么运行的呢？</p></blockquote><p>首先，我们<strong>向内存中加载</strong><code>FROM</code>语句后面所有的表，并<strong>交叉相联合</strong>，也就是我们最为熟悉的<strong>排列组合</strong>，番剧表三条记录、手办表三条记录，所以内存一共加载了$3\times3=9$条记录；</p><p>其次，没有发现<code>ON</code>、<code>JOIN</code>语句，跳过；</p><p>然后发现有<code>WHERE</code>语句，所以系统将会按照<code>WHERE</code>语句给出的条件筛选手办对应任务和番剧出场人物相同的行。这里一共匹配到了三项，也就是上面的“<strong>番剧手办表</strong>”所显示的内容；</p><p>接着就发现了<code>GROUP BY</code>语句，于是根据所有选择的项进行分组。一般情况下应当是所有出现在<code>SELECT</code>列表上的<strong>所有项都应该出现在这里</strong>；</p><p><code>HAVING</code>是分组条件，也就是在<code>GROUP BY</code>存在的情况下才能使用。具体使用其实和<code>WHERE</code>是完全一样的。只不过分组的时候更倾向于使用范围，也就是<code>HAVING field &gt; 0</code>之类的语句；</p><p>分组完成后就是列出所有项了。<code>SELECT</code>将会从已经加载在内存里所有的列中选取指定的列；后面紧跟着的<code>DISTINCT</code>就是保证选出来的所有行不会有相同的数据；</p><p>最后就是<code>ORDER BY</code>对最终得出的行根据指定的字段进行排列，整段代码最后的<code>DESC</code>是倒序排列的意思；而默认情况是<code>ASC</code>，即正序排列。</p><p>这么过了一遍原理，会不会有点理解了？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;SQL&lt;/code&gt;语句是所有数据库系统没有办法绕开的。与其说是基础，不如说是所有数据库系统遵循的“行业规范”。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://www.sakebow.cn/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="http://www.sakebow.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>版本控制的另一种打开方式</title>
    <link href="http://www.sakebow.cn/2020/07/08/Java/SpringCloud/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.sakebow.cn/2020/07/08/Java/SpringCloud/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</id>
    <published>2020-07-08T13:02:00.000Z</published>
    <updated>2020-11-13T07:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>节奏越来越开的现今社会，项目完成速度也越发加快，于是一个项目的人数也就越来越多。这个时候版本控制也就尤为重要。本篇将不再说明使用<code>coding</code>、<code>Gitee</code>或者<code>GitHub</code>进行托管的方法，而是使用<code>GitLab</code>和<code>Nenux</code>实现的<code>DIY</code>托管平台</strong></p><a id="more"></a><h2 id="什么是GitLab"><a href="#什么是GitLab" class="headerlink" title="什么是GitLab"></a>什么是GitLab</h2><p><code>GitLab</code>实际上也是一种<code>GitHub</code>，只不过<code>GitLab</code>可以本地部署，这样就能够实现<code>GitHub</code>的私有代码库，并且<code>GitLab</code>免费开源。细心的你应该很容易就发现了<code>GitHub</code>官网在创建代码库的时候能够让用户选择创建开源仓库或者私有仓库，可是还有一行小字：<strong>每个月$7</strong>。这就很伤心了。所以<code>GitLab</code>实际上也是给了我们一个自己动手创建私有仓库的小办法。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><code>GitLab</code>使用<code>Ruby on Rails</code>搭建，虽然有一定的便利性，却安装步骤极其麻烦，是现在不可多得的<strong>反人类</strong>开源框架。不过，就算再怎么反人类，也是有办法制服他的。<del><em>以下就是早期人类制服野生<code>GitLab</code>的记录。</em></del></p><p>首先是<code>GitLab</code>。我们选择中文版的安装包：<code>twang2218/gitlab-ce-zh</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull twang2218/gitlab-ce-zh</span><br></pre></td></tr></table></figure><p>这个包一共<strong>1.61G</strong>，非常庞大，下载需要一些时间。如果是国外镜像很容易下载失败。如果可以的话尽可能使用国内镜像。</p><p>紧接着我们需要一份<code>docker-compose.yml</code>文件，通过<code>docker-compose</code>我们能够更快速、更一体化地完成镜像的创建。</p><p>下面是<code>docker-compose.yml</code>文件的具体内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 开启服务</span></span><br><span class="line">  <span class="attr">gitlab:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh:latest'</span> <span class="comment"># 使用镜像</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">'GitLab'</span> <span class="comment"># 主机名称（自定义）</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 环境配置</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">external_url</span> <span class="string">'http://192.168.1.112:8080'</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">4022</span></span><br><span class="line">        <span class="string">unicorn['port']</span> <span class="string">=</span> <span class="number">8888</span></span><br><span class="line">        <span class="string">nginx['listen_port']</span> <span class="string">=</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4080:8080'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4443:8443'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4022:22'</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 挂载卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><p><strong>在文件中尤其注意以下几点</strong>：</p><ul><li><p><code>external_url</code>规定了我们访问地址，但是映射之后就变成了<code>192.168.1.111:4080</code>，连规定的<code>IP</code>地址都掰成了物理主机的<code>IP</code>地址，即<code>192.168.1.111</code>。</p></li><li><p><code>nginx</code>的监听端口一定要和<code>external_url</code>的端口保持一致</p></li></ul><p>好了，我们开始吧。既然文件中规定了各种配置文件的位置，那么我们就把<code>docker-compose.yml</code>文件放到<code>/usr/local/docker/gitlab</code>中吧！接着跳转到这个文件夹中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/SpringCloud/Docker开启GitLab服务.png" alt="输入流程"></p><p>这里需要声明一点：命令<code>docker-compose up -d</code>中的<code>-d</code>千万不可省略，是使容器后台运行的参数。因为是服务器，所以需要持续监听，也就是说将会有大量的日志信息会<strong>不间断输出</strong>。所以不加上<code>-d</code>的同学就只是干看着命令行一行行滚动，实际上什么时候编译好了都不知道。就像下面这样不停的输出：</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/无止境的日志文件.png" alt="无休止的等待界面"></p><p>然后就是漫长的等待……好吧其实也不是很漫长。启动之后访问，不停的刷新，首先出来的是这个页面：</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/等待界面.png" alt="等待界面"></p><p>然后就到了这里。</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/进入界面.png" alt="正确界面"></p><p>由于我使用的内存是<strong>4+16G</strong>，全过程一共90秒。</p><h2 id="帐号登陆"><a href="#帐号登陆" class="headerlink" title="帐号登陆"></a>帐号登陆</h2><p>然后，到这一步，就尬住了。新账号？确认密码？什么东西？<code>GitLab</code>官网还上不去怎么办？</p><p>别担心，我们可以直接操作服务器。</p><p>我们不是已经用<code>Docker</code>启动了一个本地服务器嘛，就直接用<code>docker exec</code>命令接入服务器，修改用户名和密码就好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">sudo su # 超管权限</span><br><span class="line">docker ps -a # 查看我们启动的容器编号是多少，我这里是45d3728d94c4</span><br><span class="line">docker exec -it 45 /bin/bash # 进入容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器内</span></span><br><span class="line">gitlab-rails console production # 操作gitlab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitLab操作台</span></span><br><span class="line">user = User.where(id:1).first # 显示默认用户信息</span><br><span class="line">user.password = $&#123;YOUR PASSWORD&#125; # 设置自定义密码</span><br><span class="line">user.save! # 保存用户信息</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/SpringCloud/修改默认用户信息.png" alt="输入"></p><p>这时我们再进去修改密码就可以使用了。</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/成功.png" alt="进入界面"></p><p>其他的就是和<code>GitHub</code>一样的用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;节奏越来越开的现今社会，项目完成速度也越发加快，于是一个项目的人数也就越来越多。这个时候版本控制也就尤为重要。本篇将不再说明使用&lt;code&gt;coding&lt;/code&gt;、&lt;code&gt;Gitee&lt;/code&gt;或者&lt;code&gt;GitHub&lt;/code&gt;进行托管的方法，而是使用&lt;code&gt;GitLab&lt;/code&gt;和&lt;code&gt;Nenux&lt;/code&gt;实现的&lt;code&gt;DIY&lt;/code&gt;托管平台&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://www.sakebow.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud简介</title>
    <link href="http://www.sakebow.cn/2020/07/08/Java/SpringCloud/SpringCloud%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.sakebow.cn/2020/07/08/Java/SpringCloud/SpringCloud%E7%AE%80%E4%BB%8B/</id>
    <published>2020-07-08T13:02:00.000Z</published>
    <updated>2020-12-09T15:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>不得不说，<code>Java</code>行业变动实在太大。从一开始的<code>J2EE</code>，到<code>SSH</code>、<code>SSM</code>，接着就马上迎来了<code>SpringBoot</code>和<code>SpringCloud</code>。这里我使用的是<a href="https://bilibili.com/BV1jJ411S7xr" target="_blank" rel="noopener">狂神说Java的SpringCloud视频</a>，说的非常浅显，也很全面。</strong></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先声明，<code>SpringCloud</code>严格意义上来说不是一个新的框架，而是一个由旧的技术抽象出统一的规范而形成的很大的生态。从<code>SpringCloud</code>官网中就能看出，它不是一个配一配就能用的框架，而是一个很大的工程，下面附带非常多的子项目，包括网关、分布式、权限管理等等非常多的内容，但是本质还是<code>Spring</code>，模块也是基于<code>SpringBoot</code>，是一个典型的旧事新篇。</p><h2 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h2><p>如果你是完全没有编程基础，或者说从未接触过分布式，那就来跟着我一起学吧，不要有任何怀疑。如果你有一定的基础，还请多看看<code>JVM</code>，有余力甚至可以尝试当前热门的<code>Python</code>和<code>Go</code>，这个框架学习笔记已经满足不了你了。</p><p>另外呢，许多社区的共同努力也让<code>SpringCloud</code>有了足够的拓展了，目前的热门开源项目就是原生的<code>SpringCloud</code>和阿里的<code>SpringCloud Alibaba</code>。但是两者有着较大的差别。更详细的差别还请查看<a href="https://blog.csdn.net/feichitianxia/article/details/92682828" target="_blank" rel="noopener">木子雷的“通过对比<code>Dubbo</code>和<code>SpringCloud</code>，综合选择最合适的”</a>，这里简单总结就是：阿里的<code>SpringCloud Alibaba</code><strong>生态还未成熟</strong>，许多关键点还未有对应成熟框架开源，而且集成第三方框架也有些许困难，在技术成熟度上，原生的<code>SpringCloud</code>更胜一筹，这也是为什么目前原生的使用更广泛。</p><h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>不管是做什么都是要事先做一点知识储备的，学习也不例外。这里并不推荐什么学习顺序，因为每个人的学习方式都有所不同，有些人喜欢实践优先，而有些人喜欢理论优先，大家还是根据自己的步调，急也急不来。</p><p>另外，多多少少还是需要有一点点<code>Maven</code>基础，如果没有深入了解的话起码应该有一个<code>SSM</code>项目经验，这个就是典型的<code>Maven</code>应用。如果对<code>Spring</code>没有更深入的了解，有最基本的<code>API</code>使用经验也是足够的，最起码学会如何使用<code>SpringCloud</code>是够了。如果还需要进阶的话就需要<code>JVM</code>和<code>Spring</code>以及<code>SpringMVC</code>的基础了。当然，这些都是后话了。这篇笔记本来就是入门笔记，所以要求比较低，各位还请放心观看。如果避开所有说明就是一个快速无原理速通秘籍。在这里还是希望各位不要在掌握了<code>API</code>的调用之后沾沾自喜，想要生活得更体面还是需要进阶的。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先是<strong>硬件</strong>的选择。一台足够顺手的电脑是一个好的开始，比如键盘短路、内存不足等等都是很让人头疼的问题。这些可以尽快联系专业人士或者多关注拆装机博客自行安装。如果是比较小的问题，比如更换键盘、加装内存等等建议自行解决，拆机装机能够极大锻炼一些小技巧，面对众多螺丝钉的时候也能够极大地锻炼你的耐心和细心。</p><p>接着就是<strong>系统</strong>的选择。如果你已经厌烦了<code>Windows</code>冗赘的后台，不妨尝试免费的<code>Ubuntu</code>、<code>CentOS</code>等，或者国产的<code>Deepin</code>、<code>UOS</code>等。当然，你也可以选择有些昂贵的<code>MacOS</code>，这些都是需要认真考虑的。如果你自制力较差，选择了<code>Windows</code>却学一会了马上打开了游戏，可以考虑更换系统协助戒网瘾。如果希望尝试新系统却无法抛弃原先<code>Windows</code>的使用习惯，<code>Deepin</code>和<code>MacOS</code>将会是一个很不错的选择；如果你有条件，建议直接选择<code>MacOS</code>或者选择<strong>黑苹果</strong>，因为这一系统设计的初衷就是为了设计人员和编程人员；如果没有条件还是建议选择<code>Ubuntu</code>系统，因为是专为编程人员打造的专业系统，也因为它比较方便而且美观，对<code>Linux</code>新手来说是一个不错的选择。</p><p><strong>配置环境</strong>就不再赘述了，无论是<code>Windows</code>还是<code>Ubuntu</code>抑或<code>MacOS</code>，都有非常多、非常详细的说明，这里大家自行根据自己的情况选择合适的教程，需要安装的有<code>jdk</code>、<code>Maven</code>。</p><p>然后就是<strong>应用</strong>。当前<code>IntelliJ</code>公司做的一系列产品已经足够优秀了，但是收费。能够通过一些其他方式获得或者有条件支持正版的话推荐使用，毕竟代码自动补充、源码追溯、全域查找等功能实在是太人性化了。而<code>Eclipse</code>虽然逊色一点，却也是经典的<code>Java</code>程序编辑器。很多企业还是喜欢使用自己魔改的<code>Eclipse</code>来进行各种各样的操作，到目前为止也有较多的社区在为<code>Eclipse</code>插件做贡献，总能找到你喜欢的一款。但是由于我弄到了一款<code>IntelliJ</code>的<code>IDEA</code>，所以就不再使用<code>Eclipse</code>演示了。</p><p>最后，<strong>寻找合适的教程开始吧</strong>！我选择了狂神，如果你觉得可以，就跟上我一起吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;不得不说，&lt;code&gt;Java&lt;/code&gt;行业变动实在太大。从一开始的&lt;code&gt;J2EE&lt;/code&gt;，到&lt;code&gt;SSH&lt;/code&gt;、&lt;code&gt;SSM&lt;/code&gt;，接着就马上迎来了&lt;code&gt;SpringBoot&lt;/code&gt;和&lt;code&gt;SpringCloud&lt;/code&gt;。这里我使用的是&lt;a href=&quot;https://bilibili.com/BV1jJ411S7xr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;狂神说Java的SpringCloud视频&lt;/a&gt;，说的非常浅显，也很全面。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://www.sakebow.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MySQL简介</title>
    <link href="http://www.sakebow.cn/2020/07/07/MySQL/MySQL%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.sakebow.cn/2020/07/07/MySQL/MySQL%E7%AE%80%E4%BB%8B/</id>
    <published>2020-07-07T09:16:00.000Z</published>
    <updated>2020-12-07T23:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>MySQL</code>是最流行的关系型数据库管理系统之一，因为其轻量级、自由度高、免费开源而备受青睐。现在国内也有非常多的大型企业魔改<code>MySQL</code>而特化某种极端场景，其中以阿里为典型代表。</strong></p><a id="more"></a><blockquote><p><code>Oracle</code>数据库是它是一种高效率、可靠性好的、适应高吞吐量的数据库方案。（<em>摘自百度百科：<a href="https://baike.baidu.com/item/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">Oracle数据库</a></em>）</p></blockquote><p>这是<code>Oracle</code>留给我们的印象。现在许多政府主导的项目多使用的就是<code>Oracle</code>，因为适应高并发且安全稳定，但是相当的重量级，对服务器的配置要求相当的高，安装时也要求图形化界面，对于少有<code>GUI</code>界面的<code>Linux Server</code>并不是非常的友好，对于后台线程繁多的<code>Windows</code>系统也并没有好很多。但是它最大的特点就是数据恢复。每次的操作都保存在了磁盘上，可以随时恢复，<code>Oracle</code>公司也能够对企业提供对应的收费服务。</p><p>而与之对应的，MySQL不仅数据容易丢失，而且诊断调优解决方案少，安全上也更容易被仿冒进而被攻击，可以说在各种程度上还在起跑阶段。但是由于其开源、免费两个特点，不少社区已经逐渐在丰富<code>MySQL</code>的性能和缺陷。许多公司也在根据自己的需求修改并使用。</p><p>更详细的对比情况如下所示：（总结自<a href="https://www.cnblogs.com/xu-cceed3w/p/8824199.html" target="_blank" rel="noopener">IT小黑的博客</a>）</p><h2 id="MySQL和Oracle的对比"><a href="#MySQL和Oracle的对比" class="headerlink" title="MySQL和Oracle的对比"></a>MySQL和Oracle的对比</h2><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>自动提交</td><td>手动使用<code>commit</code>命令</td></tr></tbody></table></div><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td><code>limit</code>命令</td><td>伪列<code>ROWNUM</code>和嵌套查询</td></tr></tbody></table></div><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>两者都支持<code>serializable</code>串行化事务隔离级别，都实现了最高级别的读一致性，即一个<code>session</code>提交后其他<code>session</code>才能够看到提交的修改</p><ul><li><p>MySQL</p><p><code>read commited</code>的隔离级别。</p></li><li><p>Oracle</p><p><code>repeatable commit</code>的隔离级别。不同的是，Oracle会在undo表中构造多个版块，能够让开发者能够查询旧数据块。举一个比较简单的例子，当插入学生数据的时候系统自动确定学号，并添加10点积分。代码如下：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">TRIGGER</span> JWXT.TRI_STUDENT_ID_CALC</span><br><span class="line"><span class="comment">-- 在JWXT中创建触发器TRI_STUDENT_ID_CALC</span></span><br><span class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="comment">-- 在插入数据之前触发该触发器定义的事件</span></span><br><span class="line"><span class="keyword">ON</span> TB_STUDENT</span><br><span class="line"><span class="comment">-- 对应TB_STUDENT表进行操作</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="comment">-- 触发器针对每一行触发</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  student_no <span class="built_in">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="comment">-- 定义字段 student_no 记录当前是第几个学生</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 触发器主体</span></span><br><span class="line"><span class="comment">-- 假设 TB_STUDNET 表建立了序列 SEQ_STUDNET</span></span><br><span class="line"><span class="comment">-- 假设 TB_STUDENT 表记录学生学号的字段是 student_id</span></span><br><span class="line">  <span class="keyword">SELECT</span> SEQ_STUDENT.NEXTVAL <span class="keyword">INTO</span> student_no <span class="keyword">FROM</span> SYS.dual;</span><br><span class="line">  <span class="comment">-- 将当前序列输入变量 student_no</span></span><br><span class="line">  :NEW.student_id := to_char(sysdate, "yyyyMMddhhmmss") || student_no;</span><br><span class="line">  <span class="comment">-- 修改student_id</span></span><br><span class="line">  :NEW.count := :OLD.count + 10;</span><br><span class="line">  <span class="comment">-- 给帐务添加10点积分</span></span><br><span class="line"><span class="comment">-- 错误处理</span></span><br><span class="line">EXCEPTION</span><br><span class="line">  RAISE_APPLICATION_ERROR(100031, "学号生成出错"); <span class="comment">-- 抛出异常</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>这里的<code>:NEW</code>和<code>:OLD</code>就是典型的访问<strong>新数据</strong>和<strong>旧数据</strong>。</p><h3 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>仅在<code>InnoDB</code>引擎中开启行级所的情况下才支持事务</td><td>完全支持</td></tr></tbody></table></div><h3 id="数据持久"><a href="#数据持久" class="headerlink" title="数据持久"></a>数据持久</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>重启服务将会完全丢失所有数据、数据库更新字段后立即丢失原先数据</td><td>提交数据的操作全部存在磁盘上，随时可恢复；并且<code>Oracle</code>公司提供数据恢复的收费服务</td></tr></tbody></table></div><h3 id="并发支持"><a href="#并发支持" class="headerlink" title="并发支持"></a>并发支持</h3><ul><li><p>MySQL</p><p><code>MyISAM</code>引擎下仅支持表级锁，即当一个<code>session</code>修改表后，整个表被锁住，其他任何会话无法对表进行任何操作。这对高并发要求极不友好，大量的时间都在等待上一个甚至几个<code>session</code>退出</p></li><li><p>Oracle</p><p>完全支持行锁。在当前<code>session</code>修改表的过程中，其他<code>session</code>能够访问并修改其他行，单位时间内能够处理更多的请求</p></li></ul><h3 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>锁住整张表，影响数据库的增删改操作</td><td>不锁表，对其他操作无影响</td></tr></tbody></table></div><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><ul><li><p>MySQL</p><p>复制服务器配置简单。但主库出问题时，从库有可能丢失一定的数据。且需要手工切换从库到主库</p></li><li><p>Oracle</p><p>既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。</p></li></ul><h3 id="性能诊断"><a href="#性能诊断" class="headerlink" title="性能诊断"></a>性能诊断</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>调优方法较少，主要是<code>慢查询日志</code></td><td>调优方法成熟，可实现多种自动分析、诊断调优功能，有<code>awr</code>、<code>addm</code>、<code>sqltrace</code>、<code>tkproof</code>等</td></tr></tbody></table></div><h3 id="权限安全"><a href="#权限安全" class="headerlink" title="权限安全"></a>权限安全</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>仅和主机IP有关，容易被仿冒</td><td>安全认证思想比较传统，中规中矩</td></tr></tbody></table></div><h3 id="分区索引"><a href="#分区索引" class="headerlink" title="分区索引"></a>分区索引</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>技术不成熟</td><td>技术成熟</td></tr></tbody></table></div><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>除了自带的命令行就是第三方</td><td>有多种应用程序解决方案</td></tr></tbody></table></div><h3 id="附加服务"><a href="#附加服务" class="headerlink" title="附加服务"></a>附加服务</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>无</td><td>数据恢复等由<code>Oracle</code>公司提供的完整服务</td></tr></tbody></table></div><h3 id="其他条件"><a href="#其他条件" class="headerlink" title="其他条件"></a>其他条件</h3><div class="table-container"><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>免费开源、轻量级</td><td>付费服务、超重量级</td></tr></tbody></table></div><h2 id="为什么选择MySQL"><a href="#为什么选择MySQL" class="headerlink" title="为什么选择MySQL"></a>为什么选择MySQL</h2><p>这么一罗列似乎<code>MySQL</code>始终处于劣势。但是<code>MySQL</code>它本身的轻量级提供了非常方便的部署环境。众多中小企业还是非常喜欢使用<code>MySQL</code>的。其次就是因为他灵活的架构。</p><p>他是这么一个架构：（图源来自<a href="https://blog.csdn.net/weixin_42358062/article/details/80730694" target="_blank" rel="noopener">CSDN</a>）</p><p><img src="https://images2018.cnblogs.com/blog/1411859/201806/1411859-20180617124155105-273948974.png" alt="MySQL架构图"></p><p>形象一点地说，大概就是这样子：</p><ul><li><p>连接层——守门大爷</p><p>首先就是数据库连接池管理所有的连接，基本上所有的数据库都有这么一个东西。比如<code>Oracle</code>的<code>ODAC</code>就是其中之一。对外于各种语言连接器相对应，对内则于数据的读写相对应。</p></li><li><p>服务层——客服中心</p><ul><li><p>事务管理器——客服小姐</p><p>事务管理器接到请求之后立马转发到<code>SQL</code>接口，即立马转告对应工厂部门</p></li><li><p>优化器——技术顾问</p><p><code>SQL</code>并不像<code>C</code>语言，所写即所运行，而是有专门的优化器来根据系统自己的想法来优化当前的算法，也就像是一个了解技术的顾问一样帮助挑选较优的选择。</p><p>当然，这个选择不一定是最好的，也不一定适合当前环境，但确实是根据系统特定的优化算法算出来的最优解。就像是店家推荐不一定是用户所爱，但也象征了一些什么。</p><p>当然，<code>SQL</code>调优可不单纯是根据数学算算就好了，是结合实际不断的调整，不断的放弃，最终得出来无限接近极限的算法。这就不是系统自带的优化器能够做到的了。就像阿里，既然已经有可靠的<code>DBA</code>数据库管理员就直接魔改<code>MySQL</code>，删掉相对来说没多大作用的优化器，更接近极限响应时间。</p></li><li><p>缓存和缓冲——搬运工</p><p>就如字面意思，搬运数据、暂存数据等等</p></li></ul></li><li><p>引擎层——办公中心</p><p>这里可以说是整个<code>MySQL</code>的精髓所在。这部分最大的特点就是<strong>可插拔</strong>，也就是按需添加删除存储引擎，对应不同的应用场景魔改成不同的<code>MySQL</code>，这是<code>Oracle</code>没有的，也是<code>MySQL</code>无限的潜能所在。各种社区、各种企业、各种研究所都在慢慢魔改，并生成贴合对应生产环境的数据库系统，同时兼顾了轻量级和高可用，相对于什么都有的超重量级<code>Oracle</code>而言是非常大的优点。</p><p>目前用的最多的就是支持行锁的<code>InnoDB</code>引擎。当然也有使用其他引擎的，这都是看企业自己的选择了。</p></li><li><p>存储层——仓库</p><p>这部分主要是文件系统，所有的数据都保存在磁盘上来实现数据的持久化。对于<code>InnoDB</code>而言，这部分就是通过<code>B+树</code>实现的文件系统，由于非叶子节点不占用实际内存，所以减小了内存压力，同时也减少了磁盘IO，极大加快了查询速度。这也是<code>InnoDB</code>这么受欢迎的原因之一。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有关<code>MySQL</code>的基础知识大概就是这些了。之后将会逐步深挖，从入门的索引、<code>SQL</code>再到进阶的调优、主从等，逐步了解<code>MySQL</code>数据库。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;MySQL&lt;/code&gt;是最流行的关系型数据库管理系统之一，因为其轻量级、自由度高、免费开源而备受青睐。现在国内也有非常多的大型企业魔改&lt;code&gt;MySQL&lt;/code&gt;而特化某种极端场景，其中以阿里为典型代表。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://www.sakebow.cn/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="http://www.sakebow.cn/tags/MySQL/"/>
    
  </entry>
  
</feed>
