<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakebow的小博客</title>
  
  <subtitle>一条苦苦挣扎的废柴大学狗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.sakebow.cn/"/>
  <updated>2020-11-15T13:05:04.000Z</updated>
  <id>http://www.sakebow.cn/</id>
  
  <author>
    <name>Sakebow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker创建服务器</title>
    <link href="http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2020-07-11T12:58:00.000Z</published>
    <updated>2020-11-15T13:05:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>本文主要参考了<a href="https://blog.csdn.net/qq_21429153/article/details/80867813" target="_blank" rel="noopener">lzssing的“<code>Docker</code>搭建<code>CentOS</code>系统，并配置<code>ssh</code>环境”</a>，并补充了一些相关细节。本篇将按照我的尝试全过程依次排雷，这样也能够让各位看到更清晰的问题解决方案，但是照着做时需要避开明确标注了“不正确”的地方。</strong></p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>无论是什么系统，只需要下载安装<code>Docker</code>就好了。参照我之前写的<a href="/2020/07/11/运维/docker/docker的简介与安装">docker的简介与安装</a>。如果你是<code>Ubuntu</code>系统，那么这些就够了。如果你是<code>Windows</code>系统，你可能还需要一个<a href="https://pan.baidu.com/s/1VFQVelcYuw30nd1B0jXOZA" target="_blank" rel="noopener"><code>XShell</code>（提取码：88kv）</a>用于远程连接。这里就以我使用的<code>Ubuntu</code>系统编写流程，如果你是<code>Windows</code>，你可以选择<code>Docker for Windows</code>并用<code>CMD（管理员）</code>执行同样的命令，也可以选择使用<code>Windows</code>子系统。</p><h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>首先肯定是确保自己进入了超级管理员权限，并使用docker命令下载我们需要的<code>CentOS</code>镜像。为什么是<code>CentOS</code>？因为全都是<code>Ubuntu</code>的话比较容易弄混，所以就用个其他的系统区分一下。</p><p>请求超管权限，输入密码认证之后进入超管权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p><strong>从这里之后便全是CentOS。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos # 拉取镜像</span><br><span class="line">docker run -itd centos /bin/bash # 创建容器运行镜像</span><br><span class="line">docker exec -it 18 /bin/bash # 进入容器操作镜像</span><br></pre></td></tr></table></figure><p>这里需要说明的是，<code>run</code>命令中当我们使用<code>-d</code>作为参数时，容器将支持后台运行。<code>run</code>命令之后便会生成一个<strong>容器id</strong>，我的是：</p><p><code>18b400110fc8772d23016358e60b4b5ff00e3892d1ad7db4bbbc4b6d1bb13e45</code></p><p>这实在是太长了。于是我在确认了没有重复项之后缩减了长度，只写了<code>18</code>，也就是<code>exec</code>命令所示的那样。</p><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E6%8B%89%E5%8F%96%E9%95%9C%E5%83%8F.png" alt="拉取镜像"></p><p>然后我们开始搭建<code>ssh</code>环境，因为需要使用<code>ssh</code>工具进行连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install passwd openssl openssh-server openssh-clients initscripts vim -y # 安装软件</span><br></pre></td></tr></table></figure><p>此处<code>-y</code>代表<strong>确认安装</strong>。这个过程实在太长而且都是一样的输出就不截图了。你担心出错？<strong>放心好了</strong>。只要你不断网，这些输出必定每个人都是一样的。</p><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E5%90%84%E7%A7%8D%E5%8C%85%E5%B7%B2%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90.png" alt="下载完成"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""</span><br><span class="line">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""</span><br><span class="line">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""</span><br></pre></td></tr></table></figure><p>运行sshd服务一共需要三种密钥，<code>rsa</code>、<code>ecdsa</code>、<code>ed25519</code>。这三种都是<strong>数字签名</strong>的算法，能够保证服务器和客户端之间有能够认证身份的<strong>唯一指定</strong>令牌。在这里就不持续展开了，总之都是<strong>世界级</strong>的加密算法。</p><p>好了，准备工作差不多就到这里了，我们不如先存个档？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exit # 从CentOS中退出来，回到超管权限下的Ubuntu</span><br><span class="line"></span><br><span class="line">docker commit -a "sakebow" -m "ssh complete" 18 centos_server/save:v1 # 保存镜像</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E4%BF%9D%E5%AD%98%E4%BF%AE%E6%94%B9%E5%90%8E%E7%9A%84%E9%95%9C%E5%83%8F.png" alt="保存镜像"></p><p>既然我们已经保存了镜像，之前使用的<code>18</code>容器就不再需要了，删除了吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 18 # 之前是保持后台运行，现在需要手动关闭容器</span><br><span class="line">docker rm 18 # 删除容器</span><br><span class="line">docker ps -a # 确认容器是否存在</span><br></pre></td></tr></table></figure><p>好了，我们再次使用新的镜像跑一下。</p><p><strong>友情提醒：从现在开始会出现错误情况，我将郑重标明</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 错误示范</span></span><br><span class="line">docker run -itd 79 /bin/bash # 创建容器并运行镜像</span><br><span class="line">docker exec -it da /bin/bash # 进入容器</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E8%BF%9B%E5%85%A5%E6%96%B0%E9%95%9C%E5%83%8F.png" alt="进入新镜像"></p><p>这里的<code>79</code>是<strong>新镜像的id</strong>，而<code>da</code>是<strong>新容器的id</strong>。各位在这一步需要更换为<strong>自己的对应id</strong>。现在，我们已经进入了<code>CentOS</code>系统中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshd.service # 启动服务</span><br></pre></td></tr></table></figure><p>然后，噩梦开始了。这是第一个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@daa9499a8f9f /]# systemctl start sshd.service</span><br><span class="line">System has not been booted with systemd as init system (PID 1). Can't operate.</span><br><span class="line">Failed to connect to bus: Host is down</span><br></pre></td></tr></table></figure><p>就很奇怪。后来在<a href="https://blog.csdn.net/baidu_38558076/article/details/103890319" target="_blank" rel="noopener">baidu_38558076的“System has not been booted with systemd as init system”一文</a>中找到了解决方案：<code>/bin/bash</code>修改为<code>/sbin/init</code>，这样才会注册主线程<code>PID 1</code>。</p><h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exit # 退出失败的容器</span><br><span class="line"><span class="meta">#</span><span class="bash"> 以下修改稿1 - 这说明他依然有问题</span></span><br><span class="line">docker ps -a # 确认出错容器</span><br><span class="line">docker stop da # 停掉后台的容器</span><br><span class="line">docker rm da # 删除容器</span><br><span class="line">docker run --privileged=true 94 /sbin/init # 使用不一样的方式创建镜像</span><br><span class="line">docker exec -it 94 /bin/bash # 运行</span><br></pre></td></tr></table></figure><p>截图之前没注意，参数还有顺序要求，闹了很多错误。我也就不回避这些，给大家排个雷。</p><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E4%BF%AE%E6%94%B91.png" alt="排雷式截图：进入新容器"></p><p><code>run</code>命令一定是要<code>--privileged=true</code>在<strong>镜像id</strong>之前。</p><p>再来试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshd.service # 启动服务</span><br><span class="line">ps -e | grep sshd # 查看sshd服务运行情况</span><br></pre></td></tr></table></figure><p>这次没有报错。你有些后怕？放心好了，<code>Linux</code>的哲学就是：“<strong>没有报错就是没有错误！</strong>”相信自己，他不说你有错误你就是没错误。</p><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E6%88%90%E5%8A%9F%E5%BC%80%E5%90%AF%E6%9C%8D%E5%8A%A1.png" alt="成功开启服务"></p><p>我们试着用<code>ssh</code>工具连接一下。另外开一个窗口，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.111 # 这个192.168.1.111是我的IP地址</span><br></pre></td></tr></table></figure><p><strong>好像行不通</strong>。以下是错误信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakebow@sakebow-Lenovo-V310-14IKB:~$ ssh root@192.168.1.111</span><br><span class="line">ssh: connect to host 192.168.1.111 port 22: Connection refused</span><br></pre></td></tr></table></figure><p>为什么？因为<code>Docker</code>是运行在本机的，开的端口就是本机的端口，也就是默认监听<code>22</code>端口。这个端口又是其他机器连接本机的关键，<strong>不允许被占用</strong>，所以直接被拒绝了。</p><p>那怎么搞嘛！<strong>换端口</strong>。</p><h2 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这次是正确的</span></span><br><span class="line"></span><br><span class="line">exit # 同样退出错误的容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同样重开重进</span></span><br><span class="line">docker ps -a</span><br><span class="line">docker stop 94 e5 10</span><br><span class="line">docker rm 94 e5 10</span><br><span class="line">docker run -itd --privileged=true -p 1000:22 79 /sbin/init</span><br><span class="line">docker exec -it be /bin/bash</span><br><span class="line"></span><br><span class="line">systemctl start sshd # 同样在CentOS里面开启服务</span><br></pre></td></tr></table></figure><p>没有错误提示。连接试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.1.111 -p 1000</span><br></pre></td></tr></table></figure><p>出现了新的对话！</p><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt="连接成功"></p><p>确定继续连接吗？确定的话<code>CentOS</code>（服务器）中的指纹就会保存在<code>Ubuntu</code>（客户机）中，方便下次连接。输入<code>yes</code>录入指纹，也就是以后允许这台机器输入密码认证，这样其他任何机器输入的密码即使是正确的也不会核对；如果选择<code>no</code>将会终止连接，虽然指纹依然在服务器<code>CentOS</code>上，但是客户机<code>Ubuntu</code>没有指纹，将不会核对密码。</p><p>密码正确后，进入服务器。</p><p>到这里全部完成。</p><h2 id="总结正确的全过程"><a href="#总结正确的全过程" class="headerlink" title="总结正确的全过程"></a>总结正确的全过程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">sudo su</span><br><span class="line">docker pull centos # 此处获得mirror_id_1</span><br><span class="line">docker run -itd $&#123;mirror_id_1&#125; /bin/bash # 此处填入你的mirror_id_1，执行后生成container_id_1</span><br><span class="line">docker exec -it $&#123;container_id_1&#125; /bin/bash # 填入你获得的container_id_1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">yum install passwd openssl openssh-server openssh-clients initscripts vim -y</span><br><span class="line">ssh-keygen -t rsa -f /etc/ssh/ssh_host_rsa_key -N ""</span><br><span class="line">ssh-keygen -t ecdsa -f /etc/ssh/ssh_host_ecdsa_key -N ""</span><br><span class="line">ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""</span><br><span class="line">systemctl start sshd.service # sshd.service可以简写为sshd</span><br><span class="line">exit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">docker commit -a "$&#123;custom_author&#125;" -m "$&#123;custom_comments&#125;" $&#123;container_id_1&#125; $&#123;custom_mirror_name&#125; # 输入自定义的作者信息、备注信息 和 container_id_1，并获得mirror_id_2</span><br><span class="line">docker stop $&#123;container_id_1&#125; # 输入你的container_id_1</span><br><span class="line">docker rm $&#123;container_id_1&#125; # 输入你的container_id_1</span><br><span class="line">docker ps -a</span><br><span class="line">docker run -itd --privileged=true -p $&#123;custom_port&#125;:22 $&#123;mirror_id_2&#125; /sbin/init # 此处填入你的自定义端口号custom_port，mirror_id_2</span><br><span class="line">ssh root@$&#123;IP_HOST&#125; -p $&#123;port&#125; # 此处填入你的IP_HOST和custom_port</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;本文主要参考了&lt;a href=&quot;https://blog.csdn.net/qq_21429153/article/details/80867813&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lzssing的“&lt;code&gt;Docker&lt;/code&gt;搭建&lt;code&gt;CentOS&lt;/code&gt;系统，并配置&lt;code&gt;ssh&lt;/code&gt;环境”&lt;/a&gt;，并补充了一些相关细节。本篇将按照我的尝试全过程依次排雷，这样也能够让各位看到更清晰的问题解决方案，但是照着做时需要避开明确标注了“不正确”的地方。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://www.sakebow.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.sakebow.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker的简介与安装</title>
    <link href="http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://www.sakebow.cn/2020/07/11/%E8%BF%90%E7%BB%B4/docker/docker%E7%9A%84%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2020-07-11T09:18:00.000Z</published>
    <updated>2020-07-19T09:16:11.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>简介部分主要参考了<strong>尚硅谷周阳</strong>的<a href="https://bilibili.com/BV1Vs411E7AR" target="_blank" rel="noopener">B站视频</a>，安装部分主要参考了<a href="https://www.cnblogs.com/walker-lin/p/11214127.html" target="_blank" rel="noopener"><code>walker_lin</code>的<code>docker</code>学习（一）<code>ubuntu</code>上安装<code>docker</code>一文</a></p><a id="more"></a><h2 id="第一感觉"><a href="#第一感觉" class="headerlink" title="第一感觉"></a>第一感觉</h2><p><img src="https://sakebow.gitee.io/images/%E8%BF%90%E7%BB%B4/docker.png" alt="docker"></p><p>什么是<code>Docker</code>？<code>Dock</code>是容器的意思，那么<code>Docker</code>也就有容器管理员的意思了。既然是管理员，那么也就有容器的来源、状态和去向三个属性的管理。</p><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a><code>Docker</code>架构</h2><p><code>Docker</code>是一个<code>C/S</code>架构的应用，虽然我们能看到的非常有限，却在设计之初就已经构想了一整套完美的生态。整个生态包括<code>Docker镜像仓库</code>、<code>Docker</code>容器和<code>Docker</code>客户端，这三个分别掌管来源、状态和去向。</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>来源虽说是容器的来源，其实就是说<code>Docker</code>镜像的来源，也就指向<code>Docker</code>庞大的代码仓库。从代码仓库中下载最小限度的镜像之后，在确定运行这些镜像之后，就会自动创建一个容器，并塞入镜像。而这个仓库则是在开发人员和众多社区大佬的共同努力下逐渐丰富起来的一个网站，叫<a href="https://hub.docker.com" target="_blank" rel="noopener"><code>Docker Hub</code></a>。</p><p>听起来就像<strong>超市购物</strong>一样，我在超市里找到了我想要的商品（<em>镜像</em>），然后装进袋子（<em>容器</em>）里。</p><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>状态普遍只会用到两种，一种是<strong>停止</strong>，另一种是<strong>运行中</strong>。这是两种正确执行之后才会出现的状态，而其他则是<strong>由命令不正确导致空容器</strong>、由<strong>无网络造成的创建失败</strong>等等状态。由于其他状态相当于<strong>错误</strong>，需要被处理，所以就没有一一列出的必要。</p><p>要管理容器状态，其实也就是操作容器，<strong>关闭</strong>、<strong>打开</strong>、<strong>创建</strong>、<strong>删除</strong>四大基本操作，其他的操作都类似这四大操作的<strong>旁支</strong>，比如<strong>后台挂起</strong>，也相当于<strong>打开</strong>。当然，如果遇到了刚刚所说的<strong>错误</strong>，这些<strong>旁支</strong>就<strong>没有效果</strong>了。</p><p>如果要打比方的话，状态就类似守门的大爷，对一个个的停车位是选择<strong>开门</strong>、<strong>关门</strong>、<strong>监视</strong>还是<strong>放任</strong>。</p><h3 id="去向"><a href="#去向" class="headerlink" title="去向"></a>去向</h3><p>去向说的是容器的去向，实际上也就是容器到底是<strong>留存</strong>还是<strong>删除</strong>。无论是<strong>停止</strong>还是<strong>保持运行</strong>，容器都还在，是<strong>留存</strong>；<strong>删除</strong>则是将容器<strong>彻底删除</strong>，在容器运行期间对镜像的<strong>一切修改将不会保存</strong>，但是最初的镜像将会完好地保存下来，因为容器中运行的是镜像的备份。</p><p>这就像是快递检货一样，无论发往哪里，都是<strong>检验合格（<em>确认要用</em>）</strong>；而<strong>检验不合格（<em>确认不用</em>）</strong>将会直接<strong>处理掉（<em>删除</em>）</strong>。这里的合不合格则是由<strong>快递员（<em>开发者</em>）来</strong>决定。</p><h2 id="为什么是Docker"><a href="#为什么是Docker" class="headerlink" title="为什么是Docker"></a>为什么是<code>Docker</code></h2><p><code>Docker</code>能够下载镜像、创建容器并运行镜像。这就像是虚拟机一样，我们去网上下载镜像，然后挂载到机器上，成为虚拟系统。但是这两者完全不相同。</p><p>这里使用<a href="https://www.zhihu.com/question/48174633" target="_blank" rel="noopener">知乎中针对“<code>docker</code>容器与虚拟机有什么区别？”这一问题<code>water Cc</code>给出的回答（3楼）</a>中的图片来说明：</p><p><img src="https://pic1.zhimg.com/80/20006deca0fccda0d536edd626835e9e_720w.jpg?source=1940ef5c" alt="虚拟机和docker的区别"></p><p>我们可以看到，左边是<strong>虚拟机</strong>的架构，而右边是<strong>Docker</strong>的架构。最底下的<code>Server</code>和<code>Host OS</code>合起来构成物理主机，也就是我们平常所用的个人电脑。</p><p>其中，<strong>虚拟机</strong>使用了<code>Hypervisor</code>，全称是<strong>虚拟机监视器</strong>，是一种运行在基础物理服务器和操作系统之间的中间软件层，可允许多个操作系统和应用共享硬件。也就是说，我们在针对<strong>虚拟机</strong>中挂载的系统操作的时候，<strong>挂载的系统</strong>监听到了操作，并交给挂载的操作系统处理，然后被<strong>虚拟机监视器</strong>监听到，收集数据后发送给<strong>物理主机</strong>，最终由<strong>物理主机</strong>完成系统调用，最后返还给<strong>挂载的系统</strong>并回显结果。这一整串过程是不是非常复杂？是不是能够理解为什么虚拟机挂载的时候慢一点了？</p><p>而<strong>Docker</strong>就不一样，取消了<strong>Hypervisor</strong>和<strong>挂载的系统</strong>，直接使用对应的基础代码库。这个基础代码库甚至可以不是操作系统，可以是<strong>单纯的某个应用</strong>，比如<code>MySQL</code>、<code>Zookeeper</code>等等，这就在灵活性上提升了一个数量级；其次，取消了<code>Hypervisor</code>能够让<code>Docker</code>运行中容器里的操作直接交给物理主机进行系统调用，速度上非常占优，相应非常迅速。</p><p>但是相对而言两者也同样有利有弊。</p><p>对于虚拟机来说，经过<strong>Hypervisor</strong>和<strong>挂载的系统</strong>能够实现非常完美的隔离性；而仅使用<strong>Docker Engine</strong>运行的几个容器隔离性相对较弱。</p><p>不仅如此，直接将请求传送给物理主机进行系统调用的<strong>Docker</strong>是非常依赖物理主机的架构和操作系统内核的。例如：<code>Windows</code>能够使用<code>Docker</code>运行<code>Windows Server</code>和<code>Linux</code>系统，但是<code>Linux</code>系统则只能够使用<code>Docker</code>运行<code>Linux</code>系统，因为内核完全不支持；而使用<strong>Hypervisor</strong>的<strong>虚拟机</strong>则使用中间件屏蔽了操作系统内核和架构的具体实现，从而使得<strong>虚拟机</strong>能够挂载<code>Windows</code>、<code>Linux</code>甚至<code>MacOS</code>。</p><p>二者差别还是非常大的，但在不同的环境下也各有千秋，开发者们需要根据自己的需求选择合适的实现方法。当然实际生产环境中还是希望能够使用更为轻量级的<code>Docker</code>来实现比较不错的响应速度。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>简介主要介绍了<code>Docker</code>相关，包括生态和优缺点。相信大家已经对<code>Docker</code>有了基本的了解。由于<code>Windows</code>有一键安装<code>Docker</code>的安装包，所以接下来我们就在<code>Ubuntu</code>下安装<code>Docker</code>，就不考虑<code>Windows</code>了。</p><p>首先确认我们要<strong>删除旧版本</strong>（<em>如果没有可以跳过</em>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge docker</span><br><span class="line">sudo apt-get purge docker-ce</span><br><span class="line">sudo apt-get remove -y docker-*</span><br></pre></td></tr></table></figure><p>然后<strong>开始安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntuan安装Docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 - 进入root权限</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有设置root用户的密码使用如下语句</span></span><br><span class="line">sudo su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置了root用户的密码使用如下语句</span></span><br><span class="line">su</span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 - 下载必要的包</span></span><br><span class="line">apt-get install \</span><br><span class="line">  apt-transport-https \</span><br><span class="line">  ca-certificates \</span><br><span class="line">  curl gnupg-agent \</span><br><span class="line">  software-properties-common -y</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2 - 添加国内阿里云docker-ce镜像的GPG-key</span></span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 - 添加国内阿里云docker-ce镜像源</span></span><br><span class="line">add-apt-repository \</span><br><span class="line">  "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \</span><br><span class="line"><span class="meta">  $</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">  stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4 - 更新包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 5 - 安装包</span></span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p><code>CentOS</code>安装<code>Docker</code>的方法也附上，你会用到的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS安装Docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1 - 下载必要的包</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2 - 配置源</span></span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 - 列出所有版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span><span class="bash"> 4 - 选择安装版本并填入<span class="variable">$&#123;version&#125;</span></span></span><br><span class="line">yum install docker-ce-$&#123;version&#125; -y</span><br></pre></td></tr></table></figure><p>到这里大致上就<strong>结束</strong>了。我们来检验一下是不是安装好了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure><p>如果输出是这样的，那么就是安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker version 19.03.12, build 48a66213fe</span><br></pre></td></tr></table></figure><p>当然，这其中的数字和字符串可能每个人选择的版本不同就会显示不一样的结果，这一点无需担心，只要确认能够出现这样的信息就是<strong>安装成功</strong>。</p><p>下面是<strong>安装失败</strong>的输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Command 'docker' not found, but there are 21 similar ones.</span><br></pre></td></tr></table></figure><p>安装完之后就是使用了。但是由于客户端默认连接的<code>Docker Hub</code>是国外的镜像仓库，所以下载速度非常慢，这里就需要更改默认配置为国内镜像仓库。</p><p><strong>首先是确认用什么仓库</strong>。目前比较好的库就是<strong>Docker CN</strong>、网易、阿里云等等。但是阿里云镜像需要自行申请，手续麻烦而且界面不够人性化，所以我选择网易，也就是<code>http://hub-mirror.c.163.com</code>。</p><p>其次，来<strong>确认<code>Docker</code>服务是否启动</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker images # 查看镜像列表，如果报错则服务未启动</span><br><span class="line">systemctl status docker # 系统调用查看服务</span><br></pre></td></tr></table></figure><p><strong>如果没有启动就打开</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker # 安装后第一次运行需要启动服务</span><br></pre></td></tr></table></figure><p>启动之后就会生成<code>/etc/docker</code>文件夹，如果没有请检查是否启动失败。</p><p>在里面添加<code>daemon.json</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line">sudo touch daemon.json</span><br><span class="line">sudo vi daemon.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入文本：</span></span><br><span class="line">&#123;</span><br><span class="line">  "registry-mirrors": ["http://hub-mirror.c.163.com"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我是选择了网易镜像，你也可以替换为其他镜像。</p><p>然后拉取速度就非常快了。</p><p><strong>愉快的玩耍吧</strong>！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;简介部分主要参考了&lt;strong&gt;尚硅谷周阳&lt;/strong&gt;的&lt;a href=&quot;https://bilibili.com/BV1Vs411E7AR&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;B站视频&lt;/a&gt;，安装部分主要参考了&lt;a href=&quot;https://www.cnblogs.com/walker-lin/p/11214127.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;walker_lin&lt;/code&gt;的&lt;code&gt;docker&lt;/code&gt;学习（一）&lt;code&gt;ubuntu&lt;/code&gt;上安装&lt;code&gt;docker&lt;/code&gt;一文&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="运维" scheme="http://www.sakebow.cn/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="http://www.sakebow.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>版本控制的另一种打开方式</title>
    <link href="http://www.sakebow.cn/2020/07/08/Java/SpringCloud/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.sakebow.cn/2020/07/08/Java/SpringCloud/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/</id>
    <published>2020-07-08T13:02:00.000Z</published>
    <updated>2020-11-13T07:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>节奏越来越开的现今社会，项目完成速度也越发加快，于是一个项目的人数也就越来越多。这个时候版本控制也就尤为重要。本篇将不再说明使用<code>coding</code>、<code>Gitee</code>或者<code>GitHub</code>进行托管的方法，而是使用<code>GitLab</code>和<code>Nenux</code>实现的<code>DIY</code>托管平台</strong></p><a id="more"></a><h2 id="什么是GitLab"><a href="#什么是GitLab" class="headerlink" title="什么是GitLab"></a>什么是GitLab</h2><p><code>GitLab</code>实际上也是一种<code>GitHub</code>，只不过<code>GitLab</code>可以本地部署，这样就能够实现<code>GitHub</code>的私有代码库，并且<code>GitLab</code>免费开源。细心的你应该很容易就发现了<code>GitHub</code>官网在创建代码库的时候能够让用户选择创建开源仓库或者私有仓库，可是还有一行小字：<strong>每个月$7</strong>。这就很伤心了。所以<code>GitLab</code>实际上也是给了我们一个自己动手创建私有仓库的小办法。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p><code>GitLab</code>使用<code>Ruby on Rails</code>搭建，虽然有一定的便利性，却安装步骤极其麻烦，是现在不可多得的<strong>反人类</strong>开源框架。不过，就算再怎么反人类，也是有办法制服他的。<del><em>以下就是早期人类制服野生<code>GitLab</code>的记录。</em></del></p><p>首先是<code>GitLab</code>。我们选择中文版的安装包：<code>twang2218/gitlab-ce-zh</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull twang2218/gitlab-ce-zh</span><br></pre></td></tr></table></figure><p>这个包一共<strong>1.61G</strong>，非常庞大，下载需要一些时间。如果是国外镜像很容易下载失败。如果可以的话尽可能使用国内镜像。</p><p>紧接着我们需要一份<code>docker-compose.yml</code>文件，通过<code>docker-compose</code>我们能够更快速、更一体化地完成镜像的创建。</p><p>下面是<code>docker-compose.yml</code>文件的具体内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span> <span class="comment"># 版本号</span></span><br><span class="line"><span class="attr">services:</span> <span class="comment"># 开启服务</span></span><br><span class="line">  <span class="attr">gitlab:</span> <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh:latest'</span> <span class="comment"># 使用镜像</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">'GitLab'</span> <span class="comment"># 主机名称（自定义）</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment"># 环境配置</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">external_url</span> <span class="string">'http://192.168.1.112:8080'</span></span><br><span class="line">        <span class="string">gitlab_rails['gitlab_shell_ssh_port']</span> <span class="string">=</span> <span class="number">4022</span></span><br><span class="line">        <span class="string">unicorn['port']</span> <span class="string">=</span> <span class="number">8888</span></span><br><span class="line">        <span class="string">nginx['listen_port']</span> <span class="string">=</span> <span class="number">8080</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment"># 端口映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4080:8080'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4443:8443'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'4022:22'</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 挂载卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/config:/etc/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/usr/local/docker/gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><p><strong>在文件中尤其注意以下几点</strong>：</p><ul><li><p><code>external_url</code>规定了我们访问地址，但是映射之后就变成了<code>192.168.1.111:4080</code>，连规定的<code>IP</code>地址都掰成了物理主机的<code>IP</code>地址，即<code>192.168.1.111</code>。</p></li><li><p><code>nginx</code>的监听端口一定要和<code>external_url</code>的端口保持一致</p></li></ul><p>好了，我们开始吧。既然文件中规定了各种配置文件的位置，那么我们就把<code>docker-compose.yml</code>文件放到<code>/usr/local/docker/gitlab</code>中吧！接着跳转到这个文件夹中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/SpringCloud/Docker%E5%BC%80%E5%90%AFGitLab%E6%9C%8D%E5%8A%A1.png" alt="输入流程"></p><p>这里需要声明一点：命令<code>docker-compose up -d</code>中的<code>-d</code>千万不可省略，是使容器后台运行的参数。因为是服务器，所以需要持续监听，也就是说将会有大量的日志信息会<strong>不间断输出</strong>。所以不加上<code>-d</code>的同学就只是干看着命令行一行行滚动，实际上什么时候编译好了都不知道。就像下面这样不停的输出：</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/%E6%97%A0%E6%AD%A2%E5%A2%83%E7%9A%84%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6.png" alt="无休止的等待界面"></p><p>然后就是漫长的等待……好吧其实也不是很漫长。启动之后访问，不停的刷新，首先出来的是这个页面：</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/%E7%AD%89%E5%BE%85%E7%95%8C%E9%9D%A2.png" alt="等待界面"></p><p>然后就到了这里。</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/%E8%BF%9B%E5%85%A5%E7%95%8C%E9%9D%A2.png" alt="正确界面"></p><p>由于我使用的内存是<strong>4+16G</strong>，全过程一共90秒。</p><h2 id="帐号登陆"><a href="#帐号登陆" class="headerlink" title="帐号登陆"></a>帐号登陆</h2><p>然后，到这一步，就尬住了。新账号？确认密码？什么东西？<code>GitLab</code>官网还上不去怎么办？</p><p>别担心，我们可以直接操作服务器。</p><p>我们不是已经用<code>Docker</code>启动了一个本地服务器嘛，就直接用<code>docker exec</code>命令接入服务器，修改用户名和密码就好了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">sudo su # 超管权限</span><br><span class="line">docker ps -a # 查看我们启动的容器编号是多少，我这里是45d3728d94c4</span><br><span class="line">docker exec -it 45 /bin/bash # 进入容器</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器内</span></span><br><span class="line">gitlab-rails console production # 操作gitlab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> GitLab操作台</span></span><br><span class="line">user = User.where(id:1).first # 显示默认用户信息</span><br><span class="line">user.password = $&#123;YOUR PASSWORD&#125; # 设置自定义密码</span><br><span class="line">user.save! # 保存用户信息</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/SpringCloud/%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF.png" alt="输入"></p><p>这时我们再进去修改密码就可以使用了。</p><p><img src="https://sakebow.gitee.io/images/SpringCloud/%E6%88%90%E5%8A%9F.png" alt="进入界面"></p><p>其他的就是和<code>GitHub</code>一样的用了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;节奏越来越开的现今社会，项目完成速度也越发加快，于是一个项目的人数也就越来越多。这个时候版本控制也就尤为重要。本篇将不再说明使用&lt;code&gt;coding&lt;/code&gt;、&lt;code&gt;Gitee&lt;/code&gt;或者&lt;code&gt;GitHub&lt;/code&gt;进行托管的方法，而是使用&lt;code&gt;GitLab&lt;/code&gt;和&lt;code&gt;Nenux&lt;/code&gt;实现的&lt;code&gt;DIY&lt;/code&gt;托管平台&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://www.sakebow.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud简介</title>
    <link href="http://www.sakebow.cn/2020/07/08/Java/SpringCloud/SpringCloud%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.sakebow.cn/2020/07/08/Java/SpringCloud/SpringCloud%E7%AE%80%E4%BB%8B/</id>
    <published>2020-07-08T13:02:00.000Z</published>
    <updated>2020-12-09T15:47:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>不得不说，<code>Java</code>行业变动实在太大。从一开始的<code>J2EE</code>，到<code>SSH</code>、<code>SSM</code>，接着就马上迎来了<code>SpringBoot</code>和<code>SpringCloud</code>。这里我使用的是<a href="https://bilibili.com/BV1jJ411S7xr" target="_blank" rel="noopener">狂神说Java的SpringCloud视频</a>，说的非常浅显，也很全面。</strong></p><a id="more"></a><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先声明，<code>SpringCloud</code>严格意义上来说不是一个新的框架，而是一个由旧的技术抽象出统一的规范而形成的很大的生态。从<code>SpringCloud</code>官网中就能看出，它不是一个配一配就能用的框架，而是一个很大的工程，下面附带非常多的子项目，包括网关、分布式、权限管理等等非常多的内容，但是本质还是<code>Spring</code>，模块也是基于<code>SpringBoot</code>，是一个典型的旧事新篇。</p><h2 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h2><p>如果你是完全没有编程基础，或者说从未接触过分布式，那就来跟着我一起学吧，不要有任何怀疑。如果你有一定的基础，还请多看看<code>JVM</code>，有余力甚至可以尝试当前热门的<code>Python</code>和<code>Go</code>，这个框架学习笔记已经满足不了你了。</p><p>另外呢，许多社区的共同努力也让<code>SpringCloud</code>有了足够的拓展了，目前的热门开源项目就是原生的<code>SpringCloud</code>和阿里的<code>SpringCloud Alibaba</code>。但是两者有着较大的差别。更详细的差别还请查看<a href="https://blog.csdn.net/feichitianxia/article/details/92682828" target="_blank" rel="noopener">木子雷的“通过对比<code>Dubbo</code>和<code>SpringCloud</code>，综合选择最合适的”</a>，这里简单总结就是：阿里的<code>SpringCloud Alibaba</code><strong>生态还未成熟</strong>，许多关键点还未有对应成熟框架开源，而且集成第三方框架也有些许困难，在技术成熟度上，原生的<code>SpringCloud</code>更胜一筹，这也是为什么目前原生的使用更广泛。</p><h2 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h2><p>不管是做什么都是要事先做一点知识储备的，学习也不例外。这里并不推荐什么学习顺序，因为每个人的学习方式都有所不同，有些人喜欢实践优先，而有些人喜欢理论优先，大家还是根据自己的步调，急也急不来。</p><p>另外，多多少少还是需要有一点点<code>Maven</code>基础，如果没有深入了解的话起码应该有一个<code>SSM</code>项目经验，这个就是典型的<code>Maven</code>应用。如果对<code>Spring</code>没有更深入的了解，有最基本的<code>API</code>使用经验也是足够的，最起码学会如何使用<code>SpringCloud</code>是够了。如果还需要进阶的话就需要<code>JVM</code>和<code>Spring</code>以及<code>SpringMVC</code>的基础了。当然，这些都是后话了。这篇笔记本来就是入门笔记，所以要求比较低，各位还请放心观看。如果避开所有说明就是一个快速无原理速通秘籍。在这里还是希望各位不要在掌握了<code>API</code>的调用之后沾沾自喜，想要生活得更体面还是需要进阶的。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先是<strong>硬件</strong>的选择。一台足够顺手的电脑是一个好的开始，比如键盘短路、内存不足等等都是很让人头疼的问题。这些可以尽快联系专业人士或者多关注拆装机博客自行安装。如果是比较小的问题，比如更换键盘、加装内存等等建议自行解决，拆机装机能够极大锻炼一些小技巧，面对众多螺丝钉的时候也能够极大地锻炼你的耐心和细心。</p><p>接着就是<strong>系统</strong>的选择。如果你已经厌烦了<code>Windows</code>冗赘的后台，不妨尝试免费的<code>Ubuntu</code>、<code>CentOS</code>等，或者国产的<code>Deepin</code>、<code>UOS</code>等。当然，你也可以选择有些昂贵的<code>MacOS</code>，这些都是需要认真考虑的。如果你自制力较差，选择了<code>Windows</code>却学一会了马上打开了游戏，可以考虑更换系统协助戒网瘾。如果希望尝试新系统却无法抛弃原先<code>Windows</code>的使用习惯，<code>Deepin</code>和<code>MacOS</code>将会是一个很不错的选择；如果你有条件，建议直接选择<code>MacOS</code>或者选择<strong>黑苹果</strong>，因为这一系统设计的初衷就是为了设计人员和编程人员；如果没有条件还是建议选择<code>Ubuntu</code>系统，因为是专为编程人员打造的专业系统，也因为它比较方便而且美观，对<code>Linux</code>新手来说是一个不错的选择。</p><p><strong>配置环境</strong>就不再赘述了，无论是<code>Windows</code>还是<code>Ubuntu</code>抑或<code>MacOS</code>，都有非常多、非常详细的说明，这里大家自行根据自己的情况选择合适的教程，需要安装的有<code>jdk</code>、<code>Maven</code>。</p><p>然后就是<strong>应用</strong>。当前<code>IntelliJ</code>公司做的一系列产品已经足够优秀了，但是收费。能够通过一些其他方式获得或者有条件支持正版的话推荐使用，毕竟代码自动补充、源码追溯、全域查找等功能实在是太人性化了。而<code>Eclipse</code>虽然逊色一点，却也是经典的<code>Java</code>程序编辑器。很多企业还是喜欢使用自己魔改的<code>Eclipse</code>来进行各种各样的操作，到目前为止也有较多的社区在为<code>Eclipse</code>插件做贡献，总能找到你喜欢的一款。但是由于我弄到了一款<code>IntelliJ</code>的<code>IDEA</code>，所以就不再使用<code>Eclipse</code>演示了。</p><p>最后，<strong>寻找合适的教程开始吧</strong>！我选择了狂神，如果你觉得可以，就跟上我一起吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;不得不说，&lt;code&gt;Java&lt;/code&gt;行业变动实在太大。从一开始的&lt;code&gt;J2EE&lt;/code&gt;，到&lt;code&gt;SSH&lt;/code&gt;、&lt;code&gt;SSM&lt;/code&gt;，接着就马上迎来了&lt;code&gt;SpringBoot&lt;/code&gt;和&lt;code&gt;SpringCloud&lt;/code&gt;。这里我使用的是&lt;a href=&quot;https://bilibili.com/BV1jJ411S7xr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;狂神说Java的SpringCloud视频&lt;/a&gt;，说的非常浅显，也很全面。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="SpringCloud" scheme="http://www.sakebow.cn/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>MySQL简介</title>
    <link href="http://www.sakebow.cn/2020/07/07/MySQL/MySQL%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.sakebow.cn/2020/07/07/MySQL/MySQL%E7%AE%80%E4%BB%8B/</id>
    <published>2020-07-07T09:16:00.000Z</published>
    <updated>2020-12-07T23:44:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong><code>MySQL</code>是最流行的关系型数据库管理系统之一，因为其轻量级、自由度高、免费开源而备受青睐。现在国内也有非常多的大型企业魔改<code>MySQL</code>而特化某种极端场景，其中以阿里为典型代表。</strong></p><a id="more"></a><blockquote><p><code>Oracle</code>数据库是它是一种高效率、可靠性好的、适应高吞吐量的数据库方案。（<em>摘自百度百科：<a href="https://baike.baidu.com/item/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener">Oracle数据库</a></em>）</p></blockquote><p>这是<code>Oracle</code>留给我们的印象。现在许多政府主导的项目多使用的就是<code>Oracle</code>，因为适应高并发且安全稳定，但是相当的重量级，对服务器的配置要求相当的高，安装时也要求图形化界面，对于少有<code>GUI</code>界面的<code>Linux Server</code>并不是非常的友好，对于后台线程繁多的<code>Windows</code>系统也并没有好很多。但是它最大的特点就是数据恢复。每次的操作都保存在了磁盘上，可以随时恢复，<code>Oracle</code>公司也能够对企业提供对应的收费服务。</p><p>而与之对应的，MySQL不仅数据容易丢失，而且诊断调优解决方案少，安全上也更容易被仿冒进而被攻击，可以说在各种程度上还在起跑阶段。但是由于其开源、免费两个特点，不少社区已经逐渐在丰富<code>MySQL</code>的性能和缺陷。许多公司也在根据自己的需求修改并使用。</p><p>更详细的对比情况如下所示：（总结自<a href="https://www.cnblogs.com/xu-cceed3w/p/8824199.html" target="_blank" rel="noopener">IT小黑的博客</a>）</p><h2 id="MySQL和Oracle的对比"><a href="#MySQL和Oracle的对比" class="headerlink" title="MySQL和Oracle的对比"></a>MySQL和Oracle的对比</h2><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>自动提交</td><td>手动使用<code>commit</code>命令</td></tr></tbody></table><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td><code>limit</code>命令</td><td>伪列<code>ROWNUM</code>和嵌套查询</td></tr></tbody></table><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>两者都支持<code>serializable</code>串行化事务隔离级别，都实现了最高级别的读一致性，即一个<code>session</code>提交后其他<code>session</code>才能够看到提交的修改</p><ul><li><p>MySQL</p><p><code>read commited</code>的隔离级别。</p></li><li><p>Oracle</p><p><code>repeatable commit</code>的隔离级别。不同的是，Oracle会在undo表中构造多个版块，能够让开发者能够查询旧数据块。举一个比较简单的例子，当插入学生数据的时候系统自动确定学号，并添加10点积分。代码如下：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">TRIGGER</span> JWXT.TRI_STUDENT_ID_CALC</span><br><span class="line"><span class="comment">-- 在JWXT中创建触发器TRI_STUDENT_ID_CALC</span></span><br><span class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="comment">-- 在插入数据之前触发该触发器定义的事件</span></span><br><span class="line"><span class="keyword">ON</span> TB_STUDENT</span><br><span class="line"><span class="comment">-- 对应TB_STUDENT表进行操作</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="comment">-- 触发器针对每一行触发</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  student_no <span class="built_in">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="comment">-- 定义字段 student_no 记录当前是第几个学生</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">-- 触发器主体</span></span><br><span class="line"><span class="comment">-- 假设 TB_STUDNET 表建立了序列 SEQ_STUDNET</span></span><br><span class="line"><span class="comment">-- 假设 TB_STUDENT 表记录学生学号的字段是 student_id</span></span><br><span class="line">  <span class="keyword">SELECT</span> SEQ_STUDENT.NEXTVAL <span class="keyword">INTO</span> student_no <span class="keyword">FROM</span> SYS.dual;</span><br><span class="line">  <span class="comment">-- 将当前序列输入变量 student_no</span></span><br><span class="line">  :NEW.student_id := to_char(sysdate, "yyyyMMddhhmmss") || student_no;</span><br><span class="line">  <span class="comment">-- 修改student_id</span></span><br><span class="line">  :NEW.count := :OLD.count + 10;</span><br><span class="line">  <span class="comment">-- 给帐务添加10点积分</span></span><br><span class="line"><span class="comment">-- 错误处理</span></span><br><span class="line">EXCEPTION</span><br><span class="line">  RAISE_APPLICATION_ERROR(100031, "学号生成出错"); <span class="comment">-- 抛出异常</span></span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>这里的<code>:NEW</code>和<code>:OLD</code>就是典型的访问<strong>新数据</strong>和<strong>旧数据</strong>。</p><h3 id="事务支持"><a href="#事务支持" class="headerlink" title="事务支持"></a>事务支持</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>仅在<code>InnoDB</code>引擎中开启行级所的情况下才支持事务</td><td>完全支持</td></tr></tbody></table><h3 id="数据持久"><a href="#数据持久" class="headerlink" title="数据持久"></a>数据持久</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>重启服务将会完全丢失所有数据、数据库更新字段后立即丢失原先数据</td><td>提交数据的操作全部存在磁盘上，随时可恢复；并且<code>Oracle</code>公司提供数据恢复的收费服务</td></tr></tbody></table><h3 id="并发支持"><a href="#并发支持" class="headerlink" title="并发支持"></a>并发支持</h3><ul><li><p>MySQL</p><p><code>MyISAM</code>引擎下仅支持表级锁，即当一个<code>session</code>修改表后，整个表被锁住，其他任何会话无法对表进行任何操作。这对高并发要求极不友好，大量的时间都在等待上一个甚至几个<code>session</code>退出</p></li><li><p>Oracle</p><p>完全支持行锁。在当前<code>session</code>修改表的过程中，其他<code>session</code>能够访问并修改其他行，单位时间内能够处理更多的请求</p></li></ul><h3 id="逻辑备份"><a href="#逻辑备份" class="headerlink" title="逻辑备份"></a>逻辑备份</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>锁住整张表，影响数据库的增删改操作</td><td>不锁表，对其他操作无影响</td></tr></tbody></table><h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><ul><li><p>MySQL</p><p>复制服务器配置简单。但主库出问题时，从库有可能丢失一定的数据。且需要手工切换从库到主库</p></li><li><p>Oracle</p><p>既有推或拉式的传统数据复制，也有dataguard的双机或多机容灾机制，主库出现问题是，可以自动切换备库到主库，但配置管理较复杂。</p></li></ul><h3 id="性能诊断"><a href="#性能诊断" class="headerlink" title="性能诊断"></a>性能诊断</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>调优方法较少，主要是<code>慢查询日志</code></td><td>调优方法成熟，可实现多种自动分析、诊断调优功能，有<code>awr</code>、<code>addm</code>、<code>sqltrace</code>、<code>tkproof</code>等</td></tr></tbody></table><h3 id="权限安全"><a href="#权限安全" class="headerlink" title="权限安全"></a>权限安全</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>仅和主机IP有关，容易被仿冒</td><td>安全认证思想比较传统，中规中矩</td></tr></tbody></table><h3 id="分区索引"><a href="#分区索引" class="headerlink" title="分区索引"></a>分区索引</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>技术不成熟</td><td>技术成熟</td></tr></tbody></table><h3 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>除了自带的命令行就是第三方</td><td>有多种应用程序解决方案</td></tr></tbody></table><h3 id="附加服务"><a href="#附加服务" class="headerlink" title="附加服务"></a>附加服务</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>无</td><td>数据恢复等由<code>Oracle</code>公司提供的完整服务</td></tr></tbody></table><h3 id="其他条件"><a href="#其他条件" class="headerlink" title="其他条件"></a>其他条件</h3><table><thead><tr><th>MySQL</th><th>Oracle</th></tr></thead><tbody><tr><td>免费开源、轻量级</td><td>付费服务、超重量级</td></tr></tbody></table><h2 id="为什么选择MySQL"><a href="#为什么选择MySQL" class="headerlink" title="为什么选择MySQL"></a>为什么选择MySQL</h2><p>这么一罗列似乎<code>MySQL</code>始终处于劣势。但是<code>MySQL</code>它本身的轻量级提供了非常方便的部署环境。众多中小企业还是非常喜欢使用<code>MySQL</code>的。其次就是因为他灵活的架构。</p><p>他是这么一个架构：（图源来自<a href="https://blog.csdn.net/weixin_42358062/article/details/80730694" target="_blank" rel="noopener">CSDN</a>）</p><p><img src="https://images2018.cnblogs.com/blog/1411859/201806/1411859-20180617124155105-273948974.png" alt="MySQL架构图"></p><p>形象一点地说，大概就是这样子：</p><ul><li><p>连接层——守门大爷</p><p>首先就是数据库连接池管理所有的连接，基本上所有的数据库都有这么一个东西。比如<code>Oracle</code>的<code>ODAC</code>就是其中之一。对外于各种语言连接器相对应，对内则于数据的读写相对应。</p></li><li><p>服务层——客服中心</p><ul><li><p>事务管理器——客服小姐</p><p>事务管理器接到请求之后立马转发到<code>SQL</code>接口，即立马转告对应工厂部门</p></li><li><p>优化器——技术顾问</p><p><code>SQL</code>并不像<code>C</code>语言，所写即所运行，而是有专门的优化器来根据系统自己的想法来优化当前的算法，也就像是一个了解技术的顾问一样帮助挑选较优的选择。</p><p>当然，这个选择不一定是最好的，也不一定适合当前环境，但确实是根据系统特定的优化算法算出来的最优解。就像是店家推荐不一定是用户所爱，但也象征了一些什么。</p><p>当然，<code>SQL</code>调优可不单纯是根据数学算算就好了，是结合实际不断的调整，不断的放弃，最终得出来无限接近极限的算法。这就不是系统自带的优化器能够做到的了。就像阿里，既然已经有可靠的<code>DBA</code>数据库管理员就直接魔改<code>MySQL</code>，删掉相对来说没多大作用的优化器，更接近极限响应时间。</p></li><li><p>缓存和缓冲——搬运工</p><p>就如字面意思，搬运数据、暂存数据等等</p></li></ul></li><li><p>引擎层——办公中心</p><p>这里可以说是整个<code>MySQL</code>的精髓所在。这部分最大的特点就是<strong>可插拔</strong>，也就是按需添加删除存储引擎，对应不同的应用场景魔改成不同的<code>MySQL</code>，这是<code>Oracle</code>没有的，也是<code>MySQL</code>无限的潜能所在。各种社区、各种企业、各种研究所都在慢慢魔改，并生成贴合对应生产环境的数据库系统，同时兼顾了轻量级和高可用，相对于什么都有的超重量级<code>Oracle</code>而言是非常大的优点。</p><p>目前用的最多的就是支持行锁的<code>InnoDB</code>引擎。当然也有使用其他引擎的，这都是看企业自己的选择了。</p></li><li><p>存储层——仓库</p><p>这部分主要是文件系统，所有的数据都保存在磁盘上来实现数据的持久化。对于<code>InnoDB</code>而言，这部分就是通过<code>B+树</code>实现的文件系统，由于非叶子节点不占用实际内存，所以减小了内存压力，同时也减少了磁盘IO，极大加快了查询速度。这也是<code>InnoDB</code>这么受欢迎的原因之一。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>有关<code>MySQL</code>的基础知识大概就是这些了。之后将会逐步深挖，从入门的索引、<code>SQL</code>再到进阶的调优、主从等，逐步了解<code>MySQL</code>数据库。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;MySQL&lt;/code&gt;是最流行的关系型数据库管理系统之一，因为其轻量级、自由度高、免费开源而备受青睐。现在国内也有非常多的大型企业魔改&lt;code&gt;MySQL&lt;/code&gt;而特化某种极端场景，其中以阿里为典型代表。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="SQL" scheme="http://www.sakebow.cn/categories/SQL/"/>
    
    
      <category term="MySQL" scheme="http://www.sakebow.cn/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>笔记本拆机初体验</title>
    <link href="http://www.sakebow.cn/2020/07/07/hardware/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8B%86%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://www.sakebow.cn/2020/07/07/hardware/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8B%86%E6%9C%BA%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2020-07-07T00:30:00.000Z</published>
    <updated>2020-12-07T17:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>四年没有被水泼键盘的我，最终在第四年因为一个小疏忽整杯水泼到了键盘上，导致<code>G</code>、<code>H</code>等几个关键的键短路了。苦于暂时没钱买好点脑，就有了这次拆机换键盘的体验。</strong></p><a id="more"></a><h2 id="准备活动"><a href="#准备活动" class="headerlink" title="准备活动"></a>准备活动</h2><p>就像运动前的准备活动一样，在拆机之前我们需要了解足够多的词汇和小技巧，在后面我们也方便说明和使用。</p><h3 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h3><ul><li><p>笔记本分为4个面，分别是屏幕外壳、屏幕边框、键盘和底部。为了方便，我们依次编号为<code>A</code>、<code>B</code>、<code>C</code>、<code>D</code>。这次是我的键盘坏掉了，所以主要换<code>C</code>面。</p></li><li><p>相较于以前，笔记本的各种连接线已经集成在一张可以<strong>随意翻折</strong>的绝缘胶套，多为白色套、蓝色头，偶有黑色套、黑色头。这种胶套非常扁平，就像纸一样，仅在接口处暴露极小的接点，确保了连通性的同时保证了线路的安全、高自由度和占用空间小。</p></li><li><p>请记住，<strong>人体是导体</strong>。所以一定要小心，尤其注意拆卸过程中拔掉交流电电源。</p></li></ul><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><ul><li><p>人体多多少少也是有一些静电的，电压极大，很有可能对电路板造成不可逆的影响。所以只要是要触摸电路板，首先要做到<strong>防静电</strong>。爱干净的可以去用洗手液好好地<strong>洗个手</strong>，而不那么讲究的就<strong>摸一下地板</strong>把身上的电导走就好了。</p></li><li><p>在拆机的整个过程中，一定要<strong>明确你的目标</strong>，不要把四个面全拆了之后才发现你只需要加一条内存。其次重要的就是<strong>从易到难</strong>。不要一上来就开始卸主板的螺丝，从简单的开始，比如机械硬盘、电源等。</p></li><li><p>如果你有<strong>足够大的桌子</strong>和<strong>格子比较多的收纳盒</strong>，请务必使用。因为这中间涉及很多不同种类的螺丝钉、卡扣等可拆卸的部件，一旦混在一起就不知所措了。如果你不擅长记忆，<strong>每当拆掉一个部分的时候记得拍个照</strong>，记录一下特征，绝对要<strong>保证自己能够拆开后重新拼回去</strong>。</p></li><li><p>年代非常久远的笔记本很多螺丝都老化严重，当螺丝刀不能转动时<strong>切忌加大力度</strong>。否则螺丝很容易劈，也就是槽型从正常的国家标准形状被拧成了圆形，再也拧不动了。这种时候如果有条件的可以用专业的长型喷嘴喷一点点稀盐酸到槽内，既除锈还润滑；如果没有那么好的条件可以使用洗手液，用螺丝刀沾一点，小心的灌到槽内，起到润滑的作用。总之一定不要正面硬刚，很容易造成不可逆的后果，这种没有很高技术要求的过失往往很容易让人陷入深深的抑郁和自我怀疑中。</p></li><li><p>点名批评联想笔记本，从导线到外壳用的各种材料都比较劣质。如果有条件的话尽量换一台新电脑，因为很多东西用久了甚至稍微一动就出大问题。</p></li></ul><p><strong>那么我们现在开始吧！</strong></p><h2 id="查资料"><a href="#查资料" class="headerlink" title="查资料"></a>查资料</h2><p>当然，有以上的知识储备还不够。你要仔细查你的电脑型号和与之匹配的键盘型号，否则货到了也只能干瞪眼。</p><p>比如我的电脑是<code>V310-14IKB</code>，是键盘焊死在<code>C</code>面的型号。第一次没注意，直接买了键盘，发现自己并没有这个条件自己装，更没这个技术把键盘焊下来。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5.jpg" alt=""></p><p>有了这次的经验后就直接在淘宝店上找到了带键盘的<code>C</code>面，整个换上去就好了。</p><h2 id="光驱位拓展电源"><a href="#光驱位拓展电源" class="headerlink" title="光驱位拓展电源"></a>光驱位拓展电源</h2><p>光驱位拓展电源是极少电脑型号拥有的附加电源，能够在一定程度上提高续航能力。拓展电源能够在给主板供电的情况下持续给笔记本原装电源充电。</p><p>但是这个玩意毕竟是可插入式的，会阻碍后盖的拆除。在拆后盖前先把拓展电源拿下来。怎么拿很简单，在底部有一个暴露在外面的卡扣，拉开就能拔出来。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%93%E5%B1%95%E7%94%B5%E6%BA%90.jpg" alt="拓展电源"></p><h2 id="后盖"><a href="#后盖" class="headerlink" title="后盖"></a>后盖</h2><p><strong>后盖并不是最重要的，但是没有后盖是最要命的</strong>。后盖上面没有什么电路需要保护，但是他却需要保护里面的电路。所以各位在拆的时候还是要谨慎，有条件的尽量使用<strong>撬片</strong>，没条件的尽量用刀片等超薄的东西撬开。如果能够确保这台电脑再也不会怎么用，就可以不那么爱惜，使用银行卡、一字螺丝刀、剪刀等略粗、对塑料制品伤害较大的工具撬开。</p><p>比较有年代的机器还有<code>COM</code>口，也就是多媒体接口。这种接口会挡住后盖，加大拆卸难度。这时<strong>切忌大力出奇迹</strong>，一定要小心拆卸。实在挡住了拆不下来就先拆别的地方，有可能其他地方全部拆完最后这个地方不需要拆。</p><p>为了美观，有些会将螺丝和底部颜色做成一样的，这时一定要擦亮眼睛，尤其是黑色底壳难以分辨，很容易一不小心掰断；而有些则会将螺丝藏在橡胶垫下方，这对强迫症非常不友好，但是为了维修还是把橡胶垫撕下来吧。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E5%88%9D%E6%AD%A5%E5%AE%89%E8%A3%85%E6%B5%8B%E8%AF%95.jpg" alt="打开后盖"></p><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><p>机械硬盘的拆装应该就是最简单的了。当然，是在你有的情况下。如果没有，请直接跳过这一步。</p><p>机械硬盘除了固定用的螺丝之外，一般都会有一个方便拉扯的地方，一定要记得先拉开，确保完全分离再抬起拿开。就像下图一样。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E7%A1%AC%E7%9B%98.jpg" alt="拆硬盘"></p><p>这里有一个方便拉扯的地方，先拉开，再捏住抬起。同理，安装时先放下，再推进去。</p><h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>这里只讨论自带的电源，而不是光驱位拓展电源，因为光驱位拓展电源在第一步就给拆掉了。先给个图说明一下。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E7%94%B5%E6%BA%90.jpg" alt="拆电源"></p><p>没错，图中<strong>带有黄色警示标语的模块</strong>就是电源。这部分看起来像是连接在电脑显示屏上所以很多人并没有注意，包括我也是，我也是拆完才知道这玩意是电源。图中用橙色的线圈起来了一个接口，小心地拔出来。这个就是电源充电供电的接口。</p><p>为什么优先级仅次于机械硬盘？因为拔掉电源线之后主板所有电流立即停止，所有模块立即变为等电势，也就是失去电压。在一开始我们强调了人体是导体，<strong>在没有电压后既保护了你，也保护了电路。</strong></p><p>细心的你可能会发现电源上有两个上螺丝的地方。别担心，这些是在底部外壳上攻的螺丝，拔掉供电接口后你就只需要小心的将电源拉出来就好了。</p><h2 id="导热铜管"><a href="#导热铜管" class="headerlink" title="导热铜管"></a>导热铜管</h2><p>由于我从未使用过水冷，所以没有办法说明。<strong>如果有需要请务必找专业人士</strong>，一旦漏水导致整个主板短路烧坏，将会是很大一笔损失。这里就只对导热铜管进行说明。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E5%AF%BC%E7%83%AD%E9%93%9C%E7%AE%A1.jpg" alt="拆导热铜管"></p><p>从图中我们可以看出，除了六个固定的螺丝以外，没有任何限制铜管的卡扣或者部件，所以除了硬盘之外优先拆除这个部分。</p><h2 id="散热风扇"><a href="#散热风扇" class="headerlink" title="散热风扇"></a>散热风扇</h2><p>就借用刚刚导热铜管的图片说明吧。</p><p>你会发现，散热风扇只有三颗十字螺丝固定，小心地把螺丝卸下来，就能把风扇拿掉。</p><p>但是你会发现，风扇还有一个接口接到了主板上，这是风扇的供电口。我这边供电口实在攻的太紧了，拔不出来，就干脆不拔了。因为我的目标只是带键盘的<code>C</code>面而已，只要我能确保接口的安全就好了。</p><h2 id="显示屏"><a href="#显示屏" class="headerlink" title="显示屏"></a>显示屏</h2><p>风扇除了散热，还有一个很细节的功能，就是集线。风扇拿起来之后，压在下面的电源线和显示屏的线就暴露出来了。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E6%98%BE%E7%A4%BA%E5%99%A8.jpg" alt="拆显示器"></p><p>按照上图的标号顺序，先定位到标着<code>1</code>的三个部分，上面两个是两个橡胶套，轻轻掀开便能连带蓝色的固定胶套一起掀起来；下面一个是接口，轻轻拉出来，标着<code>1</code>的所有部件便分离出来了。</p><p>其次是<code>2</code>。原来是有一个黑色的胶布固定住的，我以为没有什么用，直接撕下来了。没想到的是他居然保护着一红一黑两根线。这两根线不是焊上去的，而是<strong>通过很微小的卡扣卡上去的</strong>。所以这部分拆卸时一定要小心。</p><p>紧接着就是<code>3</code>，这是拆下风扇后暴露出来的线。它的特点是，<strong>有一个黑色的可掀开的盖子固定住</strong>，这时轻轻捏住线扁平的地方向上抬，这样黑色的盖子就掀起来了一点点，这时再用一字螺丝刀、刀片或者手掀起来，这样黑色的线就能轻松抽出来。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E6%98%BE%E7%A4%BA%E5%99%A8%E5%AE%8C%E6%88%90.jpg" alt="成功分离所有显示器模块"></p><p>最后，将<code>C</code>面电源两边的螺丝卸下来，抬起<code>C</code>、<code>D</code>面大于45度，整个底部就能抽出来了。当然你也可以先抬起来再卸螺丝，但是这样就需要更高的角度，避免卸完螺丝整个底部塌下来。</p><p>到这里，<code>A</code>、<code>B</code>和<code>C</code>、<code>D</code>两个部分就<strong>彻底分离</strong>了，也就是显示屏和底部分离。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%98%BE%E7%A4%BA%E5%B1%8F.jpg" alt="显示屏"></p><p>由于我只是换键盘，所以显示屏的<code>A</code>、<code>B</code>面就不分开了。想要分开也很简单，使用撬片小心撬开，没有螺丝钉。接下来就是<code>C</code>、<code>D</code>面的分离。</p><h2 id="指纹"><a href="#指纹" class="headerlink" title="指纹"></a>指纹</h2><p>指纹模块也是只有特定机器才有，尤其是<code>ThinkPad</code>全部产品和联想部分产品。在拆的时候也有一些细节。这里就以我的指纹模块为例。首先指纹模块是这样的：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97.jpg" alt="拆指纹模块"></p><p>细心的你可能注意到途中有些地方没有螺丝。这些没有螺丝的地方不是我不上螺丝，是和其他模块相关联。</p><p>首先就是这个黑黑的挡板了。螺丝卸掉，然后就可以轻松取出。取出来后就是这样子的：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86U%E5%8F%A3.jpg" alt="拆U口"></p><p>这里画圈圈的地方就是需要卸螺丝或者拔线的地方。<em>其实这个接口拔不拔无所谓，因为总归是要整个移到新的<code>C</code>面上。</em></p><p>最后就是指纹模块了。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8B%86%E6%8C%87%E7%BA%B9.jpg" alt="拆指纹"></p><p>这个银色挡板非常巧妙地卡在了很多卡扣中间。我们需要小心的从标着<code>1</code>的地方使用一字螺丝刀或者刀片撬开，用手是捏不到那里的，除非你的指甲又硬又长。接着就是2处的接口。你会发现这次接口的黑色盖子在反方向，同样还是掀起来，这次就算没有指甲也可以轻松扳开。当然，由于是整个模块移走，这个接口也是没有必要拆下来的。</p><p>换到新的<code>C</code>面上就是将上述步骤反过来，先指纹模块、再银色挡板，然后安装<code>USB</code>接口，最后搭上黑色挡板，上螺丝。</p><p>在我拆这部分的时候也是发生了一点点小插曲，<strong>螺丝劈了</strong>。</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%8C%87%E7%BA%B9%E6%A8%A1%E5%9D%97%E7%BF%BB%E8%BD%A6.jpg" alt="指纹模块翻车"></p><p><strong>所以你知道提前准备一些小技巧的重要性了嘛？</strong></p><h2 id="清除主板上剩余的线"><a href="#清除主板上剩余的线" class="headerlink" title="清除主板上剩余的线"></a>清除主板上剩余的线</h2><p>主板是整台电脑非常重要的地方。很多电路都是将铜通过化学手段铺上去，而不是使用导线，不存在什么藕断丝连。<strong>要是板子掰断了就彻底没救了</strong>。</p><p>首先，整个板子所有的固定螺丝应当卸下来，这部分没有什么好说的。还是提醒一点，如果对记忆力没有自信，拧了哪些螺丝拍个照。</p><p>在上述所有步骤结束之后，主板上面应该是没有什么东西了的（<em>我这里还有一个散热风扇拆不掉，但是不影响</em>），最后就清一下剩余的连接线，比如这些：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E7%94%B5%E6%BA%90%E9%99%84%E8%BF%91%E7%9A%84%E7%BB%86%E8%8A%82.jpg" alt="电源附近的细节"></p><p>还有这些：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E5%8E%BB%E6%8E%89%E5%89%A9%E4%BD%99%E8%BF%9E%E6%8E%A5%E7%BA%BF.jpg" alt="剩余连接线"></p><p>由于我够买的<code>C</code>面只有触摸板和键盘，所以这些细节连接线都要撕下来粘到新的<code>C</code>面上。</p><p>到这里，主板就独立出来了。</p><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>我们小心地将主板抬起来，要注意键盘的线是在主板正下方的，<strong>千万不要</strong>直接一掀开，把接口掀断了。</p><p>确认位置后，往合适的方向<strong>180度翻转过来</strong>，就像这样：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E5%AE%8C%E5%85%A8%E6%8B%86%E5%BC%80.jpg" alt="完全拆开"></p><p>看到主板和<code>C</code>面的连接线了吗？那就是目标了。</p><h2 id="拆机结束"><a href="#拆机结束" class="headerlink" title="拆机结束"></a>拆机结束</h2><p>到现在，拆除部分就完全结束了。我们把新的<code>C</code>面换上，将上述所有步骤反过来执行，就是整个电脑的安装步骤了。</p><p>最后放上成功的图片：</p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.jpg" alt="安装成功"></p><p><img src="https://sakebow.gitee.io/images/%E8%A3%85%E6%9C%BA/%E6%9C%80%E7%BB%88%E5%AE%8C%E6%88%90%E7%89%88.jpg" alt="成功点亮"></p><p>如果你希望这台电脑再用一会（<em>我相信笔记本电脑折腾成这样肯定是想的</em>），那就加一点内存，加一块光驱位电池或者更换全新的电池，这样能够在续航和使用上稍微增强一点。这些就比较容易了，最起码是不需要动主板上面任何一枚螺丝的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;四年没有被水泼键盘的我，最终在第四年因为一个小疏忽整杯水泼到了键盘上，导致&lt;code&gt;G&lt;/code&gt;、&lt;code&gt;H&lt;/code&gt;等几个关键的键短路了。苦于暂时没钱买好点脑，就有了这次拆机换键盘的体验。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="硬件" scheme="http://www.sakebow.cn/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="笔记本拆机" scheme="http://www.sakebow.cn/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC%E6%8B%86%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Vue钩子的一点小坑</title>
    <link href="http://www.sakebow.cn/2020/07/02/JavaScript/Vue/Vue%E9%92%A9%E5%AD%90%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/"/>
    <id>http://www.sakebow.cn/2020/07/02/JavaScript/Vue/Vue%E9%92%A9%E5%AD%90%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E5%9D%91/</id>
    <published>2020-07-02T14:05:00.000Z</published>
    <updated>2020-12-02T22:15:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>Vue中不同的钩子有不同的功能，应对不同的场景灵活使用可以实现很不错的效果。但是还是就算会用框架，基本功还是不能丢。Vue里面有个小坑实际上是ES5和ES6的小区别，在框架中有着完全不同的效果。</strong></p><a id="more"></a><h2 id="正常的写法"><a href="#正常的写法" class="headerlink" title="正常的写法"></a>正常的写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="comment">// 具体方法</span></span><br><span class="line">&#125;,</span><br><span class="line">created () &#123;</span><br><span class="line">  <span class="comment">// 具体方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...其他钩子</span></span><br></pre></td></tr></table></figure><p>这种写法是<code>ES5</code>标准中拥有的写法，就是很普通的<code>方法名(参数){ 方法体 }</code>，在很多语言中都能看到类似的写法。</p><h2 id="不一样的写法"><a href="#不一样的写法" class="headerlink" title="不一样的写法"></a>不一样的写法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 具体方法</span></span><br><span class="line">&#125;,</span><br><span class="line">created: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 具体方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...其他钩子</span></span><br></pre></td></tr></table></figure><p>也许你们能注意到，这里使用了<code>箭头函数</code>，是典型的<code>ES6</code>标准。<code>箭头函数</code>和<code>普通函数</code>的最大区别就是<code>this</code>指针，前者没有而后者有。所以如果使用了<code>箭头函数</code>，这个钩子里将无法访问该组件中的<code>data</code>集合，因为没有指向自己的指针。</p><p>这种写法不会报错，因为是正确的写法，在不访问<code>data</code>集合的时候是没有问题的。如果业务需要访问，那么这个问题将很难发现。</p><p>说到底还是<code>JavaScript</code>基本功的问题。所以还是希望各位不要急于求成，稳扎稳打才能提高正确率。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Vue中不同的钩子有不同的功能，应对不同的场景灵活使用可以实现很不错的效果。但是还是就算会用框架，基本功还是不能丢。Vue里面有个小坑实际上是ES5和ES6的小区别，在框架中有着完全不同的效果。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://www.sakebow.cn/categories/JavaScript/"/>
    
    
      <category term="Vue" scheme="http://www.sakebow.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JVM小工具简介</title>
    <link href="http://www.sakebow.cn/2020/02/06/Java/JVM/JVM%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.sakebow.cn/2020/02/06/Java/JVM/JVM%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2020-02-06T03:05:00.000Z</published>
    <updated>2020-12-02T22:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>这里会简单说明jdk自带的一些小工具，可以非常方便地查看当前地各种情况，比起什么都没有的黑框框还是要方便得多呐。</strong></p><p><strong>这里还是使用<code>jdk8</code>作为说明，<code>jdk9</code>及以上版本暂时还未在中国市场普及就暂时不作考虑了。最后我相信大家下载了jdk第一件事应该就是配置环境变量了吧？这里就默认大家的<code>Windows</code>、<code>Ubuntu</code>以及<code>MacOS</code>中都已经配好<code>jdk8</code>作为环境变量了。</strong></p><a id="more"></a><h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><p>首先是<strong>JConsole</strong>。</p><h3 id="呼出"><a href="#呼出" class="headerlink" title="呼出"></a>呼出</h3><p>那么<code>win+R</code>呼出运行窗口，输入<code>cmd</code>呼出命令行界面，在黑框框中输入<code>jconsole</code>（<em>大小写不敏感</em>），于是就弹出来了个窗口：</p><p><img src="https://sakebow.gitee.io/images/JVM-tools/jconsole.png" alt="JConsole界面"></p><p>同样的，如果你使用的是<code>Ubuntu</code>，那么就是<code>CTRL + ALT + T</code>呼出命令行，也是输入<code>jconsole</code>。</p><p>这里的<code>pid</code>是进程的<strong>唯一代号</strong>，也就是系统给进程<strong>随机分配的唯一指定标识</strong>。由于是随机的，所以<strong>不同的人不同时间打开的<code>pid</code>都会不一样</strong>。</p><p>然后双击链接，会弹出这个提示：</p><p><img src="https://sakebow.gitee.io/images/JVM-tools/%E5%AE%89%E5%85%A8%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5.png" alt="安全连接失败"></p><h3 id="一点点拓展"><a href="#一点点拓展" class="headerlink" title="一点点拓展"></a>一点点拓展</h3><p>在这里不得不提一下<code>SSL</code>链接、<code>HTTP</code>、<code>HTTPS</code>的关系<sup><a href="#refer1">[1]</a></sup>。</p><p>首先是<code>HTTP</code>，它<strong>只有三个步骤</strong>。</p><blockquote><ul><li>封装数据</li><li>使用TCP/IP传输</li><li>服务器接收</li></ul></blockquote><p>这三个步骤就可以正常访问一个超文本链接，也就是我们所说的网页。</p><p>然后是<code>HTTPS</code>，它比<code>HTTP</code>多一个<strong>S</strong>，也就是<strong>SSL安全认证</strong>，它包含了四个步骤：</p><blockquote><ul><li>封装数据</li><li><strong>使用<code>SSL</code>加密</strong></li><li>使用<code>TCP/IP</code>加密</li><li>服务器接收</li></ul></blockquote><p>其中由于<code>SSL</code>加密不可避免地加长了每一段数据帧的字长，所以也无可避免的<strong>增加了传输消耗</strong>，<strong>延长了响应时间</strong>。但是这些消耗带来了<strong>较为安全</strong>的传输方式，在可接受范围内。</p><h3 id="运行界面"><a href="#运行界面" class="headerlink" title="运行界面"></a>运行界面</h3><p>不安全连接后，则会出现四张图表：</p><p><img src="https://sakebow.gitee.io/images/JVM-tools/%E8%BF%90%E8%A1%8C%E7%95%8C%E9%9D%A2.png" alt="JConsole应用运行中"></p><p>在其中我们可以看几乎所有资源的使用，从这些就可以大概看出来程序的运行情况。但是信息非常笼统，所以也不太能定位，就只能看出程序好不好。</p><h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><h3 id="呼出-1"><a href="#呼出-1" class="headerlink" title="呼出"></a>呼出</h3><p>同样是在黑黑的命令行工具中输入<code>jvisualvm</code>，但是他会占用一个命令行窗口，关闭了窗口，应用也跟着关了。</p><p><img src="https://sakebow.gitee.io/images/JVM-tools/jvisualvm.png" alt="占用一个窗口的JVisualVM"></p><p>不过还好你可以加上参数让命令行不占用窗口：</p><figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jvisualvm --console suppress</span><br></pre></td></tr></table></figure><p><img src="https://sakebow.gitee.io/images/JVM-tools/suppress.png" alt="不占用窗口的JVisualVM"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果你使用的是<code>eclipse</code>作为开发工具，无论是官方原版还是自己公司的魔改版，你可以使用<code>eclipse</code>公司自己开发的<strong>应用程序</strong>：<code>Memory Analyser Tools</code>，即<a href="http://www.eclipse.org/mat/downloads.php" target="_blank" rel="noopener">MAT</a>。他不是插件，而是一个外表非常像<code>eclipse</code>的数据可视化应用。</p><p><strong>由于博主使用的是IDEA所以就不贴图了。</strong></p><p>当然还有其它工具，比如<code>jmap</code>等等。这里就不一一列举了。总有一款工具是你用起来最顺手的。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span id="refer1">[1]</span> 摘自<a href="https://www.cnblogs.com/luckylihuizhou/p/6525055.html" target="_blank" rel="noopener">“<code>https</code>,<code>http</code>和<code>ssl</code>的关系”，原作者：菜鸟开车</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里会简单说明jdk自带的一些小工具，可以非常方便地查看当前地各种情况，比起什么都没有的黑框框还是要方便得多呐。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里还是使用&lt;code&gt;jdk8&lt;/code&gt;作为说明，&lt;code&gt;jdk9&lt;/code&gt;及以上版本暂时还未在中国市场普及就暂时不作考虑了。最后我相信大家下载了jdk第一件事应该就是配置环境变量了吧？这里就默认大家的&lt;code&gt;Windows&lt;/code&gt;、&lt;code&gt;Ubuntu&lt;/code&gt;以及&lt;code&gt;MacOS&lt;/code&gt;中都已经配好&lt;code&gt;jdk8&lt;/code&gt;作为环境变量了。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="JVM" scheme="http://www.sakebow.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>学习JVM之前的一些准备</title>
    <link href="http://www.sakebow.cn/2020/02/06/Java/JVM/JVM%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87/"/>
    <id>http://www.sakebow.cn/2020/02/06/Java/JVM/JVM%E5%AD%A6%E4%B9%A0%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87/</id>
    <published>2020-02-06T01:35:00.000Z</published>
    <updated>2020-12-08T20:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>这里是学习JVM视频的一些笔记，版本是<a href="https://pan.baidu.com/s/1nYrw9fie-ZvHTReqD6hdLA" target="_blank" rel="noopener">jdk8u144</a>（提取码：s3xf）。我在这里使用的是<a href="https://bilibili.com/BV1PJ411n7xZ" target="_blank" rel="noopener">JVM教程</a></strong></p><p><strong>2020年6月转<code>ubuntu</code>系统了，用的<a href="https://pan.baidu.com/s/1ldwYHZh0fcIhmSG_POIUtQ" target="_blank" rel="noopener">jdk8u221</a>（提取码：r5vi）。</strong></p><a id="more"></a><h2 id="学习之前的唠嗑"><a href="#学习之前的唠嗑" class="headerlink" title="学习之前的唠嗑"></a>学习之前的唠嗑</h2><p>在学习之前，个人还是觉得方法非常重要。博主自己的高数老师曾说过：<strong>理解是肤浅的，记忆是深刻的。</strong></p><p>在学习的时候，往往查了“为什么”之后，看了，然后忘了。所以，个人觉得，学习的时候“为什么”往往不是那么重要，因为目前的你并没有建立起系统的知识架构，整个大脑就是一团浆糊，问不出什么实质性的东西。需要先将“是什么”落实到实处，再开始问“为什么”，这样你的思维才更加系统，也会在慢慢填补“是什么”的时候慢慢地理解到“为什么”。</p><h2 id="为什么学JVM"><a href="#为什么学JVM" class="headerlink" title="为什么学JVM"></a>为什么学JVM</h2><p>很多人在学习的过程中或者学习之前都会问这个问题。这里针对学习过程中的人提出一些看法，因为我也是，我多少还是有点资格回答这个问题。</p><p>如果你有经验，了解<code>SSM</code>、<code>SSH</code>乃至<code>Springoot</code>甚至<code>SpringCloud</code>的用法，你们可能非常希望能够快速投身行业中，用自己“<strong>高超</strong>”的技术马上在公司中获得一席之地。那还是太天真了。现在不管是大学计算机专业，还是培训班速成小班，还是关系户师徒学堂，都在<strong>大批量</strong>地产出<strong>熟悉框架</strong>、<strong>知晓基本规范</strong>的码农，都是随处可见的<strong>富士康工人</strong>，<strong>没有感情的<code>API</code>调用工程师</strong>。尤其是学的还不错但是从未接触过<code>JVM</code>的人，往往走入了能够胜任的误区。因为往往现实生活中并不像大学一样<strong>1000封顶的访问量</strong>、<strong>10左右的并发量</strong>，而是直接上千万上亿的并发控制、海量数据字段的查询和修改。这不是一个普通应届毕业生能够接触到的项目，更不是一个普通培训班出身的人能够担负的任务（<em>如果是在大厂有师傅带就另说</em>）。</p><p>所以，当我们真正面对如此凶猛的并发和访问的时候，往往需要了解最底层的执行原理，深刻地明白每一步真正的操作，明确哪些是我能够优化得更好的，哪些是系统定死了没有办法的。<strong>一点点避开没有办法的，一点点优化能够优化的</strong>，从而完成一定的优化。当然，这种优化肯定是有极限的，也就是<strong>硬件的极限</strong>。这些都是后话了。由于硬件更新换代在写这篇文章的一年达到了一个瓶颈，始终无法得到质的提升，所以软件优化也就变得尤为重要。</p><p>如果说的更真实一点，那就是因为所有的<code>Java</code>岗位都是会在面试的时候文问很多有关<code>JVM</code>的问题，不光是<code>BATJ</code>，还有其他中小企业。如果没有准备，被面试官灵魂拷问锤得心态爆炸还是很难受的。</p><h2 id="JVM难点"><a href="#JVM难点" class="headerlink" title="JVM难点"></a>JVM难点</h2><h3 id="JVM确实是非常枯燥非常无聊的"><a href="#JVM确实是非常枯燥非常无聊的" class="headerlink" title="JVM确实是非常枯燥非常无聊的"></a>JVM确实是非常枯燥非常无聊的</h3><p>其中大多都是一些名词之间相互推导，相互解释。更让人摸不着头脑的是，JVM并不像应用框架一样随便写一写就有一个很有反馈性的结果，而是一大堆原理性的内容，比如内存地址等等，眼睛看不见，手也摸不到，<strong>深渊一样黑暗的DOS框简直让人绝望</strong>。</p><h3 id="JVM学习难以有立竿见影的效果"><a href="#JVM学习难以有立竿见影的效果" class="headerlink" title="JVM学习难以有立竿见影的效果"></a>JVM学习难以有立竿见影的效果</h3><p>JVM的学习往往是潜移默化的，因为不会立即应用到实践中去。但在原理慢慢搭建起来的时候，编码习惯也会<strong>随之而改变</strong>。</p><p>举个很简单的例子：<strong>理解JVM垃圾回收机制之前，变量初始化看心情写</strong>。这个写null，那个new一个，再来个静态变量；但是<strong>理解了垃圾回收机制之后，立马就规范了变量初始化的编码习惯</strong>。当然，这也可能和<strong>设计模式</strong>与<strong>框架原理</strong>的学习有关，但是<code>JVM</code>依然是众中之重。正所谓<strong>基础不牢，地动山摇</strong>。</p><h3 id="英文原文文献更有效果，但是看起来非常吃力"><a href="#英文原文文献更有效果，但是看起来非常吃力" class="headerlink" title="英文原文文献更有效果，但是看起来非常吃力"></a>英文原文文献更有效果，但是看起来非常吃力</h3><p>国内并没有一款非常优秀的教材，虽然目前已经相对于以前非常丰富了，已经有很多人踩了坑，但还是推荐更为权威的英文文档。更恐怖的是，英文学习没有捷径，是一条充满了血与泪的道路。</p><p>当然，作为母语是中文的我，阅读正儿八经的外文学术文章还是非常吃力的。各种各样神奇的语法都是见都没见过的，明明单词都认识，但就是翻译不出来那种味道。可能还是语文功底不够吧……以后得多看看书了。</p><h3 id="源码的阅读简直是一场噩梦"><a href="#源码的阅读简直是一场噩梦" class="headerlink" title="源码的阅读简直是一场噩梦"></a>源码的阅读简直是一场噩梦</h3><p><code>HashMap</code>、<code>ConcurrentHashMap</code>、<code>Spring</code>、<code>MyBatis</code>等等常用框架的源码是非常重要的，不仅是了解其中的<code>API</code>的调用，更是其中原理的掌握。比如，<code>HashMap</code>的<strong>长度拓展原理</strong>和<code>Spring</code>框架的<strong>循环依赖</strong>处理，都是非常重要的。如何通过<code>HashMap</code>优化、如何通过<code>Spring</code>解决变量和依赖，都是在实际工作中非常细节但是非常重要的知识点，也是面试重点。</p><p>另外，在学习过程中当你遇到查都查不到的问题时，<strong>源码是最好的参考书</strong>。举个简单的例子，当你需要明白<code>Thread</code>和<code>Runnable</code>两者对线程的控制谁更贴合需求的时候，源码里面对应类的各种方法中的注释是最好的说明。<code>Thread</code>类中的<code>start</code>方法的注释明确说明了：<strong>当线程结束后，由<code>Thread</code>类及其子类创建的线程将不会允许被第二次调用</strong>。而<code>Runnable</code>类并没有这一项说明，并且线程之间可以使用<code>notify</code>或者<code>notifyAll</code>方法反复相互调用，达到无限循环的效果。</p><h2 id="不怎么重要的重点"><a href="#不怎么重要的重点" class="headerlink" title="不怎么重要的重点"></a>不怎么重要的重点</h2><p><code>JVM</code>不是只有<code>Oracle甲骨文公司</code>特有，有些公司也有自己的<code>JVM</code>。当然，每个<code>JVM</code>都有自己独特的特点，都是由世界级大佬根据需求设计的适应极端环境的虚拟机。由于企业并不是研究所，所以这些<code>JVM</code>设计出来后也将不会再重构，即是说原理将保持不变。现在中国市场使用最多的主要还是<code>Oracle</code>的<code>jdk</code>，其他的<code>open-jdk</code>之类用的比例实在太少，这里就不一一详细说明了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;这里是学习JVM视频的一些笔记，版本是&lt;a href=&quot;https://pan.baidu.com/s/1nYrw9fie-ZvHTReqD6hdLA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jdk8u144&lt;/a&gt;（提取码：s3xf）。我在这里使用的是&lt;a href=&quot;https://bilibili.com/BV1PJ411n7xZ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JVM教程&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2020年6月转&lt;code&gt;ubuntu&lt;/code&gt;系统了，用的&lt;a href=&quot;https://pan.baidu.com/s/1ldwYHZh0fcIhmSG_POIUtQ&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jdk8u221&lt;/a&gt;（提取码：r5vi）。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="http://www.sakebow.cn/categories/java/"/>
    
    
      <category term="JVM" scheme="http://www.sakebow.cn/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>大学生活总结</title>
    <link href="http://www.sakebow.cn/2020/02/02/diary/my-college-life/"/>
    <id>http://www.sakebow.cn/2020/02/02/diary/my-college-life/</id>
    <published>2020-02-02T10:30:11.000Z</published>
    <updated>2020-11-26T21:16:18.000Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">如果你坚持要看，请联系我。</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
    
    <summary type="html">
    
      本文包含了非常多的“内心宣泄”与“偏见”，因此不开放。
    
    </summary>
    
    
      <category term="日记" scheme="http://www.sakebow.cn/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="大学生活的各种吐槽" scheme="http://www.sakebow.cn/tags/%E5%A4%A7%E5%AD%A6%E7%94%9F%E6%B4%BB%E7%9A%84%E5%90%84%E7%A7%8D%E5%90%90%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>Hexo设置背景图片轮播效果</title>
    <link href="http://www.sakebow.cn/2020/01/29/hexo/hexo%E4%BF%AE%E6%94%B9%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/"/>
    <id>http://www.sakebow.cn/2020/01/29/hexo/hexo%E4%BF%AE%E6%94%B9%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87/</id>
    <published>2020-01-29T08:41:00.000Z</published>
    <updated>2020-11-12T14:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>Next主题确实是好用，但是中间还是有太多太多的坑，差点没把自己摔死。这个博客记录了完成背景图片轮播的博客，喜欢折腾的同学可以看看，这方面对CSS3的要求略微有点高。</strong></p><a id="more"></a><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>的<a href="https://github.com/theme-next" target="_blank" rel="noopener">NexT</a>主题非常简约，个性化调整也非常方便。在这里就给大家介绍Hexo的背景图片轮播的制作方法。</p><h2 id="尴尬的开发条件"><a href="#尴尬的开发条件" class="headerlink" title="尴尬的开发条件"></a>尴尬的开发条件</h2><p>由于我还很菜，再加上电脑卡顿严重，有时候所有方法全部试了一遍都没有效果，重新创建一个工程就好了，也有时候重启就好了。这个背景图片轮播就是<strong>除了吃饭连续调了36个小时</strong>，<strong>最后重新新建一个项目就好了</strong>。这样的情况下调bug简直就是折磨。所以我基本上就用最小幅度的修改来保证需求的实现。</p><p>好了，来看看从入门到入土的全过程吧。我使用的是<code>WebStorm</code>作为<code>IDE</code>，其中内置的终端是可以操作的。如果没有<code>WebStorm</code>的话，可以使用<code>git</code>的<code>Windows</code>桌面版客户端自带的终端，即<code>Git Bash</code>，是个非常不错的终端，个人非常喜欢<code>Vim</code>风格。但是<code>Windows</code><strong>自带的终端是不可以操作</strong><code>Hexo</code>的，连<code>PowerShell</code><strong>的管理员模式也不可以</strong>，这一点还请注意。</p><h2 id="开发条件更新（2020年6月27日）"><a href="#开发条件更新（2020年6月27日）" class="headerlink" title="开发条件更新（2020年6月27日）"></a>开发条件更新（2020年6月27日）</h2><p>弱弱电脑泡水了，光荣牺牲。现在换了强强电脑，也就是现在的台式机，并且改用内存占用更少的<code>VScode</code>配合<code>Git Bash</code>分别完成<strong>编辑</strong>和<strong>部署</strong>。<code>VScode</code>中安装的插件就是<code>markdown-all-in-one</code>、<code>GitLens</code>和<code>Language-Stylus</code>，分别完成<code>markdown编辑</code>、<code>GitHub部署</code>和<code>Stylus样式表</code>三个部分。很可惜的是<code>VScode</code>自带的终端不能代替<code>Git Bash</code>，就有点不太方便。其他的都还可以。</p><h2 id="确定背景图片"><a href="#确定背景图片" class="headerlink" title="确定背景图片"></a>确定背景图片</h2><p>我们先找好一个背景图片，就你啦。<em><del>没错，博主是个不折不扣的死肥宅</del></em></p><p><img src="https://sakebow.gitee.io/images/background/poi.png" alt="夕立"></p><p>然后把他放在背景图片中。由于夕立的图片从左到右对比度差异比较大，我准备加上透明度。透明度确实有很多种方法，我选了个对模板改动最小的方法：<code>after伪类</code>。于是，<strong>噩梦开始了</strong>。</p><h2 id="写入样式表"><a href="#写入样式表" class="headerlink" title="写入样式表"></a>写入样式表</h2><p>在NexT模板里面，样式表大多是用styl文件存储的，简单地说，它是一种新语言，叫Stylus语言，基于nodejs，非常强大，补足了CSS3的许多缺点。</p><p>接着我们找到NexT模板中给我们预留的自定义样式文件中，也就是根目录下的：<code>/themes/next/source/css/_custom/custom.styl</code>，打开发现是个空的。</p><p>好了，写下我们的代码：（<em>由于里面包含keyframe，就直接用CSS3全部写完了，没用上stylus</em>）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 在上层的body什么都不要写，因为body加上透明度opacity后文字也变得透明了</span></span><br><span class="line"><span class="comment"> * 于是所有的东西全部写在伪类，这里只保留最低限度的：层数（防遮盖）、位置（相对伪类的位置）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">position </span>: relative;</span><br><span class="line">  <span class="attribute">z-index </span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 在伪类中加上所有的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content </span>: <span class="string">''</span>;                 <span class="comment">/* 伪类需要有内容，否则会变成0*0，无法显示效果 */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;                  <span class="comment">/* 宽度拉满 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;                 <span class="comment">/* 高度拉满 */</span></span><br><span class="line">  <span class="attribute">background-size</span>: cover;       <span class="comment">/* 背景图片铺满整个容器 */</span></span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat; <span class="comment">/* 不要重复 */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;                 <span class="comment">/* 透明度为50% */</span></span><br><span class="line">  <span class="attribute">-moz-opacity</span>: <span class="number">0.5</span>;            <span class="comment">/* 火狐浏览器的透明度设置 */</span></span><br><span class="line">  <span class="attribute">-khtml-opacity</span>: <span class="number">0.5</span>;          <span class="comment">/* safari浏览器的透明度设置，它使用了KDE的KHTML作为内核 */</span></span><br><span class="line">  <span class="attribute">position</span>: fixed;              <span class="comment">/* 位置设为固定，否则往下滑背景图片就滑没了 */</span></span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;                  <span class="comment">/* 防遮罩 */</span></span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;                       <span class="comment">/* y坐标抵到浏览器顶部 */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;                      <span class="comment">/* x坐标抵到浏览器左侧 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>于是，就有了这样的效果：</p><p><img src="https://sakebow.gitee.io/images/hexo-change-background-image/screenshots/1.png" alt="演示效果图1"></p><p>看着好像还行？</p><h2 id="编写js脚本"><a href="#编写js脚本" class="headerlink" title="编写js脚本"></a>编写js脚本</h2><p>找到根目录下的<code>/themes/next/source/js/src</code>，在其中<strong>新建</strong>一个<code>js</code>文件。这里并没有给我们预留一个空文件，那就自己新建好了。我新建了<code>custom.js</code>文件。</p><p><strong>严重警告</strong>：下面这个例子是我第一次的尝试，是<strong>错误的</strong>！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将所有的路径写下来</span></span><br><span class="line"><span class="keyword">let</span> imgUrl = [</span><br><span class="line">  <span class="string">'/images/background/poi.png'</span>, <span class="comment">// 舰娘夕立</span></span><br><span class="line">  <span class="string">'/images/background/touhou-red.jpg'</span> <span class="comment">// 东方红魔馆</span></span><br><span class="line">];</span><br><span class="line"><span class="comment">// 这里let类型是ECMA script6的特性</span></span><br><span class="line"><span class="comment">// 可以让我们把这个变量仅限于大括号内，可以组织非法访问带来的莫名其妙的问题</span></span><br><span class="line"><span class="keyword">let</span> imgIndex = <span class="number">0</span>; <span class="comment">// 设置imgIndex来选择imgUrl中的字符串</span></span><br><span class="line"><span class="comment">// 设置计时器，每8秒换一次图片</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里用setInterval函数</span></span><br><span class="line"><span class="comment"> * 传递2个参数</span></span><br><span class="line"><span class="comment"> *   一个是执行的事件，也就是函数对象</span></span><br><span class="line"><span class="comment"> *       可以写好了再把方法名传进来，也可以直接在这里定义</span></span><br><span class="line"><span class="comment"> *   还有一个是中间等待的时间，也就是多长时间执行一次</span></span><br><span class="line"><span class="comment"> * 返回一个定时器对象，方便在需要删除该定时器的时候直接引用</span></span><br><span class="line"><span class="comment"> * 如果不删除定时器，这个定时器就会一直进行下去</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> interval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、获取需要变更的元素</span></span><br><span class="line">  <span class="comment">// 2、变更url</span></span><br><span class="line">  $(<span class="string">'body:after'</span>).css(<span class="string">"background-image"</span>, <span class="string">"url('"</span> + imgUrl[imgIndex] + <span class="string">"')"</span>);</span><br><span class="line">  <span class="comment">// 3、imgIndex自增，越界归零，也就是循环播放效果</span></span><br><span class="line">  (imgIndex === imgUrl.length) ? (imgIndex = <span class="number">0</span>) : (imgIndex++)</span><br><span class="line">  <span class="comment">// 这个是唯一的三元运算符，可以叫做冒号运算符</span></span><br><span class="line">  <span class="comment">// 如果满足问号前的条件，就执行第二个括号里面的语句，否则执行第三个括号里面的语句。</span></span><br><span class="line">  <span class="comment">// 由于运算符有规定的优先顺序，所以这里不加括号也是完全OK的，只是为了让大家看得清楚才加上的</span></span><br><span class="line">&#125;, <span class="number">8000</span>);</span><br></pre></td></tr></table></figure><p>最后，找到根目录下的<code>/themes/next/layout/_custom/header.swig</code>，这是个空文件。在里面引入jQuery和我们刚刚完成的js文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里是用的bootcdn中的jQuery镜像，可以加载得稍微快一点点，这一点点差别人类感觉不到就是了。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同样的，由于实在next模板内做的修改，src="/"访问的其实是根目录下的/themes/next，所以从/js/开始 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/custom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>科普：</strong><code>swig</code>简单的说就是一种超级强大的工具，基本上很多语言都支持，甚至可以用于汇编开发中。</p></blockquote><p>好的！到这里就结束了！在WebStorm下方的Terminal（汉化了的同学这里叫做“终端”）输入hexo server，敲下回车就可以运行了。终端会弹出一大堆东西，其中有一句话是：”localhost:4000/“，点击就会自动呼出浏览器运行结果。</p><blockquote><p><strong>P.S.</strong> 会玩的同学可以在淘宝上购买一个超大号的回车键，每当这个时候就可以郑重地像按起爆器一样按下去，非常有仪式感。</p></blockquote><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>然后，什么效果都没有。</p><p><strong>我慌了</strong>。</p><p>一开始我以为是url拼接的问题，调了很久很久，一直没成功。直到最后，我才明白：<strong>伪类after不可以被选中</strong>。</p><p><strong>全部木大啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊(╯‵□′)╯︵┻━┻</strong></p><p>上网一查，发现有一些方法，比如append一个新的style标签，这样子很难看清楚，也不容易编写。最后还是决定：<strong>把每一个图片定义成一个单独的CSS样式的类，然后每隔一段时间让body换个类</strong>。听着不难？试试吧。</p><h3 id="再次修改"><a href="#再次修改" class="headerlink" title="再次修改"></a>再次修改</h3><p><strong>还是严重警告</strong>：下面的<code>CSS</code>部分是第二次尝试，还是略微有一点点问题，<strong>下方注释会标记有问题的地方</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-class">.pekora</span>, <span class="selector-class">.beaten</span>, <span class="selector-class">.collection</span>, <span class="selector-class">.touhou-red</span>, <span class="selector-class">.bang</span>, <span class="selector-class">.succubus</span>, <span class="selector-class">.poi</span> &#123;</span><br><span class="line">  <span class="attribute">position </span>: relative;</span><br><span class="line">  <span class="attribute">z-index </span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-class">.pekora</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.touhou-red</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.beaten</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.collection</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.bang</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.succubus</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.poi</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content </span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-moz-opacity</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">-khtml-opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 加上动画 */</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 我给animation传入的3个值分别是：</span></span><br><span class="line"><span class="comment">   *   - 动画名称 - bg-scale</span></span><br><span class="line"><span class="comment">   *   - 延迟时间 - 动画会持续8秒</span></span><br><span class="line"><span class="comment">   *   - 执行次数 - 无限执行：infinite</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="attribute">animation </span>: bg-scale <span class="number">8s</span> infinite;</span><br><span class="line">  <span class="attribute">-webkit-animation </span>: bg-scale <span class="number">8s</span> infinite;</span><br><span class="line">  <span class="attribute">-moz-animation </span>: bg-scale <span class="number">8s</span> infinite;</span><br><span class="line">  <span class="attribute">-o-animation </span>: bg-scale <span class="number">8s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大家完全可以复制粘贴，注意这下面的url要换成自己的图片路径。</span></span><br><span class="line"><span class="comment"> * 例如我将图片存在了根目录下的/themes/next/source/images/background/里面，所有的url就都这样配置了</span></span><br><span class="line"><span class="comment"> * 需要说明的是：这是在next模板中配置的，所以url("/")所访问的根目录是/themes/next/source/</span></span><br><span class="line"><span class="comment"> * 所以url就直接是省略了前面的，从/images/开始</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* hololive所属vtuber三期生：pekora，嚣张的兔子 */</span></span><br><span class="line"><span class="selector-class">.pekora</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/pekora.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 东方红魔馆 */</span></span><br><span class="line"><span class="comment">/* 把body:after也设置了就是为了初始化</span></span><br><span class="line"><span class="comment"> * 这样一开始就是这个图片作为背景，</span></span><br><span class="line"><span class="comment"> * 也算是不动用重要模板文件的最小程度修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.touhou-red</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/touhou-red.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 将R16的百合图片中，攻的一方配上“现实”，受的一方配上“我”。看到这张图片的时候我的心情非常复杂 */</span></span><br><span class="line"><span class="selector-class">.beaten</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/beaten.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 澡堂中的舰娘们 */</span></span><br><span class="line"><span class="selector-class">.collection</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/collection.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 偶像大师（圣诞限定版） */</span></span><br><span class="line"><span class="selector-class">.bang</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/bang.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 四只比基尼魅魔，是《魅魔和社畜》的作者所作，没有下海（一直在反复横跳就是了），不过老师的狗粮真的很美味 */</span></span><br><span class="line"><span class="selector-class">.succubus</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/succubus.jpg"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 舰娘夕立 */</span></span><br><span class="line"><span class="selector-class">.poi</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background-image </span>: <span class="built_in">url</span>(<span class="string">"/images/background/poi.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 最后再加上切换的动画 */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是一个叫做bg-scale的动画</span></span><br><span class="line"><span class="comment"> * 其实原本是有scale这个缩放的动作的</span></span><br><span class="line"><span class="comment"> * 但是违和感太强烈了删掉了</span></span><br><span class="line"><span class="comment"> * 结果这个莫名其妙的名字没改</span></span><br><span class="line"><span class="comment"> * 因为影响不大就算了吧！诶嘿~⭐</span></span><br><span class="line"><span class="comment"> * 大家可以在这其中加入自定义的动作</span></span><br><span class="line"><span class="comment"> * 尤其注意scale（缩放）和translate（平移）混用的时候scale应当在前面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  注意：这个动画设置略微有一点点误差。</span></span><br><span class="line"><span class="comment"> *       后面有修改版本，请不要复制这里的动画设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@keyframes</span> bg-scale &#123;</span><br><span class="line">  <span class="comment">/* 最开始的状态 */</span></span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 经历1/5的时间到这一步</span></span><br><span class="line"><span class="comment">   * 完成的事件：</span></span><br><span class="line"><span class="comment">   *   - 透明度增加到50%</span></span><br><span class="line"><span class="comment">   *   - 从上方3%的地方移到了正中间（浏览器y轴朝下）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 经历3/5的时间到这一步</span></span><br><span class="line"><span class="comment">     * 完成的事件：</span></span><br><span class="line"><span class="comment">     *   - 什么都没变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 最后1/5的时间到这一步</span></span><br><span class="line"><span class="comment">   * 完成的事件：</span></span><br><span class="line"><span class="comment">   *   - 透明度变为0%（完全看不见）</span></span><br><span class="line"><span class="comment">   *   - 从正中间平移到下方3%的地方</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下面都是针对各种浏览器的特化，意义是一样的 */</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-moz-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-o-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-o-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于，<strong>背景动了</strong>。虽然只是不停的重复同一张图片，但是那种感动、懊悔和愤慨，久久地回荡在胸腔中。最终，爆发了出来：<strong>wdnmd</strong>！</p><h3 id="最后加上js脚本（custom-js）"><a href="#最后加上js脚本（custom-js）" class="headerlink" title="最后加上js脚本（custom.js）"></a>最后加上js脚本（custom.js）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是jQuery的写法，意思是一打开这页面就这么做</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 先准备好和类名一样的字符串数组</span></span><br><span class="line">  <span class="keyword">let</span> IMG_CLASS = [<span class="string">"touhou-red"</span>, <span class="string">"poi"</span>, <span class="string">"beaten"</span>, <span class="string">"collection"</span>, <span class="string">"pekora"</span>, <span class="string">"succubus"</span>, <span class="string">"bang"</span>];</span><br><span class="line">  <span class="comment">// 再准备一个索引</span></span><br><span class="line">  <span class="keyword">let</span> imgIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/** 还需要一个计时器</span></span><br><span class="line"><span class="comment">   * 这个计时器传入了两个参数</span></span><br><span class="line"><span class="comment">   *   - 第一个表示需要重复的动作</span></span><br><span class="line"><span class="comment">   *   - 第二个表示下一次动作的延迟时间</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> interval = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 删除上一个类名（如果本身就没有这个类名也不会报错）</span></span><br><span class="line">    $(<span class="string">"body"</span>).removeClass(IMG_CLASS[imgIndex]);</span><br><span class="line">    <span class="comment">// 索引 + 1</span></span><br><span class="line">    imgIndex++;</span><br><span class="line">    <span class="comment">// 当越界的时候归零，变成循环展示图片</span></span><br><span class="line">    <span class="keyword">if</span> (imgIndex == IMG_CLASS.length) &#123;</span><br><span class="line">      imgIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加上当前索引所指向的类名</span></span><br><span class="line">    $(<span class="string">"body"</span>).addClass(IMG_CLASS[imgIndex]);</span><br><span class="line">  &#125;, <span class="number">8000</span>); <span class="comment">// 每8000毫秒，也就是8秒执行一次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="希望之花"><a href="#希望之花" class="headerlink" title="希望之花"></a>希望之花</h3><p>知道这个梗的人应该都明白，“不要停下来啊！”代表的是什么意思。没错，还远远没有结束。<strong>心态崩坏第二弹</strong>：<strong>js代码本身存在的bug</strong></p><p>JavaScript代码是运行在客户端的。所以它代表了一个问题：客户的电脑情况很大程度上决定了代码的成果。比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/highlight.js/9.6.0/styles/github.min.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>乍一看没什么问题。<strong>可是这天你断网了</strong>。码农好好的坐在公司里调bug，一口大锅就这么扣在了他头上。</p><p>我所遇到的情况正是如此。js里写好了8000ms的延迟，CSS样式文件里也清清楚楚写了8s，但是就是有误差，这个误差不是别的原因，就是由每个人的电脑性能不同决定的。新的图片展示之前，旧的图片会很明显的闪一下。就这么一点点的误差展现了这么刺眼的效果。</p><p>求求你让我下班吧……orz</p><h3 id="暴力解决"><a href="#暴力解决" class="headerlink" title="暴力解决"></a>暴力解决</h3><p>我放弃了思考，如果会闪的话，那就是说，在js执行之前，keyframe动画就已经开始了执行下一个动画。那么，眼不见为净，就让这短暂的几帧动画看不到就好了！</p><p>于是，keyframe的最终版：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用这一段代码替换之前提到的的keyframe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@keyframes</span> bg-scale &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 在这1/20的时间里什么都不做</span></span><br><span class="line"><span class="comment">   * 保持透明度为0（什么都看不见的白板）</span></span><br><span class="line"><span class="comment">   * 于是造成了小于1秒的空白背景</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  5% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 紧接着，这1/5的时间里完成了：</span></span><br><span class="line"><span class="comment">   *   - 透明度从0变为50</span></span><br><span class="line"><span class="comment">   *   - 从上方3%的位置移到正中间</span></span><br><span class="line"><span class="comment">   * 所以，之前小于1秒的空白背景就在忍受范围内了！</span></span><br><span class="line"><span class="comment">   * 我可真是个靓仔</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  5% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-moz-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-moz-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  5% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-moz-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-o-keyframes</span> bg-scale&#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-o-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  5% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-o-transform </span>: <span class="built_in">translateY</span>(-<span class="number">3%</span>) ;</span><br><span class="line">  &#125;</span><br><span class="line">  25% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">opacity </span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">-o-transform</span>: <span class="built_in">translateY</span>(<span class="number">3%</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nice！<strong>下班啦</strong>！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然这个方法是有点问题的，比如<strong>网速慢的时候只能第一张图片无限循环</strong>；<strong>后期添加图片的时候非常的麻烦</strong>等等非常无奈的问题。但是总体效果还是非常不错的呐！</p><p>虽然路途坎坷，但是确实可以看出，<code>Hexo</code>的美化要是认真从前端入手一点点深入，一点点修改，就能够做出你认为最好的。正因为方法多样，所以才有如此广阔的创意模板和二次魔改，这就是<code>Hexo</code>的魅力不是吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Next主题确实是好用，但是中间还是有太多太多的坑，差点没把自己摔死。这个博客记录了完成背景图片轮播的博客，喜欢折腾的同学可以看看，这方面对CSS3的要求略微有点高。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://www.sakebow.cn/categories/Hexo/"/>
    
    
      <category term="NexT主题踩坑" scheme="http://www.sakebow.cn/tags/NexT%E4%B8%BB%E9%A2%98%E8%B8%A9%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>这是我的hexo博客</title>
    <link href="http://www.sakebow.cn/2020/01/27/README/"/>
    <id>http://www.sakebow.cn/2020/01/27/README/</id>
    <published>2020-01-27T08:10:23.000Z</published>
    <updated>2020-11-11T15:08:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p><strong>2020年6月2日，在找工作的绝望之中接到了研究生的待录取通知，现在终于闲下来了。所以将所有乱七八糟的笔记重新整理一遍，梳理知识点的同时也加强记忆。</strong></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>废话我就不多说了，Hexo到现在已经发展到无人不知的地步了，所以这里就单纯说一些想说的话。</p><h2 id="博客内容"><a href="#博客内容" class="headerlink" title="博客内容"></a>博客内容</h2><p>这个博客我就准备作为<strong>技术笔记</strong>和<strong>日记</strong>来使用了。</p><p>由于之前所有的笔记非常凌乱，不全、空白的占多数，而且没有好好归类。现在就重新整理一下。之前发表的文章也不算多数，所以工作量也不是很大。这次弄完了就准备一直用这样的格式了。这样的风格可能不是最绚丽的，<strong>但一定是我用心做的</strong>；技术文档一定是认真考证之后才发出来，其中的文字描述和图片描述一定尽可能简单完善。</p><p>当然，我一个人不可能研究所有的技术，所以会有一些博客会有引用别人文章的地方。我会一一标明出处，表示对原作者劳动成果的尊敬。也希望各位读者在传递知识的时候也传承这份尊敬。</p><p>但是对于日记呢，我会设置密码。因为毕竟是自己的日记，多少还是有非常强烈的个人情感，公开的话有可能对某些人造成伤害。</p><p>最后，也会开设一个<strong>个人信息</strong>的栏目，作为求职的在线简历。我也明白对面的HR绝对不想看，也明白他们没时间看，所以就放一个在线的，至少点进去就能有所反馈，而不是点开邮箱再下载。</p><h2 id="进度安排"><a href="#进度安排" class="headerlink" title="进度安排"></a>进度安排</h2><p>之前学习的时候一直不注意笔记的整理，单纯的看视频，往往有很多的弊端。看到后面忘记了前面，只能把前面的重新看一遍。所以这些将会好好地记录视频里面的重要笔记。技术博客的话我还是非常希望我能够3天一更，并且能够坚持一直更新下去。我也会尽可能的逼自己，我自己的三分钟热度我还是非常清楚的；而日记就是随性而写了，并无固定的更新周期。</p><p>再就是现在明显感觉到了自己的语文水平实在太尴尬，之后还是会开一个读书笔记的栏目，不仅是提高自己的语文水平，以后有了孩子也还是要多在他面前读书，做好榜样。当然读书笔记我希望3天一更，和技术博客保持一样的进度。但是什么时候开始就不清楚了，可能有了孩子以后？总之我还是希望能够尽快。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>大概就是这些了，如果还有什么想说的我会继续更新的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;2020年6月2日，在找工作的绝望之中接到了研究生的待录取通知，现在终于闲下来了。所以将所有乱七八糟的笔记重新整理一遍，梳理知识点的同时也加强记忆。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="简介" scheme="http://www.sakebow.cn/categories/%E7%AE%80%E4%BB%8B/"/>
    
    
      <category term="想说的话" scheme="http://www.sakebow.cn/tags/%E6%83%B3%E8%AF%B4%E7%9A%84%E8%AF%9D/"/>
    
  </entry>
  
</feed>
